// <auto-generated />
#if !EXCLUDE_GENERATED_CODE
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 618
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998
using global::Orleans;

[assembly: global::Orleans.Metadata.FeaturePopulatorAttribute(typeof(OrleansGeneratedCode.OrleansCodeGenWWA_GrainInterfacesFeaturePopulator))]
[assembly: global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("WWA.GrainInterfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("DnsClient, Version=1.4.0.0, Culture=neutral, PublicKey=0024000004800000940000000602000000240000525341310004000001000100676f9d5ff1e268c55fda5578e9f09f27b5fdfadc2b96eec28616532974ffdab2551ac7082ef0037690e3f859328da8425afc284333a808f01b5bbef674a615723b1085b6404b293e10dc8132d5636b692edab794ada3f53711175f0520d3d84e217fc9269de230ee8ca90415f919514776435bff5cb94cad1652a90ead386fc1"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.CSharp, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.VisualBasic.Core, Version=10.0.6.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("Microsoft.Win32.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("MongoDB.Bson, Version=2.13.2.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("MongoDB.Driver.Core, Version=2.13.2.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("MongoDB.Driver, Version=2.13.2.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("MongoDB.Libmongocrypt, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("SharpCompress, Version=0.23.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010059acfa17d26c447a4d03f16eaa72c9187c04f16e6569dd168b080e39a6f5c9fd00f28c768cd8e9a089d5a0e1b34ccd971488e7afe030ce5ce8df2053cf12ec89f6d38065c434c09ee6af3ee284c5dc08f44774b679bf39298e57efe30d4b00aecf9e4f6f8448b2cb0146d8956dfcab606cc64a0ac38c60a7d78b0d65d3b98dc0"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.AppContext, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Buffers, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Immutable, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.Annotations, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.EventBasedAsync, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Console, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data.Common, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Contracts, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Debug, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.DiagnosticSource, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.FileVersionInfo, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Process, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.StackTrace, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.TextWriterTraceListener, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Tools, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.TraceSource, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Diagnostics.Tracing, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Drawing.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Dynamic.Runtime, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Formats.Asn1, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization.Calendars, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Globalization.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression.Brotli, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Compression.ZipFile, Version=5.0.0.0, Culture=neutral, PublicKey=00000000000000000400000000000000"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.DriveInfo, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.FileSystem.Watcher, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.IsolatedStorage, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.MemoryMappedFiles, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.IO.UnmanagedMemoryStream, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Memory, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Http, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Http.Json, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Mail, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.NameResolution, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.NetworkInformation, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Ping, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Requests, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.ServicePoint, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.Sockets, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebClient, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebHeaderCollection, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebProxy, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebSockets.Client, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Net.WebSockets, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Numerics.Vectors, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.DispatchProxy, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit.ILGeneration, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Emit.Lightweight, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Metadata, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Reflection.TypeExtensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.Reader, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.ResourceManager, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Resources.Writer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.CompilerServices.Unsafe, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.CompilerServices.VisualC, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Handles, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.InteropServices, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.InteropServices.RuntimeInformation, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Intrinsics, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Loader, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Numerics, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Formatters, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Json, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Runtime.Serialization.Xml, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Claims, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Algorithms, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Csp, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Encoding, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Cryptography.X509Certificates, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.Principal, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Security.SecureString, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding.CodePages, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encoding.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Encodings.Web, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.Json, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Channels, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Overlapped, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Dataflow, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Extensions, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Tasks.Parallel, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Thread, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.ThreadPool, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Threading.Timer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Transactions.Local, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Web.HttpUtility, Version=5.0.0.0, Culture=neutral, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.ReaderWriter, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XmlDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XmlSerializer, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XPath, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("System.Xml.XPath.XDocument, Version=5.0.0.0, Culture=neutral, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"), global::Orleans.CodeGeneration.OrleansCodeGenerationTargetAttribute("WWA.Configuration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")]
namespace WWA.GrainInterfaces
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::Orleans.CodeGeneration.MethodInvokerAttribute(typeof(global::WWA.GrainInterfaces.IUserService), (int)0x3C661A73), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal class OrleansCodeGenUserServiceMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        public async global::System.Threading.Tasks.Task<object> Invoke(global::Orleans.Runtime.IAddressable grain, global::Orleans.CodeGeneration.InvokeMethodRequest request)
        {
            int interfaceId = request.InterfaceId;
            int methodId = request.MethodId;
            var arguments = request.Arguments;
            switch (interfaceId)
            {
                case (int)0x3C661A73:
                {
                    var casted = ((global::WWA.GrainInterfaces.IUserService)grain);
                    switch (methodId)
                    {
                        case (int)0x1A1A5216:
                            return await casted.AuthenticateUserAsync((string)arguments[0], (string)arguments[1]);
                        case (int)0x7BB25074:
                            return await casted.QueryUsersAsync((string)arguments[0]);
                        case unchecked((int)0xE15A5ECB):
                            return await casted.GetUsersAsync((global::WWA.GrainInterfaces.Models.PaginationQueryModel)arguments[0]);
                        case unchecked((int)0xF5C91B90):
                            return await casted.GetUserAsync((string)arguments[0]);
                        case unchecked((int)0xDAA939C1):
                            return await casted.CreateUserAsync((global::WWA.GrainInterfaces.Models.UserModel)arguments[0]);
                        case unchecked((int)0xADA62858):
                            return await casted.ReplaceUserAsync((global::WWA.GrainInterfaces.Models.UserModel)arguments[0]);
                        case (int)0x3947F07D:
                            await casted.DeleteUserAsync((string)arguments[0]);
                            return null;
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        public int InterfaceId => (int)0x3C661A73;
        public ushort InterfaceVersion => 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.SerializableAttribute, global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.GrainReferenceAttribute(typeof(global::WWA.GrainInterfaces.IUserService))]
    internal class OrleansCodeGenUserServiceReference : global::Orleans.Runtime.GrainReference, global::WWA.GrainInterfaces.IUserService
    {
        OrleansCodeGenUserServiceReference(global::Orleans.Runtime.GrainReference other): base(other)
        {
        }

        OrleansCodeGenUserServiceReference(global::Orleans.Runtime.GrainReference other, global::Orleans.CodeGeneration.InvokeMethodOptions invokeMethodOptions): base(other, invokeMethodOptions)
        {
        }

        OrleansCodeGenUserServiceReference(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context): base(info, context)
        {
        }

        public override int InterfaceId => (int)0x3C661A73;
        public override ushort InterfaceVersion => 0;
        public override string InterfaceName => "IUserService";
        public override bool IsCompatible(int interfaceId) => interfaceId == (int)0x3C661A73;
        public override string GetMethodName(int interfaceId, int methodId)
        {
            switch (interfaceId)
            {
                case (int)0x3C661A73:
                {
                    switch (methodId)
                    {
                        case (int)0x1A1A5216:
                            return "AuthenticateUserAsync";
                        case (int)0x7BB25074:
                            return "QueryUsersAsync";
                        case unchecked((int)0xE15A5ECB):
                            return "GetUsersAsync";
                        case unchecked((int)0xF5C91B90):
                            return "GetUserAsync";
                        case unchecked((int)0xDAA939C1):
                            return "CreateUserAsync";
                        case unchecked((int)0xADA62858):
                            return "ReplaceUserAsync";
                        case (int)0x3947F07D:
                            return "DeleteUserAsync";
                        default:
                            ThrowMethodNotImplemented(interfaceId, methodId);
                            return null;
                    }
                }

                default:
                    ThrowInterfaceNotImplemented(interfaceId);
                    return null;
            }

            void ThrowInterfaceNotImplemented(int i) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}");
            void ThrowMethodNotImplemented(int i, int m) => throw new global::System.NotImplementedException($"InterfaceId: 0x{i:X}, MethodId: 0x{m:X}");
        }

        global::System.Threading.Tasks.Task<global::WWA.GrainInterfaces.Models.UserModel> global::WWA.GrainInterfaces.IUserService.AuthenticateUserAsync(string email0, string password1)
        {
            return base.InvokeMethodAsync<global::WWA.GrainInterfaces.Models.UserModel>((int)0x1A1A5216, new object[]{email0, password1});
        }

        global::System.Threading.Tasks.Task<int> global::WWA.GrainInterfaces.IUserService.QueryUsersAsync(string email0)
        {
            return base.InvokeMethodAsync<int>((int)0x7BB25074, new object[]{email0});
        }

        global::System.Threading.Tasks.Task<global::WWA.GrainInterfaces.Models.PaginatedEntityModel<global::WWA.GrainInterfaces.Models.UserModel>> global::WWA.GrainInterfaces.IUserService.GetUsersAsync(global::WWA.GrainInterfaces.Models.PaginationQueryModel paginationQueryModel0)
        {
            return base.InvokeMethodAsync<global::WWA.GrainInterfaces.Models.PaginatedEntityModel<global::WWA.GrainInterfaces.Models.UserModel>>(unchecked((int)0xE15A5ECB), new object[]{paginationQueryModel0});
        }

        global::System.Threading.Tasks.Task<global::WWA.GrainInterfaces.Models.UserModel> global::WWA.GrainInterfaces.IUserService.GetUserAsync(string id0)
        {
            return base.InvokeMethodAsync<global::WWA.GrainInterfaces.Models.UserModel>(unchecked((int)0xF5C91B90), new object[]{id0});
        }

        global::System.Threading.Tasks.Task<global::WWA.GrainInterfaces.Models.UserModel> global::WWA.GrainInterfaces.IUserService.CreateUserAsync(global::WWA.GrainInterfaces.Models.UserModel userModel0)
        {
            return base.InvokeMethodAsync<global::WWA.GrainInterfaces.Models.UserModel>(unchecked((int)0xDAA939C1), new object[]{userModel0});
        }

        global::System.Threading.Tasks.Task<global::WWA.GrainInterfaces.Models.UserModel> global::WWA.GrainInterfaces.IUserService.ReplaceUserAsync(global::WWA.GrainInterfaces.Models.UserModel userModel0)
        {
            return base.InvokeMethodAsync<global::WWA.GrainInterfaces.Models.UserModel>(unchecked((int)0xADA62858), new object[]{userModel0});
        }

        global::System.Threading.Tasks.Task global::WWA.GrainInterfaces.IUserService.DeleteUserAsync(string id0)
        {
            return base.InvokeMethodAsync<object>((int)0x3947F07D, new object[]{id0});
        }
    }
}

namespace WWA.GrainInterfaces.Models
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof(global::WWA.GrainInterfaces.Models.UserModel))]
    internal sealed class OrleansCodeGenWWA_GrainInterfaces_Models_UserModelSerializer
    {
        public OrleansCodeGenWWA_GrainInterfaces_Models_UserModelSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public object DeepCopier(object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::WWA.GrainInterfaces.Models.UserModel input = ((global::WWA.GrainInterfaces.Models.UserModel)original);
            global::WWA.GrainInterfaces.Models.UserModel result = new global::WWA.GrainInterfaces.Models.UserModel();
            context.RecordCopy(original, result);
            result.DateActive = input.DateActive;
            result.DateCreated = input.DateCreated;
            result.DateModified = input.DateModified;
            result.DisplayName = input.DisplayName;
            result.Email = input.Email;
            result.Id = input.Id;
            result.Password = input.Password;
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::WWA.GrainInterfaces.Models.UserModel input = (global::WWA.GrainInterfaces.Models.UserModel)untypedInput;
            context.SerializeInner(input.DateActive, typeof(global::System.DateTime? ));
            context.SerializeInner(input.DateCreated, typeof(global::System.DateTime? ));
            context.SerializeInner(input.DateModified, typeof(global::System.DateTime? ));
            context.SerializeInner(input.DisplayName, typeof(string));
            context.SerializeInner(input.Email, typeof(string));
            context.SerializeInner(input.Id, typeof(string));
            context.SerializeInner(input.Password, typeof(string));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::WWA.GrainInterfaces.Models.UserModel result = new global::WWA.GrainInterfaces.Models.UserModel();
            context.RecordObject(result);
            result.DateActive = (global::System.DateTime? )context.DeserializeInner(typeof(global::System.DateTime? ));
            result.DateCreated = (global::System.DateTime? )context.DeserializeInner(typeof(global::System.DateTime? ));
            result.DateModified = (global::System.DateTime? )context.DeserializeInner(typeof(global::System.DateTime? ));
            result.DisplayName = (string)context.DeserializeInner(typeof(string));
            result.Email = (string)context.DeserializeInner(typeof(string));
            result.Id = (string)context.DeserializeInner(typeof(string));
            result.Password = (string)context.DeserializeInner(typeof(string));
            return (global::WWA.GrainInterfaces.Models.UserModel)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof(global::WWA.GrainInterfaces.Models.PaginatedEntityModel<>))]
    internal sealed class OrleansCodeGenWWA_GrainInterfaces_Models_PaginatedEntityModelSerializer<TEntity>
    {
        public OrleansCodeGenWWA_GrainInterfaces_Models_PaginatedEntityModelSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public object DeepCopier(object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity> input = ((global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity>)original);
            global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity> result = new global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity>();
            context.RecordCopy(original, result);
            result.Page = (global::System.Collections.Generic.IList<TEntity>)context.DeepCopyInner(input.Page);
            result.TotalCount = input.TotalCount;
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity> input = (global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity>)untypedInput;
            context.SerializeInner(input.Page, typeof(global::System.Collections.Generic.IList<TEntity>));
            context.SerializeInner(input.TotalCount, typeof(int));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity> result = new global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity>();
            context.RecordObject(result);
            result.Page = (global::System.Collections.Generic.IList<TEntity>)context.DeserializeInner(typeof(global::System.Collections.Generic.IList<TEntity>));
            result.TotalCount = (int)context.DeserializeInner(typeof(int));
            return (global::WWA.GrainInterfaces.Models.PaginatedEntityModel<TEntity>)result;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0"), global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, global::Orleans.CodeGeneration.SerializerAttribute(typeof(global::WWA.GrainInterfaces.Models.PaginationQueryModel))]
    internal sealed class OrleansCodeGenWWA_GrainInterfaces_Models_PaginationQueryModelSerializer
    {
        public OrleansCodeGenWWA_GrainInterfaces_Models_PaginationQueryModelSerializer(global::Orleans.Serialization.IFieldUtils fieldUtils)
        {
        }

        [global::Orleans.CodeGeneration.CopierMethodAttribute]
        public object DeepCopier(object original, global::Orleans.Serialization.ICopyContext context)
        {
            global::WWA.GrainInterfaces.Models.PaginationQueryModel input = ((global::WWA.GrainInterfaces.Models.PaginationQueryModel)original);
            global::WWA.GrainInterfaces.Models.PaginationQueryModel result = new global::WWA.GrainInterfaces.Models.PaginationQueryModel();
            context.RecordCopy(original, result);
            result.Search = input.Search;
            result.Skip = input.Skip;
            result.SortDirection = input.SortDirection;
            result.SortField = input.SortField;
            result.Take = input.Take;
            return result;
        }

        [global::Orleans.CodeGeneration.SerializerMethodAttribute]
        public void Serializer(object untypedInput, global::Orleans.Serialization.ISerializationContext context, global::System.Type expected)
        {
            global::WWA.GrainInterfaces.Models.PaginationQueryModel input = (global::WWA.GrainInterfaces.Models.PaginationQueryModel)untypedInput;
            context.SerializeInner(input.Search, typeof(string));
            context.SerializeInner(input.Skip, typeof(int));
            context.SerializeInner(input.SortDirection, typeof(global::WWA.GrainInterfaces.Models.SortDirectionType));
            context.SerializeInner(input.SortField, typeof(string));
            context.SerializeInner(input.Take, typeof(int));
        }

        [global::Orleans.CodeGeneration.DeserializerMethodAttribute]
        public object Deserializer(global::System.Type expected, global::Orleans.Serialization.IDeserializationContext context)
        {
            global::WWA.GrainInterfaces.Models.PaginationQueryModel result = new global::WWA.GrainInterfaces.Models.PaginationQueryModel();
            context.RecordObject(result);
            result.Search = (string)context.DeserializeInner(typeof(string));
            result.Skip = (int)context.DeserializeInner(typeof(int));
            result.SortDirection = (global::WWA.GrainInterfaces.Models.SortDirectionType)context.DeserializeInner(typeof(global::WWA.GrainInterfaces.Models.SortDirectionType));
            result.SortField = (string)context.DeserializeInner(typeof(string));
            result.Take = (int)context.DeserializeInner(typeof(int));
            return (global::WWA.GrainInterfaces.Models.PaginationQueryModel)result;
        }
    }
}

namespace OrleansGeneratedCode
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("OrleansCodeGen", "2.0.0.0")]
    internal sealed class OrleansCodeGenWWA_GrainInterfacesFeaturePopulator : global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainInterfaceFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Metadata.GrainClassFeature>, global::Orleans.Metadata.IFeaturePopulator<global::Orleans.Serialization.SerializerFeature>
    {
        public void Populate(global::Orleans.Metadata.GrainInterfaceFeature feature)
        {
            feature.Interfaces.Add(new global::Orleans.Metadata.GrainInterfaceMetadata(typeof(global::WWA.GrainInterfaces.IUserService), typeof(WWA.GrainInterfaces.OrleansCodeGenUserServiceReference), typeof(WWA.GrainInterfaces.OrleansCodeGenUserServiceMethodInvoker), (int)0x3C661A73));
        }

        public void Populate(global::Orleans.Metadata.GrainClassFeature feature)
        {
        }

        public void Populate(global::Orleans.Serialization.SerializerFeature feature)
        {
            feature.AddSerializerType(typeof(global::WWA.GrainInterfaces.Models.UserModel), typeof(WWA.GrainInterfaces.Models.OrleansCodeGenWWA_GrainInterfaces_Models_UserModelSerializer), false);
            feature.AddSerializerType(typeof(global::WWA.GrainInterfaces.Models.PaginatedEntityModel<>), typeof(WWA.GrainInterfaces.Models.OrleansCodeGenWWA_GrainInterfaces_Models_PaginatedEntityModelSerializer<>), false);
            feature.AddSerializerType(typeof(global::WWA.GrainInterfaces.Models.PaginationQueryModel), typeof(WWA.GrainInterfaces.Models.OrleansCodeGenWWA_GrainInterfaces_Models_PaginationQueryModelSerializer), false);
            feature.AddKnownType("WWA.GrainInterfaces.IUserService,WWA.GrainInterfaces", "WWA.GrainInterfaces.IUserService");
            feature.AddKnownType("System.Threading.Tasks.Task`1", "Task`1'1");
            feature.AddKnownType("WWA.GrainInterfaces.Models.UserModel,WWA.GrainInterfaces", "WWA.GrainInterfaces.Models.UserModel");
            feature.AddKnownType("WWA.GrainInterfaces.Models.EntityModel,WWA.GrainInterfaces", "WWA.GrainInterfaces.Models.EntityModel");
            feature.AddKnownType("System.Threading.Tasks.Task", "Task");
            feature.AddKnownType("WWA.GrainInterfaces.Models.PaginatedEntityModel`1,WWA.GrainInterfaces", "WWA.GrainInterfaces.Models.PaginatedEntityModel`1'1");
            feature.AddKnownType("WWA.GrainInterfaces.Models.PaginationQueryModel,WWA.GrainInterfaces", "WWA.GrainInterfaces.Models.PaginationQueryModel");
            feature.AddKnownType("WWA.GrainInterfaces.Models.SortDirectionType,WWA.GrainInterfaces", "WWA.GrainInterfaces.Models.SortDirectionType");
            feature.AddKnownType("System.Nullable`1", "Nullable`1'1");
            feature.AddKnownType("System.Collections.Generic.IList`1", "IList`1'1");
            feature.AddKnownType("Interop+IpHlpApi+FIXED_INFO,DnsClient", "<global namespace>.FIXED_INFO");
            feature.AddKnownType("Interop+IpHlpApi+IP_ADDR_STRING,DnsClient", "<global namespace>.IP_ADDR_STRING");
            feature.AddKnownType("DnsClient.DnsDatagramReader,DnsClient", "DnsClient.DnsDatagramReader");
            feature.AddKnownType("DnsClient.DnsDatagramWriter,DnsClient", "DnsClient.DnsDatagramWriter");
            feature.AddKnownType("DnsClient.DnsMessageHandleType,DnsClient", "DnsClient.DnsMessageHandleType");
            feature.AddKnownType("DnsClient.DnsMessageHandler,DnsClient", "DnsClient.DnsMessageHandler");
            feature.AddKnownType("DnsClient.DnsOpCode,DnsClient", "DnsClient.DnsOpCode");
            feature.AddKnownType("DnsClient.ServiceHostEntry,DnsClient", "DnsClient.ServiceHostEntry");
            feature.AddKnownType("DnsClient.DnsQueryOptions,DnsClient", "DnsClient.DnsQueryOptions");
            feature.AddKnownType("DnsClient.DnsQueryAndServerOptions,DnsClient", "DnsClient.DnsQueryAndServerOptions");
            feature.AddKnownType("DnsClient.LookupClientOptions,DnsClient", "DnsClient.LookupClientOptions");
            feature.AddKnownType("DnsClient.DnsQuerySettings,DnsClient", "DnsClient.DnsQuerySettings");
            feature.AddKnownType("DnsClient.DnsQueryAndServerSettings,DnsClient", "DnsClient.DnsQueryAndServerSettings");
            feature.AddKnownType("DnsClient.LookupClientSettings,DnsClient", "DnsClient.LookupClientSettings");
            feature.AddKnownType("DnsClient.TruncatedQueryResponse,DnsClient", "DnsClient.TruncatedQueryResponse");
            feature.AddKnownType("DnsClient.DnsQueryResponse,DnsClient", "DnsClient.DnsQueryResponse");
            feature.AddKnownType("DnsClient.DnsQuestion,DnsClient", "DnsClient.DnsQuestion");
            feature.AddKnownType("DnsClient.DnsRecordFactory,DnsClient", "DnsClient.DnsRecordFactory");
            feature.AddKnownType("DnsClient.DnsRequestHeader,DnsClient", "DnsClient.DnsRequestHeader");
            feature.AddKnownType("DnsClient.DnsRequestMessage,DnsClient", "DnsClient.DnsRequestMessage");
            feature.AddKnownType("DnsClient.DnsHeaderResponseCode,DnsClient", "DnsClient.DnsHeaderResponseCode");
            feature.AddKnownType("DnsClient.DnsResponseCode,DnsClient", "DnsClient.DnsResponseCode");
            feature.AddKnownType("DnsClient.DnsResponseException,DnsClient", "DnsClient.DnsResponseException");
            feature.AddKnownType("DnsClient.DnsResponseHeader,DnsClient", "DnsClient.DnsResponseHeader");
            feature.AddKnownType("DnsClient.DnsResponseMessage,DnsClient", "DnsClient.DnsResponseMessage");
            feature.AddKnownType("DnsClient.DnsResponseParseException,DnsClient", "DnsClient.DnsResponseParseException");
            feature.AddKnownType("DnsClient.DnsString,DnsClient", "DnsClient.DnsString");
            feature.AddKnownType("DnsClient.DnsTcpMessageHandler,DnsClient", "DnsClient.DnsTcpMessageHandler");
            feature.AddKnownType("DnsClient.DnsTcpMessageHandler+ClientPool,DnsClient", "DnsClient.ClientPool");
            feature.AddKnownType("DnsClient.DnsTcpMessageHandler+ClientPool+ClientEntry,DnsClient", "DnsClient.DnsClient.ClientPool.ClientEntry");
            feature.AddKnownType("DnsClient.DnsUdpMessageHandler,DnsClient", "DnsClient.DnsUdpMessageHandler");
            feature.AddKnownType("DnsClient.IDnsQuery,DnsClient", "DnsClient.IDnsQuery");
            feature.AddKnownType("DnsClient.IDnsQueryResponse,DnsClient", "DnsClient.IDnsQueryResponse");
            feature.AddKnownType("DnsClient.ILookupClient,DnsClient", "DnsClient.ILookupClient");
            feature.AddKnownType("DnsClient.DisposableIntPtr,DnsClient", "DnsClient.DisposableIntPtr");
            feature.AddKnownType("DnsClient.LookupClient,DnsClient", "DnsClient.LookupClient");
            feature.AddKnownType("DnsClient.LookupClient+HandleError,DnsClient", "DnsClient.HandleError");
            feature.AddKnownType("DnsClient.LookupClient+SkipWorker,DnsClient", "DnsClient.SkipWorker");
            feature.AddKnownType("DnsClient.LookupClientAudit,DnsClient", "DnsClient.LookupClientAudit");
            feature.AddKnownType("DnsClient.NameServer,DnsClient", "DnsClient.NameServer");
            feature.AddKnownType("DnsClient.QueryClass,DnsClient", "DnsClient.QueryClass");
            feature.AddKnownType("DnsClient.QueryType,DnsClient", "DnsClient.QueryType");
            feature.AddKnownType("DnsClient.ResponseCache,DnsClient", "DnsClient.ResponseCache");
            feature.AddKnownType("DnsClient.ResponseCache+ResponseEntry,DnsClient", "DnsClient.ResponseEntry");
            feature.AddKnownType("DnsClient.Tracing+TraceLoggerFactory,DnsClient", "DnsClient.TraceLoggerFactory");
            feature.AddKnownType("DnsClient.Tracing+TraceLoggerFactory+TraceLogger,DnsClient", "DnsClient.TraceLogger");
            feature.AddKnownType("DnsClient.Internal.ILogger,DnsClient", "DnsClient.Internal.ILogger");
            feature.AddKnownType("DnsClient.Internal.ILoggerFactory,DnsClient", "DnsClient.Internal.ILoggerFactory");
            feature.AddKnownType("DnsClient.Internal.LogLevel,DnsClient", "DnsClient.Internal.LogLevel");
            feature.AddKnownType("DnsClient.Internal.NullLoggerFactory,DnsClient", "DnsClient.Internal.NullLoggerFactory");
            feature.AddKnownType("DnsClient.Internal.NullLoggerFactory+NullLogger,DnsClient", "DnsClient.Internal.NullLogger");
            feature.AddKnownType("DnsClient.Internal.PooledBytes,DnsClient", "DnsClient.Internal.PooledBytes");
            feature.AddKnownType("DnsClient.Internal.StringBuilderObjectPool,DnsClient", "DnsClient.Internal.StringBuilderObjectPool");
            feature.AddKnownType("DnsClient.Internal.IPooledObjectPolicy`1,DnsClient", "DnsClient.Internal.IPooledObjectPolicy`1'1");
            feature.AddKnownType("DnsClient.Internal.DefaultObjectPool`1,DnsClient", "DnsClient.Internal.DefaultObjectPool`1'1");
            feature.AddKnownType("DnsClient.Internal.DefaultObjectPool`1+ObjectWrapper,DnsClient", "DnsClient.Internal.ObjectWrapper'1");
            feature.AddKnownType("DnsClient.Internal.DefaultObjectPoolProvider,DnsClient", "DnsClient.Internal.DefaultObjectPoolProvider");
            feature.AddKnownType("DnsClient.Internal.DefaultPooledObjectPolicy`1,DnsClient", "DnsClient.Internal.DefaultPooledObjectPolicy`1'1");
            feature.AddKnownType("DnsClient.Internal.ObjectPool`1,DnsClient", "DnsClient.Internal.ObjectPool`1'1");
            feature.AddKnownType("DnsClient.Internal.ObjectPoolProvider,DnsClient", "DnsClient.Internal.ObjectPoolProvider");
            feature.AddKnownType("DnsClient.Internal.PooledObjectPolicy`1,DnsClient", "DnsClient.Internal.PooledObjectPolicy`1'1");
            feature.AddKnownType("DnsClient.Internal.StringBuilderPooledObjectPolicy,DnsClient", "DnsClient.Internal.StringBuilderPooledObjectPolicy");
            feature.AddKnownType("DnsClient.Protocol.DnsHeaderFlag,DnsClient", "DnsClient.Protocol.DnsHeaderFlag");
            feature.AddKnownType("DnsClient.Protocol.AaaaRecord,DnsClient", "DnsClient.Protocol.AaaaRecord");
            feature.AddKnownType("DnsClient.Protocol.AddressRecord,DnsClient", "DnsClient.Protocol.AddressRecord");
            feature.AddKnownType("DnsClient.Protocol.AfsDbRecord,DnsClient", "DnsClient.Protocol.AfsDbRecord");
            feature.AddKnownType("DnsClient.Protocol.AfsType,DnsClient", "DnsClient.Protocol.AfsType");
            feature.AddKnownType("DnsClient.Protocol.ARecord,DnsClient", "DnsClient.Protocol.ARecord");
            feature.AddKnownType("DnsClient.Protocol.CaaRecord,DnsClient", "DnsClient.Protocol.CaaRecord");
            feature.AddKnownType("DnsClient.Protocol.CNameRecord,DnsClient", "DnsClient.Protocol.CNameRecord");
            feature.AddKnownType("DnsClient.Protocol.DnsKeyRecord,DnsClient", "DnsClient.Protocol.DnsKeyRecord");
            feature.AddKnownType("DnsClient.Protocol.DnsResourceRecord,DnsClient", "DnsClient.Protocol.DnsResourceRecord");
            feature.AddKnownType("DnsClient.Protocol.ResourceRecordInfo,DnsClient", "DnsClient.Protocol.ResourceRecordInfo");
            feature.AddKnownType("DnsClient.Protocol.DnsSecurityAlgorithm,DnsClient", "DnsClient.Protocol.DnsSecurityAlgorithm");
            feature.AddKnownType("DnsClient.Protocol.DsRecord,DnsClient", "DnsClient.Protocol.DsRecord");
            feature.AddKnownType("DnsClient.Protocol.EmptyRecord,DnsClient", "DnsClient.Protocol.EmptyRecord");
            feature.AddKnownType("DnsClient.Protocol.HInfoRecord,DnsClient", "DnsClient.Protocol.HInfoRecord");
            feature.AddKnownType("DnsClient.Protocol.MbRecord,DnsClient", "DnsClient.Protocol.MbRecord");
            feature.AddKnownType("DnsClient.Protocol.MgRecord,DnsClient", "DnsClient.Protocol.MgRecord");
            feature.AddKnownType("DnsClient.Protocol.MInfoRecord,DnsClient", "DnsClient.Protocol.MInfoRecord");
            feature.AddKnownType("DnsClient.Protocol.MrRecord,DnsClient", "DnsClient.Protocol.MrRecord");
            feature.AddKnownType("DnsClient.Protocol.MxRecord,DnsClient", "DnsClient.Protocol.MxRecord");
            feature.AddKnownType("DnsClient.Protocol.NSecRecord,DnsClient", "DnsClient.Protocol.NSecRecord");
            feature.AddKnownType("DnsClient.Protocol.NsRecord,DnsClient", "DnsClient.Protocol.NsRecord");
            feature.AddKnownType("DnsClient.Protocol.NullRecord,DnsClient", "DnsClient.Protocol.NullRecord");
            feature.AddKnownType("DnsClient.Protocol.PtrRecord,DnsClient", "DnsClient.Protocol.PtrRecord");
            feature.AddKnownType("DnsClient.Protocol.ResourceRecordType,DnsClient", "DnsClient.Protocol.ResourceRecordType");
            feature.AddKnownType("DnsClient.Protocol.RpRecord,DnsClient", "DnsClient.Protocol.RpRecord");
            feature.AddKnownType("DnsClient.Protocol.RRSigRecord,DnsClient", "DnsClient.Protocol.RRSigRecord");
            feature.AddKnownType("DnsClient.Protocol.SoaRecord,DnsClient", "DnsClient.Protocol.SoaRecord");
            feature.AddKnownType("DnsClient.Protocol.SrvRecord,DnsClient", "DnsClient.Protocol.SrvRecord");
            feature.AddKnownType("DnsClient.Protocol.SshfpRecord,DnsClient", "DnsClient.Protocol.SshfpRecord");
            feature.AddKnownType("DnsClient.Protocol.SshfpAlgorithm,DnsClient", "DnsClient.Protocol.SshfpAlgorithm");
            feature.AddKnownType("DnsClient.Protocol.SshfpFingerprintType,DnsClient", "DnsClient.Protocol.SshfpFingerprintType");
            feature.AddKnownType("DnsClient.Protocol.TlsaRecord,DnsClient", "DnsClient.Protocol.TlsaRecord");
            feature.AddKnownType("DnsClient.Protocol.TlsaCertificateUsage,DnsClient", "DnsClient.Protocol.TlsaCertificateUsage");
            feature.AddKnownType("DnsClient.Protocol.TlsaSelector,DnsClient", "DnsClient.Protocol.TlsaSelector");
            feature.AddKnownType("DnsClient.Protocol.TlsaMatchingType,DnsClient", "DnsClient.Protocol.TlsaMatchingType");
            feature.AddKnownType("DnsClient.Protocol.TxtRecord,DnsClient", "DnsClient.Protocol.TxtRecord");
            feature.AddKnownType("DnsClient.Protocol.UnknownRecord,DnsClient", "DnsClient.Protocol.UnknownRecord");
            feature.AddKnownType("DnsClient.Protocol.UriRecord,DnsClient", "DnsClient.Protocol.UriRecord");
            feature.AddKnownType("DnsClient.Protocol.WksRecord,DnsClient", "DnsClient.Protocol.WksRecord");
            feature.AddKnownType("DnsClient.Protocol.Options.OptRecord,DnsClient", "DnsClient.Protocol.Options.OptRecord");
            feature.AddKnownType("DnsClient.Windows.IpHlpApi.FixedNetworkInformation,DnsClient", "DnsClient.Windows.IpHlpApi.FixedNetworkInformation");
            feature.AddKnownType("System.IO.RowConfigReader", "RowConfigReader");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.RuntimeBinderException,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException");
            feature.AddKnownType("Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException,Microsoft.CSharp", "Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.CSharp", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.VisualBasic.Core", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.AppWinStyle,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.AppWinStyle");
            feature.AddKnownType("Microsoft.VisualBasic.CallType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CallType");
            feature.AddKnownType("Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Collection");
            feature.AddKnownType("Microsoft.VisualBasic.ComClassAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ComClassAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompareMethod,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompareMethod");
            feature.AddKnownType("Microsoft.VisualBasic.Constants,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Constants");
            feature.AddKnownType("Microsoft.VisualBasic.ControlChars,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ControlChars");
            feature.AddKnownType("Microsoft.VisualBasic.Conversion,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Conversion");
            feature.AddKnownType("Microsoft.VisualBasic.DateAndTime,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateAndTime");
            feature.AddKnownType("Microsoft.VisualBasic.DateFormat,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateFormat");
            feature.AddKnownType("Microsoft.VisualBasic.DateInterval,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DateInterval");
            feature.AddKnownType("Microsoft.VisualBasic.DueDate,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.DueDate");
            feature.AddKnownType("Microsoft.VisualBasic.ErrObject,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.ErrObject");
            feature.AddKnownType("Microsoft.VisualBasic.FileAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.FileSystem,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileSystem");
            feature.AddKnownType("Microsoft.VisualBasic.Financial,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Financial");
            feature.AddKnownType("Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FirstDayOfWeek");
            feature.AddKnownType("Microsoft.VisualBasic.FirstWeekOfYear,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FirstWeekOfYear");
            feature.AddKnownType("Microsoft.VisualBasic.HideModuleNameAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.HideModuleNameAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.Information,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Information");
            feature.AddKnownType("Microsoft.VisualBasic.Interaction,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Interaction");
            feature.AddKnownType("Microsoft.VisualBasic.MsgBoxResult,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MsgBoxResult");
            feature.AddKnownType("Microsoft.VisualBasic.MsgBoxStyle,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MsgBoxStyle");
            feature.AddKnownType("Microsoft.VisualBasic.MyGroupCollectionAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.MyGroupCollectionAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenAccess");
            feature.AddKnownType("Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenMode");
            feature.AddKnownType("Microsoft.VisualBasic.OpenShare,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.OpenShare");
            feature.AddKnownType("Microsoft.VisualBasic.SpcInfo,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.SpcInfo");
            feature.AddKnownType("Microsoft.VisualBasic.Strings,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.Strings");
            feature.AddKnownType("Microsoft.VisualBasic.TabInfo,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.TabInfo");
            feature.AddKnownType("Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.TriState");
            feature.AddKnownType("Microsoft.VisualBasic.VariantType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VariantType");
            feature.AddKnownType("Microsoft.VisualBasic.VBFixedArrayAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBFixedArrayAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.VBFixedStringAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBFixedStringAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.VBMath,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VBMath");
            feature.AddKnownType("Microsoft.VisualBasic.VbStrConv,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.VbStrConv");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.BooleanType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.BooleanType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ByteType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ByteType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.CharArrayType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.CharArrayType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.CharType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.CharType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Conversions,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Conversions");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DateType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DateType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DecimalType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DecimalType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.DoubleType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.DoubleType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.IncompleteInitialization,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.IncompleteInitialization");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.IntegerType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.IntegerType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LateBinding,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LateBinding");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LikeOperator,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LikeOperator");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.LongType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.LongType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.NewLateBinding,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.NewLateBinding");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectFlowControl,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ObjectFlowControl");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ObjectType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ObjectType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Operators,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Operators");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.OptionTextAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.OptionTextAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ProjectData,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ProjectData");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.ShortType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.ShortType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.SingleType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.SingleType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.StringType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.StringType");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Utils,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Utils");
            feature.AddKnownType("Microsoft.VisualBasic.CompilerServices.Versioned,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.CompilerServices.Versioned");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.DeleteDirectoryOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.FieldType,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.FieldType");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.FileSystem,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.FileSystem");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.MalformedLineException,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.MalformedLineException");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.RecycleOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.SearchOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.SearchOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.SpecialDirectories,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.SpecialDirectories");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.TextFieldParser,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.TextFieldParser");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.UICancelOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.UICancelOption");
            feature.AddKnownType("Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.Core", "Microsoft.VisualBasic.FileIO.UIOption");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,Microsoft.Win32.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.Win32Exception", "Win32Exception");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("MongoDB.Bson.BsonException,MongoDB.Bson", "MongoDB.Bson.BsonException");
            feature.AddKnownType("MongoDB.Bson.BsonInternalException,MongoDB.Bson", "MongoDB.Bson.BsonInternalException");
            feature.AddKnownType("MongoDB.Bson.BsonSerializationException,MongoDB.Bson", "MongoDB.Bson.BsonSerializationException");
            feature.AddKnownType("MongoDB.Bson.DuplicateBsonMemberMapAttributeException,MongoDB.Bson", "MongoDB.Bson.DuplicateBsonMemberMapAttributeException");
            feature.AddKnownType("MongoDB.Bson.TruncationException,MongoDB.Bson", "MongoDB.Bson.TruncationException");
            feature.AddKnownType("MongoDB.Bson.BsonArray,MongoDB.Bson", "MongoDB.Bson.BsonArray");
            feature.AddKnownType("MongoDB.Bson.BsonBinaryData,MongoDB.Bson", "MongoDB.Bson.BsonBinaryData");
            feature.AddKnownType("MongoDB.Bson.BsonBinarySubType,MongoDB.Bson", "MongoDB.Bson.BsonBinarySubType");
            feature.AddKnownType("MongoDB.Bson.BsonBoolean,MongoDB.Bson", "MongoDB.Bson.BsonBoolean");
            feature.AddKnownType("MongoDB.Bson.BsonDateTime,MongoDB.Bson", "MongoDB.Bson.BsonDateTime");
            feature.AddKnownType("MongoDB.Bson.BsonDecimal128,MongoDB.Bson", "MongoDB.Bson.BsonDecimal128");
            feature.AddKnownType("MongoDB.Bson.BsonDocument,MongoDB.Bson", "MongoDB.Bson.BsonDocument");
            feature.AddKnownType("MongoDB.Bson.BsonDocumentWrapper,MongoDB.Bson", "MongoDB.Bson.BsonDocumentWrapper");
            feature.AddKnownType("MongoDB.Bson.BsonDouble,MongoDB.Bson", "MongoDB.Bson.BsonDouble");
            feature.AddKnownType("MongoDB.Bson.BsonElement,MongoDB.Bson", "MongoDB.Bson.BsonElement");
            feature.AddKnownType("MongoDB.Bson.BsonInt32,MongoDB.Bson", "MongoDB.Bson.BsonInt32");
            feature.AddKnownType("MongoDB.Bson.BsonInt64,MongoDB.Bson", "MongoDB.Bson.BsonInt64");
            feature.AddKnownType("MongoDB.Bson.BsonJavaScript,MongoDB.Bson", "MongoDB.Bson.BsonJavaScript");
            feature.AddKnownType("MongoDB.Bson.BsonJavaScriptWithScope,MongoDB.Bson", "MongoDB.Bson.BsonJavaScriptWithScope");
            feature.AddKnownType("MongoDB.Bson.BsonMaxKey,MongoDB.Bson", "MongoDB.Bson.BsonMaxKey");
            feature.AddKnownType("MongoDB.Bson.BsonMinKey,MongoDB.Bson", "MongoDB.Bson.BsonMinKey");
            feature.AddKnownType("MongoDB.Bson.BsonNull,MongoDB.Bson", "MongoDB.Bson.BsonNull");
            feature.AddKnownType("MongoDB.Bson.BsonObjectId,MongoDB.Bson", "MongoDB.Bson.BsonObjectId");
            feature.AddKnownType("MongoDB.Bson.BsonRegularExpression,MongoDB.Bson", "MongoDB.Bson.BsonRegularExpression");
            feature.AddKnownType("MongoDB.Bson.BsonString,MongoDB.Bson", "MongoDB.Bson.BsonString");
            feature.AddKnownType("MongoDB.Bson.BsonSymbol,MongoDB.Bson", "MongoDB.Bson.BsonSymbol");
            feature.AddKnownType("MongoDB.Bson.BsonTimestamp,MongoDB.Bson", "MongoDB.Bson.BsonTimestamp");
            feature.AddKnownType("MongoDB.Bson.BsonType,MongoDB.Bson", "MongoDB.Bson.BsonType");
            feature.AddKnownType("MongoDB.Bson.BsonTypeMapper+Conversion,MongoDB.Bson", "MongoDB.Bson.Conversion");
            feature.AddKnownType("MongoDB.Bson.BsonTypeMapper+Mapping,MongoDB.Bson", "MongoDB.Bson.Mapping");
            feature.AddKnownType("MongoDB.Bson.DuplicateNameHandling,MongoDB.Bson", "MongoDB.Bson.DuplicateNameHandling");
            feature.AddKnownType("MongoDB.Bson.BsonTypeMapperOptions,MongoDB.Bson", "MongoDB.Bson.BsonTypeMapperOptions");
            feature.AddKnownType("MongoDB.Bson.BsonUndefined,MongoDB.Bson", "MongoDB.Bson.BsonUndefined");
            feature.AddKnownType("MongoDB.Bson.BsonValue,MongoDB.Bson", "MongoDB.Bson.BsonValue");
            feature.AddKnownType("MongoDB.Bson.Decimal128,MongoDB.Bson", "MongoDB.Bson.Decimal128");
            feature.AddKnownType("MongoDB.Bson.Decimal128+Decimal128Comparer,MongoDB.Bson", "MongoDB.Bson.Decimal128Comparer");
            feature.AddKnownType("MongoDB.Bson.Decimal128+Decimal128Comparer+Decimal128Type,MongoDB.Bson", "MongoDB.Bson.Decimal128Type");
            feature.AddKnownType("MongoDB.Bson.Decimal128+Decimal128Comparer+NumberClass,MongoDB.Bson", "MongoDB.Bson.NumberClass");
            feature.AddKnownType("MongoDB.Bson.GuidRepresentation,MongoDB.Bson", "MongoDB.Bson.GuidRepresentation");
            feature.AddKnownType("MongoDB.Bson.GuidRepresentationMode,MongoDB.Bson", "MongoDB.Bson.GuidRepresentationMode");
            feature.AddKnownType("MongoDB.Bson.IConvertibleToBsonDocument,MongoDB.Bson", "MongoDB.Bson.IConvertibleToBsonDocument");
            feature.AddKnownType("MongoDB.Bson.ICustomBsonTypeMapper,MongoDB.Bson", "MongoDB.Bson.ICustomBsonTypeMapper");
            feature.AddKnownType("MongoDB.Bson.LazyBsonArray,MongoDB.Bson", "MongoDB.Bson.LazyBsonArray");
            feature.AddKnownType("MongoDB.Bson.LazyBsonDocument,MongoDB.Bson", "MongoDB.Bson.LazyBsonDocument");
            feature.AddKnownType("MongoDB.Bson.MaterializedOnDemandBsonArray,MongoDB.Bson", "MongoDB.Bson.MaterializedOnDemandBsonArray");
            feature.AddKnownType("MongoDB.Bson.MaterializedOnDemandBsonArray+MaterializedOnDemandBsonArraySerializer,MongoDB.Bson", "MongoDB.Bson.MaterializedOnDemandBsonArraySerializer");
            feature.AddKnownType("MongoDB.Bson.MaterializedOnDemandBsonDocument,MongoDB.Bson", "MongoDB.Bson.MaterializedOnDemandBsonDocument");
            feature.AddKnownType("MongoDB.Bson.MaterializedOnDemandBsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.MaterializedOnDemandBsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.ObjectId,MongoDB.Bson", "MongoDB.Bson.ObjectId");
            feature.AddKnownType("MongoDB.Bson.RawBsonArray,MongoDB.Bson", "MongoDB.Bson.RawBsonArray");
            feature.AddKnownType("MongoDB.Bson.RawBsonDocument,MongoDB.Bson", "MongoDB.Bson.RawBsonDocument");
            feature.AddKnownType("MongoDB.Bson.UInt128,MongoDB.Bson", "MongoDB.Bson.UInt128");
            feature.AddKnownType("MongoDB.Bson.PreserveAttribute,MongoDB.Bson", "MongoDB.Bson.PreserveAttribute");
            feature.AddKnownType("MongoDB.Bson.IO.IArrayElementNameAccelerator,MongoDB.Bson", "MongoDB.Bson.IO.IArrayElementNameAccelerator");
            feature.AddKnownType("MongoDB.Bson.IO.ArrayElementNameAccelerator,MongoDB.Bson", "MongoDB.Bson.IO.ArrayElementNameAccelerator");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryReader,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryReader");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryReaderBookmark,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryReaderBookmark");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryReaderContext,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryReaderContext");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryReaderSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryReaderSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryWriter,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryWriter");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryWriterContext,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryWriterContext");
            feature.AddKnownType("MongoDB.Bson.IO.BsonBinaryWriterSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonBinaryWriterSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonChunkPool,MongoDB.Bson", "MongoDB.Bson.IO.BsonChunkPool");
            feature.AddKnownType("MongoDB.Bson.IO.BsonChunkPool+DisposableChunk,MongoDB.Bson", "MongoDB.Bson.IO.DisposableChunk");
            feature.AddKnownType("MongoDB.Bson.IO.BsonChunkPool+ReferenceCountedChunk,MongoDB.Bson", "MongoDB.Bson.IO.ReferenceCountedChunk");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentReader,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentReader");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentReaderBookmark,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentReaderBookmark");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentReaderContext,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentReaderContext");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentReaderSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentReaderSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentWriter,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentWriter");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentWriterContext,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentWriterContext");
            feature.AddKnownType("MongoDB.Bson.IO.BsonDocumentWriterSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonDocumentWriterSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonReader,MongoDB.Bson", "MongoDB.Bson.IO.BsonReader");
            feature.AddKnownType("MongoDB.Bson.IO.BsonReaderBookmark,MongoDB.Bson", "MongoDB.Bson.IO.BsonReaderBookmark");
            feature.AddKnownType("MongoDB.Bson.IO.BsonReaderSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonReaderSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonReaderState,MongoDB.Bson", "MongoDB.Bson.IO.BsonReaderState");
            feature.AddKnownType("MongoDB.Bson.IO.BsonStream,MongoDB.Bson", "MongoDB.Bson.IO.BsonStream");
            feature.AddKnownType("MongoDB.Bson.IO.BsonStreamAdapter,MongoDB.Bson", "MongoDB.Bson.IO.BsonStreamAdapter");
            feature.AddKnownType("MongoDB.Bson.IO.BsonTrie`1,MongoDB.Bson", "MongoDB.Bson.IO.BsonTrie`1'1");
            feature.AddKnownType("MongoDB.Bson.IO.BsonTrieNode`1,MongoDB.Bson", "MongoDB.Bson.IO.BsonTrieNode`1'1");
            feature.AddKnownType("MongoDB.Bson.IO.BsonWriter,MongoDB.Bson", "MongoDB.Bson.IO.BsonWriter");
            feature.AddKnownType("MongoDB.Bson.IO.BsonWriterSettings,MongoDB.Bson", "MongoDB.Bson.IO.BsonWriterSettings");
            feature.AddKnownType("MongoDB.Bson.IO.BsonWriterState,MongoDB.Bson", "MongoDB.Bson.IO.BsonWriterState");
            feature.AddKnownType("MongoDB.Bson.IO.ByteArrayBuffer,MongoDB.Bson", "MongoDB.Bson.IO.ByteArrayBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.ByteArrayChunk,MongoDB.Bson", "MongoDB.Bson.IO.ByteArrayChunk");
            feature.AddKnownType("MongoDB.Bson.IO.ByteBufferSlice,MongoDB.Bson", "MongoDB.Bson.IO.ByteBufferSlice");
            feature.AddKnownType("MongoDB.Bson.IO.ByteBufferStream,MongoDB.Bson", "MongoDB.Bson.IO.ByteBufferStream");
            feature.AddKnownType("MongoDB.Bson.IO.ContextType,MongoDB.Bson", "MongoDB.Bson.IO.ContextType");
            feature.AddKnownType("MongoDB.Bson.IO.ElementAppendingBsonWriter,MongoDB.Bson", "MongoDB.Bson.IO.ElementAppendingBsonWriter");
            feature.AddKnownType("MongoDB.Bson.IO.EncodingHelper+DisposableSegment,MongoDB.Bson", "MongoDB.Bson.IO.MongoDB.Bson.IO.EncodingHelper.DisposableSegment");
            feature.AddKnownType("MongoDB.Bson.IO.IBsonChunk,MongoDB.Bson", "MongoDB.Bson.IO.IBsonChunk");
            feature.AddKnownType("MongoDB.Bson.IO.IBsonChunkSource,MongoDB.Bson", "MongoDB.Bson.IO.IBsonChunkSource");
            feature.AddKnownType("MongoDB.Bson.IO.IBsonReader,MongoDB.Bson", "MongoDB.Bson.IO.IBsonReader");
            feature.AddKnownType("MongoDB.Bson.IO.IBsonWriter,MongoDB.Bson", "MongoDB.Bson.IO.IBsonWriter");
            feature.AddKnownType("MongoDB.Bson.IO.IByteBuffer,MongoDB.Bson", "MongoDB.Bson.IO.IByteBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.IElementNameValidator,MongoDB.Bson", "MongoDB.Bson.IO.IElementNameValidator");
            feature.AddKnownType("MongoDB.Bson.IO.INameDecoder,MongoDB.Bson", "MongoDB.Bson.IO.INameDecoder");
            feature.AddKnownType("MongoDB.Bson.IO.InputBufferChunkSource,MongoDB.Bson", "MongoDB.Bson.IO.InputBufferChunkSource");
            feature.AddKnownType("MongoDB.Bson.IO.IStreamEfficientCopyTo,MongoDB.Bson", "MongoDB.Bson.IO.IStreamEfficientCopyTo");
            feature.AddKnownType("MongoDB.Bson.IO.JsonBuffer,MongoDB.Bson", "MongoDB.Bson.IO.JsonBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.JsonOutputMode,MongoDB.Bson", "MongoDB.Bson.IO.JsonOutputMode");
            feature.AddKnownType("MongoDB.Bson.IO.JsonReader,MongoDB.Bson", "MongoDB.Bson.IO.JsonReader");
            feature.AddKnownType("MongoDB.Bson.IO.JsonReaderBookmark,MongoDB.Bson", "MongoDB.Bson.IO.JsonReaderBookmark");
            feature.AddKnownType("MongoDB.Bson.IO.JsonReaderContext,MongoDB.Bson", "MongoDB.Bson.IO.JsonReaderContext");
            feature.AddKnownType("MongoDB.Bson.IO.JsonReaderSettings,MongoDB.Bson", "MongoDB.Bson.IO.JsonReaderSettings");
            feature.AddKnownType("MongoDB.Bson.IO.JsonScanner+NumberState,MongoDB.Bson", "MongoDB.Bson.IO.NumberState");
            feature.AddKnownType("MongoDB.Bson.IO.JsonScanner+RegularExpressionState,MongoDB.Bson", "MongoDB.Bson.IO.RegularExpressionState");
            feature.AddKnownType("MongoDB.Bson.IO.JsonTokenType,MongoDB.Bson", "MongoDB.Bson.IO.JsonTokenType");
            feature.AddKnownType("MongoDB.Bson.IO.JsonToken,MongoDB.Bson", "MongoDB.Bson.IO.JsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.DateTimeJsonToken,MongoDB.Bson", "MongoDB.Bson.IO.DateTimeJsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.DoubleJsonToken,MongoDB.Bson", "MongoDB.Bson.IO.DoubleJsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.Int32JsonToken,MongoDB.Bson", "MongoDB.Bson.IO.Int32JsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.Int64JsonToken,MongoDB.Bson", "MongoDB.Bson.IO.Int64JsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.ObjectIdJsonToken,MongoDB.Bson", "MongoDB.Bson.IO.ObjectIdJsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.RegularExpressionJsonToken,MongoDB.Bson", "MongoDB.Bson.IO.RegularExpressionJsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.StringJsonToken,MongoDB.Bson", "MongoDB.Bson.IO.StringJsonToken");
            feature.AddKnownType("MongoDB.Bson.IO.JsonWriter,MongoDB.Bson", "MongoDB.Bson.IO.JsonWriter");
            feature.AddKnownType("MongoDB.Bson.IO.JsonWriterContext,MongoDB.Bson", "MongoDB.Bson.IO.JsonWriterContext");
            feature.AddKnownType("MongoDB.Bson.IO.JsonWriterSettings,MongoDB.Bson", "MongoDB.Bson.IO.JsonWriterSettings");
            feature.AddKnownType("MongoDB.Bson.IO.MultiChunkBuffer,MongoDB.Bson", "MongoDB.Bson.IO.MultiChunkBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.NoOpElementNameValidator,MongoDB.Bson", "MongoDB.Bson.IO.NoOpElementNameValidator");
            feature.AddKnownType("MongoDB.Bson.IO.OutputBufferChunkSource,MongoDB.Bson", "MongoDB.Bson.IO.OutputBufferChunkSource");
            feature.AddKnownType("MongoDB.Bson.IO.SingleChunkBuffer,MongoDB.Bson", "MongoDB.Bson.IO.SingleChunkBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.ThreadStaticBuffer+RentedBuffer,MongoDB.Bson", "MongoDB.Bson.IO.MongoDB.Bson.IO.ThreadStaticBuffer.RentedBuffer");
            feature.AddKnownType("MongoDB.Bson.IO.TrieNameDecoder`1,MongoDB.Bson", "MongoDB.Bson.IO.TrieNameDecoder`1'1");
            feature.AddKnownType("MongoDB.Bson.IO.Utf8NameDecoder,MongoDB.Bson", "MongoDB.Bson.IO.Utf8NameDecoder");
            feature.AddKnownType("MongoDB.Bson.IO.WrappingBsonWriter,MongoDB.Bson", "MongoDB.Bson.IO.WrappingBsonWriter");
            feature.AddKnownType("MongoDB.Bson.Serialization.AttributedSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.AttributedSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonMemberMapAttributeUsageAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonMemberMapAttributeUsageAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonClassMapAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonClassMapAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonCreatorMapAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonCreatorMapAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonMemberMapAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonMemberMapAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonPostProcessingAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonPostProcessingAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonClassMap,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonClassMap");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonClassMap`1,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonClassMap`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonClassMapSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonClassMapSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonCreatorMap,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonCreatorMap");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonDeserializationArgs,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonDeserializationArgs");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonDeserializationContext");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonDeserializationContext+Builder,MongoDB.Bson", "MongoDB.Bson.Serialization.MongoDB.Bson.Serialization.BsonDeserializationContext.Builder");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonDocumentBackedClass,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonDocumentBackedClass");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonMemberMap,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonMemberMap");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonObjectModelSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonObjectModelSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializationArgs,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonSerializationArgs");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonSerializationContext");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializationContext+Builder,MongoDB.Bson", "MongoDB.Bson.Serialization.MongoDB.Bson.Serialization.BsonSerializationContext.Builder");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializationInfo,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonSerializationInfo");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializationProviderBase,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonSerializationProviderBase");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonSerializerRegistry,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonSerializerRegistry");
            feature.AddKnownType("MongoDB.Bson.Serialization.CollectionsSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.CollectionsSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.CreatorMapDelegateCompiler,MongoDB.Bson", "MongoDB.Bson.Serialization.CreatorMapDelegateCompiler");
            feature.AddKnownType("MongoDB.Bson.Serialization.DiscriminatedInterfaceSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.DiscriminatedInterfaceSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.ExpressionVisitor,MongoDB.Bson", "MongoDB.Bson.Serialization.ExpressionVisitor");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonDictionarySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonDictionarySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonIdProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonIdProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonPolymorphicSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonPolymorphicSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.IRegistryAwareBsonSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.IRegistryAwareBsonSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.IBsonSerializerRegistry,MongoDB.Bson", "MongoDB.Bson.Serialization.IBsonSerializerRegistry");
            feature.AddKnownType("MongoDB.Bson.Serialization.IChildSerializerConfigurable,MongoDB.Bson", "MongoDB.Bson.Serialization.IChildSerializerConfigurable");
            feature.AddKnownType("MongoDB.Bson.Serialization.ICreatorSelector,MongoDB.Bson", "MongoDB.Bson.Serialization.ICreatorSelector");
            feature.AddKnownType("MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable,MongoDB.Bson", "MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable");
            feature.AddKnownType("MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable`1,MongoDB.Bson", "MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.IIdGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IIdGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IRepresentationConfigurable,MongoDB.Bson", "MongoDB.Bson.Serialization.IRepresentationConfigurable");
            feature.AddKnownType("MongoDB.Bson.Serialization.IRepresentationConfigurable`1,MongoDB.Bson", "MongoDB.Bson.Serialization.IRepresentationConfigurable`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.IRepresentationConverterConfigurable,MongoDB.Bson", "MongoDB.Bson.Serialization.IRepresentationConverterConfigurable");
            feature.AddKnownType("MongoDB.Bson.Serialization.IRepresentationConverterConfigurable`1,MongoDB.Bson", "MongoDB.Bson.Serialization.IRepresentationConverterConfigurable`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.MostArgumentsCreatorSelector,MongoDB.Bson", "MongoDB.Bson.Serialization.MostArgumentsCreatorSelector");
            feature.AddKnownType("MongoDB.Bson.Serialization.MostArgumentsCreatorSelector+MatchData,MongoDB.Bson", "MongoDB.Bson.Serialization.MatchData");
            feature.AddKnownType("MongoDB.Bson.Serialization.PrimitiveSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.PrimitiveSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonClassMapSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonClassMapSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.BsonDocumentBackedClassSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.BsonDocumentBackedClassSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.TypeMappingSerializationProvider,MongoDB.Bson", "MongoDB.Bson.Serialization.TypeMappingSerializationProvider");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonConstructorAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonConstructorAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonDateTimeOptionsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonDateTimeOptionsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonDefaultValueAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonDefaultValueAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonDictionaryOptionsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonDictionaryOptionsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonElementAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonElementAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonExtraElementsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonExtraElementsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonFactoryMethodAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonFactoryMethodAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonGuidRepresentationAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonGuidRepresentationAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonIdAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonIdAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonIgnoreExtraElementsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonIgnoreExtraElementsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfDefaultAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfDefaultAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfNullAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfNullAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonKnownTypesAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonKnownTypesAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonNoIdAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonNoIdAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonRequiredAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonRequiredAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonSerializationOptionsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonSerializationOptionsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Attributes.BsonTimeSpanOptionsAttribute,MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes.BsonTimeSpanOptionsAttribute");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.AttributeConventionPack,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.AttributeConventionPack");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.AttributeConventionPack+AttributeConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.AttributeConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.CamelCaseElementNameConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.CamelCaseElementNameConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ConventionBase,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ConventionBase");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ConventionPack,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ConventionPack");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ConventionRegistry+ConventionPackContainer,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ConventionPackContainer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ConventionRunner,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ConventionRunner");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.DefaultConventionPack,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.DefaultConventionPack");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.DelegateClassMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.DelegateClassMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.DelegateMemberMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.DelegateMemberMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.DelegatePostProcessingConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.DelegatePostProcessingConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.EnumRepresentationConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.EnumRepresentationConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.HierarchicalDiscriminatorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.HierarchicalDiscriminatorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IClassMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IClassMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IConventionPack,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IConventionPack");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ICreatorMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ICreatorMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IgnoreExtraElementsConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IgnoreExtraElementsConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IgnoreIfDefaultConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IgnoreIfDefaultConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IgnoreIfNullConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IgnoreIfNullConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IMemberMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IMemberMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ImmutableTypeClassMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ImmutableTypeClassMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.IPostProcessingConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.IPostProcessingConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.LookupIdGeneratorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.LookupIdGeneratorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.MemberDefaultValueConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.MemberDefaultValueConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.MemberNameElementNameConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.MemberNameElementNameConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.NamedExtraElementsMemberConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.NamedExtraElementsMemberConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.NamedIdMemberConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.NamedIdMemberConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.NamedParameterCreatorMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.NamedParameterCreatorMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.NoIdMemberConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.NoIdMemberConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ResetClassMapConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ResetClassMapConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ResetMemberMapsConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ResetMemberMapsConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.ScalarDiscriminatorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.ScalarDiscriminatorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.StringIdStoredAsObjectIdConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.StringIdStoredAsObjectIdConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.Conventions.StringObjectIdIdGeneratorConvention,MongoDB.Bson", "MongoDB.Bson.Serialization.Conventions.StringObjectIdIdGeneratorConvention");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.AscendingGuidGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.AscendingGuidGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.BsonBinaryDataGuidGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.BsonBinaryDataGuidGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.BsonObjectIdGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.BsonObjectIdGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.CombGuidGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.CombGuidGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.GuidGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.GuidGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.NullIdChecker,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.NullIdChecker");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.StringObjectIdGenerator,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.StringObjectIdGenerator");
            feature.AddKnownType("MongoDB.Bson.Serialization.IdGenerators.ZeroIdChecker`1,MongoDB.Bson", "MongoDB.Bson.Serialization.IdGenerators.ZeroIdChecker`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Options.DictionaryRepresentation,MongoDB.Bson", "MongoDB.Bson.Serialization.Options.DictionaryRepresentation");
            feature.AddKnownType("MongoDB.Bson.Serialization.Options.RepresentationConverter,MongoDB.Bson", "MongoDB.Bson.Serialization.Options.RepresentationConverter");
            feature.AddKnownType("MongoDB.Bson.Serialization.Options.TimeSpanUnits,MongoDB.Bson", "MongoDB.Bson.Serialization.Options.TimeSpanUnits");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.AbstractClassSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.AbstractClassSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ArraySerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ArraySerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BitArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BitArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BooleanSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BooleanSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonBinaryDataSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonBinaryDataSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonBooleanSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonBooleanSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonDateTimeSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonDateTimeSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonDecimal128Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonDecimal128Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonDocumentWrapperSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonDocumentWrapperSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonDoubleSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonDoubleSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonInt32Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonInt32Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonInt64Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonInt64Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonJavaScriptSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonJavaScriptSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonJavaScriptWithScopeSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonJavaScriptWithScopeSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonMaxKeySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonMaxKeySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonMinKeySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonMinKeySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonNullSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonNullSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonObjectIdSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonObjectIdSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonRegularExpressionSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonRegularExpressionSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonStringSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonStringSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonSymbolSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonSymbolSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonTimestampSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonTimestampSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonUndefinedSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonUndefinedSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArrayAndDocumentSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArrayAndDocumentSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArraySerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArraySerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullDocumentSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullDocumentSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ByteArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ByteArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ByteSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ByteSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.CharSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.CharSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ClassSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ClassSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.CultureInfoSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.CultureInfoSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DateTimeOffsetSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DateTimeOffsetSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DateTimeSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DateTimeSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.Decimal128Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.Decimal128Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DecimalSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DecimalSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`3,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`3'3");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`3,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`3'3");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DiscriminatedInterfaceSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DiscriminatedInterfaceSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DiscriminatedWrapperSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DiscriminatedWrapperSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DoubleSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DoubleSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.DynamicDocumentBaseSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.DynamicDocumentBaseSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ElementAppendingSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ElementAppendingSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.EnumSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.EnumSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ExpandoObjectSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ExpandoObjectSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.GuidSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.GuidSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ImpliedImplementationInterfaceSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ImpliedImplementationInterfaceSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.Int16Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.Int16Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.Int32Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.Int32Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.Int64Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.Int64Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.IPAddressSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.IPAddressSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.IPEndPointSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.IPEndPointSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.KeyValuePairSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.KeyValuePairSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.LazyBsonArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.LazyBsonArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.LazyBsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.LazyBsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.NullableSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.NullableSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ObjectIdSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ObjectIdSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ObjectSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ObjectSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.PartiallyRawBsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.PartiallyRawBsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ProjectingDeserializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ProjectingDeserializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.QueueSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.QueueSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.QueueSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.QueueSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.RawBsonArraySerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.RawBsonArraySerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.RawBsonDocumentSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.RawBsonDocumentSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSubclassSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSubclassSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ReadOnlyDictionaryInterfaceImplementerSerializer`3,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ReadOnlyDictionaryInterfaceImplementerSerializer`3'3");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SByteSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SByteSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SerializeAsNominalTypeSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SerializeAsNominalTypeSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SerializerHelper,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SerializerHelper");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SerializerHelper+Member,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.MongoDB.Bson.Serialization.Serializers.SerializerHelper.Member");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.SingleSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.SingleSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.StackSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.StackSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.StackSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.StackSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.StringSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.StringSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.StructSerializerBase`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.StructSerializerBase`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.ThreeDimensionalArraySerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.ThreeDimensionalArraySerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TimeSpanSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TimeSpanSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`2,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`2'2");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`3,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`3'3");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`4,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`4'4");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`5,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`5'5");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`6,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`6'6");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`7,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`7'7");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TupleSerializer`8,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TupleSerializer`8'8");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.TwoDimensionalArraySerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.TwoDimensionalArraySerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.UInt16Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.UInt16Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.UInt32Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.UInt32Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.UInt64Serializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.UInt64Serializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1'1");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.UriSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.UriSerializer");
            feature.AddKnownType("MongoDB.Bson.Serialization.Serializers.VersionSerializer,MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers.VersionSerializer");
            feature.AddKnownType("MongoDB.Shared.Hasher,MongoDB.Bson", "MongoDB.Shared.Hasher");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,MongoDB.Driver.Core", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("MongoDB.Driver.BatchTransformingAsyncCursor`2,MongoDB.Driver.Core", "MongoDB.Driver.BatchTransformingAsyncCursor`2'2");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamDocument`1,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamDocument`1'1");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamDocumentCollectionNamespaceSerializer,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamDocumentCollectionNamespaceSerializer");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamDocumentSerializer`1,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamDocumentSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamFullDocumentOption,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamFullDocumentOption");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamOperationType,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamOperationType");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamOperationTypeSerializer,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamOperationTypeSerializer");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamUpdateDescription,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamUpdateDescription");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamUpdateDescriptionSerializer,MongoDB.Driver.Core", "MongoDB.Driver.ChangeStreamUpdateDescriptionSerializer");
            feature.AddKnownType("MongoDB.Driver.CollationAlternate,MongoDB.Driver.Core", "MongoDB.Driver.CollationAlternate");
            feature.AddKnownType("MongoDB.Driver.CollationCaseFirst,MongoDB.Driver.Core", "MongoDB.Driver.CollationCaseFirst");
            feature.AddKnownType("MongoDB.Driver.CollationMaxVariable,MongoDB.Driver.Core", "MongoDB.Driver.CollationMaxVariable");
            feature.AddKnownType("MongoDB.Driver.CollationStrength,MongoDB.Driver.Core", "MongoDB.Driver.CollationStrength");
            feature.AddKnownType("MongoDB.Driver.Collation,MongoDB.Driver.Core", "MongoDB.Driver.Collation");
            feature.AddKnownType("MongoDB.Driver.CollectionNamespace,MongoDB.Driver.Core", "MongoDB.Driver.CollectionNamespace");
            feature.AddKnownType("MongoDB.Driver.CoreServerSession,MongoDB.Driver.Core", "MongoDB.Driver.CoreServerSession");
            feature.AddKnownType("MongoDB.Driver.CoreServerSessionPool,MongoDB.Driver.Core", "MongoDB.Driver.CoreServerSessionPool");
            feature.AddKnownType("MongoDB.Driver.CoreServerSessionPool+ReleaseOnDisposeCoreServerSession,MongoDB.Driver.Core", "MongoDB.Driver.ReleaseOnDisposeCoreServerSession");
            feature.AddKnownType("MongoDB.Driver.ICoreServerSessionPool,MongoDB.Driver.Core", "MongoDB.Driver.ICoreServerSessionPool");
            feature.AddKnownType("MongoDB.Driver.ICoreServerSession,MongoDB.Driver.Core", "MongoDB.Driver.ICoreServerSession");
            feature.AddKnownType("MongoDB.Driver.WrappingCoreServerSession,MongoDB.Driver.Core", "MongoDB.Driver.WrappingCoreServerSession");
            feature.AddKnownType("MongoDB.Driver.CreateIndexCommitQuorum,MongoDB.Driver.Core", "MongoDB.Driver.CreateIndexCommitQuorum");
            feature.AddKnownType("MongoDB.Driver.CreateIndexCommitQuorumWithMode,MongoDB.Driver.Core", "MongoDB.Driver.CreateIndexCommitQuorumWithMode");
            feature.AddKnownType("MongoDB.Driver.CreateIndexCommitQuorumWithW,MongoDB.Driver.Core", "MongoDB.Driver.CreateIndexCommitQuorumWithW");
            feature.AddKnownType("MongoDB.Driver.DatabaseNamespace,MongoDB.Driver.Core", "MongoDB.Driver.DatabaseNamespace");
            feature.AddKnownType("MongoDB.Driver.DeferredAsyncCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.DeferredAsyncCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.DocumentValidationAction,MongoDB.Driver.Core", "MongoDB.Driver.DocumentValidationAction");
            feature.AddKnownType("MongoDB.Driver.DocumentValidationLevel,MongoDB.Driver.Core", "MongoDB.Driver.DocumentValidationLevel");
            feature.AddKnownType("MongoDB.Driver.IAsyncCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.IAsyncCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.IChangeStreamCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.IChangeStreamCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.ICursorBatchInfo,MongoDB.Driver.Core", "MongoDB.Driver.ICursorBatchInfo");
            feature.AddKnownType("MongoDB.Driver.IAsyncCursorSource`1,MongoDB.Driver.Core", "MongoDB.Driver.IAsyncCursorSource`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoAuthenticationException,MongoDB.Driver.Core", "MongoDB.Driver.MongoAuthenticationException");
            feature.AddKnownType("MongoDB.Driver.MongoClientException,MongoDB.Driver.Core", "MongoDB.Driver.MongoClientException");
            feature.AddKnownType("MongoDB.Driver.MongoCommandException,MongoDB.Driver.Core", "MongoDB.Driver.MongoCommandException");
            feature.AddKnownType("MongoDB.Driver.MongoConfigurationException,MongoDB.Driver.Core", "MongoDB.Driver.MongoConfigurationException");
            feature.AddKnownType("MongoDB.Driver.MongoConnectionClosedException,MongoDB.Driver.Core", "MongoDB.Driver.MongoConnectionClosedException");
            feature.AddKnownType("MongoDB.Driver.MongoConnectionException,MongoDB.Driver.Core", "MongoDB.Driver.MongoConnectionException");
            feature.AddKnownType("MongoDB.Driver.MongoCursorNotFoundException,MongoDB.Driver.Core", "MongoDB.Driver.MongoCursorNotFoundException");
            feature.AddKnownType("MongoDB.Driver.MongoDuplicateKeyException,MongoDB.Driver.Core", "MongoDB.Driver.MongoDuplicateKeyException");
            feature.AddKnownType("MongoDB.Driver.MongoException,MongoDB.Driver.Core", "MongoDB.Driver.MongoException");
            feature.AddKnownType("MongoDB.Driver.MongoExecutionTimeoutException,MongoDB.Driver.Core", "MongoDB.Driver.MongoExecutionTimeoutException");
            feature.AddKnownType("MongoDB.Driver.MongoIncompatibleDriverException,MongoDB.Driver.Core", "MongoDB.Driver.MongoIncompatibleDriverException");
            feature.AddKnownType("MongoDB.Driver.MongoInternalException,MongoDB.Driver.Core", "MongoDB.Driver.MongoInternalException");
            feature.AddKnownType("MongoDB.Driver.MongoNodeIsRecoveringException,MongoDB.Driver.Core", "MongoDB.Driver.MongoNodeIsRecoveringException");
            feature.AddKnownType("MongoDB.Driver.MongoNotPrimaryException,MongoDB.Driver.Core", "MongoDB.Driver.MongoNotPrimaryException");
            feature.AddKnownType("MongoDB.Driver.MongoQueryException,MongoDB.Driver.Core", "MongoDB.Driver.MongoQueryException");
            feature.AddKnownType("MongoDB.Driver.MongoServerException,MongoDB.Driver.Core", "MongoDB.Driver.MongoServerException");
            feature.AddKnownType("MongoDB.Driver.MongoWaitQueueFullException,MongoDB.Driver.Core", "MongoDB.Driver.MongoWaitQueueFullException");
            feature.AddKnownType("MongoDB.Driver.MongoWriteConcernException,MongoDB.Driver.Core", "MongoDB.Driver.MongoWriteConcernException");
            feature.AddKnownType("MongoDB.Driver.Optional`1,MongoDB.Driver.Core", "MongoDB.Driver.Optional`1'1");
            feature.AddKnownType("MongoDB.Driver.ReadConcern,MongoDB.Driver.Core", "MongoDB.Driver.ReadConcern");
            feature.AddKnownType("MongoDB.Driver.ReadConcernLevel,MongoDB.Driver.Core", "MongoDB.Driver.ReadConcernLevel");
            feature.AddKnownType("MongoDB.Driver.ReadPreference,MongoDB.Driver.Core", "MongoDB.Driver.ReadPreference");
            feature.AddKnownType("MongoDB.Driver.ReadPreferenceHedge,MongoDB.Driver.Core", "MongoDB.Driver.ReadPreferenceHedge");
            feature.AddKnownType("MongoDB.Driver.ReadPreferenceMode,MongoDB.Driver.Core", "MongoDB.Driver.ReadPreferenceMode");
            feature.AddKnownType("MongoDB.Driver.ServerApi,MongoDB.Driver.Core", "MongoDB.Driver.ServerApi");
            feature.AddKnownType("MongoDB.Driver.ServerApiVersion,MongoDB.Driver.Core", "MongoDB.Driver.ServerApiVersion");
            feature.AddKnownType("MongoDB.Driver.ServerErrorCategory,MongoDB.Driver.Core", "MongoDB.Driver.ServerErrorCategory");
            feature.AddKnownType("MongoDB.Driver.ServerErrorCode,MongoDB.Driver.Core", "MongoDB.Driver.ServerErrorCode");
            feature.AddKnownType("MongoDB.Driver.SingleBatchAsyncCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.SingleBatchAsyncCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.Tag,MongoDB.Driver.Core", "MongoDB.Driver.Tag");
            feature.AddKnownType("MongoDB.Driver.TagSet,MongoDB.Driver.Core", "MongoDB.Driver.TagSet");
            feature.AddKnownType("MongoDB.Driver.TimeSeriesGranularity,MongoDB.Driver.Core", "MongoDB.Driver.TimeSeriesGranularity");
            feature.AddKnownType("MongoDB.Driver.TimeSeriesOptions,MongoDB.Driver.Core", "MongoDB.Driver.TimeSeriesOptions");
            feature.AddKnownType("MongoDB.Driver.TransactionOptions,MongoDB.Driver.Core", "MongoDB.Driver.TransactionOptions");
            feature.AddKnownType("MongoDB.Driver.WriteConcern,MongoDB.Driver.Core", "MongoDB.Driver.WriteConcern");
            feature.AddKnownType("MongoDB.Driver.WriteConcern+WValue,MongoDB.Driver.Core", "MongoDB.Driver.MongoDB.Driver.WriteConcern.WValue");
            feature.AddKnownType("MongoDB.Driver.WriteConcern+WCount,MongoDB.Driver.Core", "MongoDB.Driver.MongoDB.Driver.WriteConcern.WCount");
            feature.AddKnownType("MongoDB.Driver.WriteConcern+WMode,MongoDB.Driver.Core", "MongoDB.Driver.MongoDB.Driver.WriteConcern.WMode");
            feature.AddKnownType("MongoDB.Driver.WriteConcernResult,MongoDB.Driver.Core", "MongoDB.Driver.WriteConcernResult");
            feature.AddKnownType("MongoDB.Driver.Core.Async.AsyncQueue`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Async.AsyncQueue`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.AuthenticatorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.AuthenticatorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.DefaultAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.DefaultAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.GssapiAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiAuthenticator+GssapiMechanism,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.GssapiMechanism");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiAuthenticator+FirstStep,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.FirstStep");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiAuthenticator+InitializeStep,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.InitializeStep");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiAuthenticator+NegotiateStep,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.NegotiateStep");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.GssapiException,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.GssapiException");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.IAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.IAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.IAuthenticatorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.IAuthenticatorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ISecurityContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ISecurityContext");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator+AwsCredentials,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.AwsCredentials");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator+MongoAWSMechanism,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.MongoAWSMechanism");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator+ClientFirst,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ClientFirst");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoAWSAuthenticator+ClientLast,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ClientLast");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoDBCRAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.MongoDBCRAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.MongoDBX509Authenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.MongoDBX509Authenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.PlainAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.PlainAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.PlainAuthenticator+PlainMechanism,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.PlainMechanism");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.SaslAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.SaslAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.SaslAuthenticator+SaslConversation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.SaslConversation");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.SaslAuthenticator+ISaslMechanism,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ISaslMechanism");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.SaslAuthenticator+ISaslStep,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ISaslStep");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.SaslAuthenticator+CompletedStep,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.CompletedStep");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramCache,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramCache");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramCacheKey,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramCacheKey");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramCacheEntry,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramCacheEntry");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramSha1Authenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramSha1Authenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramSha256Authenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramSha256Authenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramShaAuthenticator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramShaAuthenticator");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramShaAuthenticator+ScramShaMechanism,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ScramShaMechanism");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramShaAuthenticator+ClientFirst,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ClientFirst");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.ScramShaAuthenticator+ClientLast,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.ClientLast");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.UsernamePasswordCredential,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.UsernamePasswordCredential");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSafeHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSafeHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSecurityContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSecurityContext");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSecurityCredential,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssapiSecurityCredential");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssapiServicePrincipalName,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssapiServicePrincipalName");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssCode,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssCode");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssCredentialUsage,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssCredentialUsage");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssFlags");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssStatus,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssStatus");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssInputBuffer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssInputBuffer");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.GssOutputBuffer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.GssOutputBuffer");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.LibgssapiException,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.LibgssapiException");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Libgssapi.Oid,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Libgssapi.Oid");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.AuthIdentity,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.AuthIdentity");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.AuthIdentityFlag,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.AuthIdentityFlag");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.DataRepresentation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.DataRepresentation");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.EncryptQualityOfProtection,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.EncryptQualityOfProtection");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.QueryContextAttributes,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.QueryContextAttributes");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityBuffer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityBuffer");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityBufferDescriptor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityBufferDescriptor");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityBufferType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityBufferType");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityCredentialUse,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityCredentialUse");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityPackageContextSizes,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityPackageContextSizes");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SecurityPackageInfo,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SecurityPackageInfo");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SspiContextFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SspiContextFlags");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SspiHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SspiHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SspiPackage,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SspiPackage");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SspiSecurityContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SspiSecurityContext");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.SspiSecurityCredential,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.SspiSecurityCredential");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Sspi.Win32Exception,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Sspi.Win32Exception");
            feature.AddKnownType("MongoDB.Driver.Core.Authentication.Vendored.Rfc2898DeriveBytes,MongoDB.Driver.Core", "MongoDB.Driver.Core.Authentication.Vendored.Rfc2898DeriveBytes");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ChannelChannelSource,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ChannelChannelSource");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ChannelReadBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ChannelReadBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ChannelReadWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ChannelReadWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ChannelSourceHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ChannelSourceHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ChannelSourceReadWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ChannelSourceReadWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.CoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.CoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.CoreSessionHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.CoreSessionHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.CoreSessionOptions,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.CoreSessionOptions");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.CoreTransaction,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.CoreTransaction");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.CoreTransactionState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.CoreTransactionState");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IReadBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IReadBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IReadWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IReadWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IReadBindingHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IReadBindingHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IWriteBindingHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IWriteBindingHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IReadWriteBindingHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IReadWriteBindingHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IChannel,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IChannel");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IChannelHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IChannelHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IChannelSource,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IChannelSource");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.IChannelSourceHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.IChannelSourceHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ICoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ICoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ICoreSessionHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ICoreSessionHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.NoCoreServerSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.NoCoreServerSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.NoCoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.NoCoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.NonDisposingCoreSessionHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.NonDisposingCoreSessionHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ReadBindingHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ReadBindingHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ReadPreferenceBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ReadPreferenceBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ReadWriteBindingHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ReadWriteBindingHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ReferenceCountedCoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ReferenceCountedCoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.ServerChannelSource,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.ServerChannelSource");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.SingleServerReadBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.SingleServerReadBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.SingleServerReadWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.SingleServerReadWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.SplitReadWriteBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.SplitReadWriteBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.WrappingCoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.WrappingCoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Bindings.WritableServerBinding,MongoDB.Driver.Core", "MongoDB.Driver.Core.Bindings.WritableServerBinding");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.Cluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.Cluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.Cluster+SelectServerHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.SelectServerHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.Cluster+WaitForDescriptionChangedHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.WaitForDescriptionChangedHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterClock");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.NoClusterClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.NoClusterClock");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterConnectionMode,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterConnectionMode");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterDescription,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterDescription");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterDescriptionChangedEventArgs,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterDescriptionChangedEventArgs");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterId,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterId");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterState");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ClusterType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ClusterType");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ConnectionModeSwitch,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ConnectionModeSwitch");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.CryptClientCreator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.CryptClientCreator");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.DnsMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.DnsMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.DnsMonitorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.DnsMonitorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ElectionId,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ElectionId");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ICluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ICluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.IClusterClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.IClusterClock");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.IClusterFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.IClusterFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.DnsMonitorState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.DnsMonitorState");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.IDnsMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.IDnsMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.IDnsMonitorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.IDnsMonitorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.IDnsMonitoringCluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.IDnsMonitoringCluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.LoadBalancedCluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.LoadBalancedCluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.MultiServerCluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.MultiServerCluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.MultiServerCluster+ElectionInfo,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ElectionInfo");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ReplicaSetConfig,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ReplicaSetConfig");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.SingleServerCluster,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.SingleServerCluster");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.CompositeServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.CompositeServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.DelegateServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.DelegateServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.EndPointServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.EndPointServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.IServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.IServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.LatencyLimitingServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.LatencyLimitingServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.OperationsCountServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.OperationsCountServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.RandomServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.RandomServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.ReadPreferenceServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.ReadPreferenceServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Clusters.ServerSelectors.WritableServerSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.Clusters.ServerSelectors.WritableServerSelector");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.ICompressorSource,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.ICompressorSource");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.CompressorSource,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.CompressorSource");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.CompressorType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.CompressorType");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.ICompressor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.ICompressor");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.NoopCompressor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.NoopCompressor");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.SnappyCompressor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.SnappyCompressor");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.ZlibCompressor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.ZlibCompressor");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.ZstandardCompressor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.ZstandardCompressor");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Snappy.Snappy32NativeMethods+Delegates32,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Snappy.Delegates32");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Snappy.Snappy32NativeMethods+SnappyLocator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Snappy.SnappyLocator");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Snappy.Snappy64NativeMethods+Delegates64,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Snappy.Delegates64");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Snappy.Snappy64NativeMethods+SnappyLocator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Snappy.SnappyLocator");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Snappy.SnappyStatus,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Snappy.SnappyStatus");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.NativeBufferInfo,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.NativeBufferInfo");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.PinnedBufferWalker,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.PinnedBufferWalker");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.Zstandard64NativeMethods,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.Zstandard64NativeMethods");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.Zstandard64NativeMethods+Delegates64,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.Delegates64");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.Zstandard64NativeMethods+ZstandardLocator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.ZstandardLocator");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardNativeWrapper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.ZstandardNativeWrapper");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardNativeWrapper+OperationContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.OperationContext");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.BufferInfo,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.BufferInfo");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardStream,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.ZstandardStream");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardStream+StreamReadHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.StreamReadHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardStream+StreamReadHelper+ReadingState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.ReadingState");
            feature.AddKnownType("MongoDB.Driver.Core.Compression.Zstandard.ZstandardStream+StreamWriteHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Compression.Zstandard.StreamWriteHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ClusterBuilder,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ClusterBuilder");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ClusterSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ClusterSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.CompressorConfiguration,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.CompressorConfiguration");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ConnectionPoolSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ConnectionPoolSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ConnectionSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ConnectionSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ConnectionStringScheme,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ConnectionStringScheme");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ConnectionString,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ConnectionString");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ConnectionString+CompressorsOptions,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.CompressorsOptions");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.SdamLoggingSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.SdamLoggingSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.ServerSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.ServerSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.SslStreamSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.SslStreamSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Configuration.TcpStreamSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Configuration.TcpStreamSettings");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.CheckOutReason,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.CheckOutReason");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ICheckOutReasonTracker,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ICheckOutReasonTracker");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.CheckOutReasonCounter,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.CheckOutReasonCounter");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+AcquireConnectionHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.AcquireConnectionHelper");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+PooledConnection,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.PooledConnection");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+AcquiredConnection,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.AcquiredConnection");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+WaitQueue,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.WaitQueue");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+ListConnectionHolder,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ListConnectionHolder");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPool+ConnectionCreator,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ConnectionCreator");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPoolFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ExclusiveConnectionPoolFactory");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.IConnectionPool,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.IConnectionPool");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.IConnectionPoolFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.IConnectionPoolFactory");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ServiceStates,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ServiceStates");
            feature.AddKnownType("MongoDB.Driver.Core.ConnectionPools.ServiceStates+ServiceState,MongoDB.Driver.Core", "MongoDB.Driver.Core.ConnectionPools.ServiceState");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnection,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.BinaryConnection");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnection+Dropbox,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.Dropbox");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnection+OpenConnectionHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.OpenConnectionHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnection+ReceiveMessageHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ReceiveMessageHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnection+SendMessagesHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.SendMessagesHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BinaryConnectionFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.BinaryConnectionFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.BuildInfoResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.BuildInfoResult");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.ClientDocumentHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ClientDocumentHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.CommandEventHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.CommandEventHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.CommandEventHelper+ExpectedResponseType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ExpectedResponseType");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.CommandEventHelper+CommandState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.CommandState");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.ConnectionDescription,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ConnectionDescription");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.ConnectionId,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ConnectionId");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.ConnectionInitializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.ConnectionInitializer");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IConnection,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IConnection");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IConnectionHandle,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IConnectionHandle");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IConnectionFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IConnectionFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IConnectionInitializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IConnectionInitializer");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IsMasterResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IsMasterResult");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.IStreamFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.IStreamFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.KeepAliveValues,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.KeepAliveValues");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.SslStreamFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.SslStreamFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.TcpStreamFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.TcpStreamFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Connections.TcpStreamFactory+PreferredAddressFamilyComparer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Connections.PreferredAddressFamilyComparer");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterAddedServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterAddedServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterAddingServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterAddingServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterClosedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterClosedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterClosingEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterClosingEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterDescriptionChangedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterDescriptionChangedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterOpenedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterOpenedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterOpeningEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterOpeningEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterRemovedServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterRemovedServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterRemovingServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterRemovingServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterSelectedServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterSelectedServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterSelectingServerEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterSelectingServerEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ClusterSelectingServerFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ClusterSelectingServerFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.CommandFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.CommandFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.CommandStartedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.CommandStartedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.CommandSucceededEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.CommandSucceededEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionCheckOutFailedReason,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionCheckOutFailedReason");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionClosedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionClosedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionClosedReason,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionClosedReason");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionClosingEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionClosingEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionCreatedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionCreatedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionOpenedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionOpenedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionOpeningEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionOpeningEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionOpeningFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionOpeningFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolAddedConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolAddedConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolAddingConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolAddingConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolCheckedInConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolCheckedInConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolCheckedOutConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolCheckedOutConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolCheckingInConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolCheckingInConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolCheckingOutConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolCheckingOutConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolCheckingOutConnectionFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolCheckingOutConnectionFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolClearedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolClearedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolClearingEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolClearingEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolClosedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolClosedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolClosingEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolClosingEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolOpenedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolOpenedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolOpeningEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolOpeningEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolRemovedConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolRemovedConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionPoolRemovingConnectionEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionPoolRemovingConnectionEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionReceivedMessageEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionReceivedMessageEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionReceivingMessageEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionReceivingMessageEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionReceivingMessageFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionReceivingMessageFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionSendingMessagesEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionSendingMessagesEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionSendingMessagesFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionSendingMessagesFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ConnectionSentMessagesEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ConnectionSentMessagesEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.EventAggregator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.EventAggregator");
            feature.AddKnownType("MongoDB.Driver.Core.Events.EventContext+NoOpDisposer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.NoOpDisposer");
            feature.AddKnownType("MongoDB.Driver.Core.Events.EventContext+FindOperationDisposer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.FindOperationDisposer");
            feature.AddKnownType("MongoDB.Driver.Core.Events.EventContext+KillCursorsOperationDisposer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.KillCursorsOperationDisposer");
            feature.AddKnownType("MongoDB.Driver.Core.Events.EventContext+OperationIdDisposer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.OperationIdDisposer");
            feature.AddKnownType("MongoDB.Driver.Core.Events.IEventSubscriber,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.IEventSubscriber");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ReflectionEventSubscriber,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ReflectionEventSubscriber");
            feature.AddKnownType("MongoDB.Driver.Core.Events.SdamInformationEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.SdamInformationEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerClosedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerClosedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerClosingEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerClosingEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerDescriptionChangedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerDescriptionChangedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerHeartbeatFailedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerHeartbeatFailedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerHeartbeatStartedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerHeartbeatStartedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerHeartbeatSucceededEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerHeartbeatSucceededEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerOpenedEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerOpenedEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.ServerOpeningEvent,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.ServerOpeningEvent");
            feature.AddKnownType("MongoDB.Driver.Core.Events.SingleEventSubscriber`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.SingleEventSubscriber`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Events.Diagnostics.TraceSourceCommandEventSubscriber,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.Diagnostics.TraceSourceCommandEventSubscriber");
            feature.AddKnownType("MongoDB.Driver.Core.Events.Diagnostics.TraceSourceEventSubscriber,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.Diagnostics.TraceSourceEventSubscriber");
            feature.AddKnownType("MongoDB.Driver.Core.Events.Diagnostics.TraceSourceSdamEventSubscriber,MongoDB.Driver.Core", "MongoDB.Driver.Core.Events.Diagnostics.TraceSourceSdamEventSubscriber");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ArrayFiltersFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ArrayFiltersFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.BatchableSource`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.BatchableSource`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.CachedEnumerable`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.CachedEnumerable`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.CollationFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.CollationFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.CommandsThatWriteAcceptWriteConcernFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.CommandsThatWriteAcceptWriteConcernFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.DecryptedSecureString,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.DecryptedSecureString");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.DefaultRandomByteGenerator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.DefaultRandomByteGenerator");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.DefaultRandomStringGenerator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.DefaultRandomStringGenerator");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.DnsClientWrapper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.DnsClientWrapper");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.EndPointHelper+EndPointEqualityComparerImpl,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.EndPointEqualityComparerImpl");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ExponentiallyWeightedMovingAverage,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ExponentiallyWeightedMovingAverage");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.Feature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.Feature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.FindAllowDiskUseFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.FindAllowDiskUseFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.FixedCountBatchableSourceSerializer`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.FixedCountBatchableSourceSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.HintForDeleteOperationsFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.HintForDeleteOperationsFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.HintForFindAndModifyFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.HintForFindAndModifyFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.HintForUpdateAndReplaceOperationsFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.HintForUpdateAndReplaceOperationsFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IBatchableSource`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IBatchableSource`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IClock");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SrvRecord,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SrvRecord");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.TxtRecord,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.TxtRecord");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IDnsResolver,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IDnsResolver");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IndexMap,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IndexMap");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IndexMap+RangeBased,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.MongoDB.Driver.Core.Misc.IndexMap.RangeBased");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IndexMap+DictionaryBased,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.MongoDB.Driver.Core.Misc.IndexMap.DictionaryBased");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.InterlockedInt32,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.InterlockedInt32");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IRandomByteGenerator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IRandomByteGenerator");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.IRandomStringGenerator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.IRandomStringGenerator");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.Metronome,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.Metronome");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.Range`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.Range`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ReadAheadEnumerable`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ReadAheadEnumerable`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ReadAheadEnumerable`1+ReadAheadEnumerator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ReadAheadEnumerator'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ReadConcernFeature,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ReadConcernFeature");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ReferenceCounted`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ReferenceCounted`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SemanticVersion,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SemanticVersion");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SemaphoreSlimRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SemaphoreSlimRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SemaphoreSlimSignalable,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SemaphoreSlimSignalable");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SemaphoreSlimSignalable+SemaphoreWaitResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.MongoDB.Driver.Core.Misc.SemaphoreSlimSignalable.SemaphoreWaitResult");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ServerVersion,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ServerVersion");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SizeLimitingBatchableSourceSerializer`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SizeLimitingBatchableSourceSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.SystemClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.SystemClock");
            feature.AddKnownType("MongoDB.Driver.Core.Misc.ToStringComparer`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Misc.ToStringComparer`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.DarwinLibraryLoader,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.DarwinLibraryLoader");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.ILibraryLocator,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.ILibraryLocator");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.INativeLibraryLoader,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.INativeLibraryLoader");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.LibraryLoader,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.LibraryLoader");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.LinuxLibraryLoader,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.LinuxLibraryLoader");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.PinnedBuffer,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.PinnedBuffer");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.RelativeLibraryLocatorBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.RelativeLibraryLocatorBase");
            feature.AddKnownType("MongoDB.Driver.Core.NativeLibraryLoader.WindowsLibraryLoader,MongoDB.Driver.Core", "MongoDB.Driver.Core.NativeLibraryLoader.WindowsLibraryLoader");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateExplainOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AggregateExplainOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AggregateOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateOperation`1+AggregateResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AggregateResult'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateOperation`1+AggregateResultDeserializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AggregateResultDeserializer'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateOperation`1+CursorDeserializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CursorDeserializer'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AggregateToCollectionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AggregateToCollectionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AsyncCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AsyncCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AsyncCursorEnumerableOneTimeAdapter`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AsyncCursorEnumerableOneTimeAdapter`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AsyncCursorEnumerator`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AsyncCursorEnumerator`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AsyncCursorSourceEnumerableAdapter`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AsyncCursorSourceEnumerableAdapter`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkDeleteOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkDeleteOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkInsertOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkInsertOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkInsertOperation+InsertRequestSerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.InsertRequestSerializer");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkMixedWriteOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkMixedWriteOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkMixedWriteOperation+Batch,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.Batch");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkMixedWriteOperation+BatchHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BatchHelper");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkMixedWriteOperation+BatchHelper+WriteRequestWithIndex,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.WriteRequestWithIndex");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationBase`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationBase`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationBase`1+BatchHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BatchHelper'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationBase`1+Batch,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.Batch'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationEmulatorBase`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationEmulatorBase`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationEmulatorBase`1+BatchHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BatchHelper'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUnmixedWriteOperationEmulatorBase`1+BatchHelper+Batch,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MongoDB.Driver.Core.Operations.BatchHelper'1.Batch'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkUpdateOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkUpdateOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteBatchResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteBatchResult");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteBatchResultCombiner,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteBatchResultCombiner");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteConcernError,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteConcernError");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationError,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteOperationError");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteOperationResult");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationResult+Acknowledged,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MongoDB.Driver.Core.Operations.BulkWriteOperationResult.Acknowledged");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationResult+Unacknowledged,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MongoDB.Driver.Core.Operations.BulkWriteOperationResult.Unacknowledged");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationResultConverter,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteOperationResultConverter");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.BulkWriteOperationUpsert,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BulkWriteOperationUpsert");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ChangeStreamCursor`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ChangeStreamCursor`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ChangeStreamCursor`1+ResumeValues,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ResumeValues'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IChangeStreamOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IChangeStreamOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ChangeStreamOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ChangeStreamOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CommandOperationBase`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CommandOperationBase`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CountDocumentsOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CountDocumentsOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CountOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CountOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateCollectionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateCollectionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateCollectionOperation+CreateCollectionFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateCollectionFlags");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateIndexesOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateIndexesOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateIndexesUsingCommandOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateIndexesUsingCommandOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateIndexRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateIndexRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CreateViewOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CreateViewOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CursorType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CursorType");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DatabaseExistsOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DatabaseExistsOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DelayedEvaluationWriteConcernSerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DelayedEvaluationWriteConcernSerializer");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DeleteOpcodeOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DeleteOpcodeOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DeleteOpcodeOperationEmulator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DeleteOpcodeOperationEmulator");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DeleteRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DeleteRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DistinctOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DistinctOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DistinctOperation`1+DistinctResult,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DistinctResult'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DistinctOperation`1+DistinctResultDeserializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DistinctResultDeserializer'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DropCollectionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DropCollectionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DropDatabaseOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DropDatabaseOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.DropIndexOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DropIndexOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ElementDeserializer`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ElementDeserializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.EndTransactionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.EndTransactionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.AbortTransactionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.AbortTransactionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.CommitTransactionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CommitTransactionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.EstimatedDocumentCountOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.EstimatedDocumentCountOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.EvalOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.EvalOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ExplainOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ExplainOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ExplainVerbosity,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ExplainVerbosity");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindAndModifyOperationBase`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindAndModifyOperationBase`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindAndModifyValueDeserializer`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindAndModifyValueDeserializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindCommandOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindCommandOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOneAndDeleteOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOneAndDeleteOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOneAndReplaceOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOneAndReplaceOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOneAndUpdateOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOneAndUpdateOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOneAndUpdateOperation`1+Validator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.Validator'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOpcodeOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOpcodeOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOpcodeOperation`1+FindOpcodeExplainOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOpcodeExplainOperation'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.FindOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.FindOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.GeoNearOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.GeoNearOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.GeoSearchOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.GeoSearchOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.GroupOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.GroupOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.InsertOpcodeOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.InsertOpcodeOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.InsertOpcodeOperation`1+Batch,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.Batch'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.InsertOpcodeOperation`1+BatchHelper,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.BatchHelper'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.InsertOpcodeOperationEmulator`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.InsertOpcodeOperationEmulator`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.InsertRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.InsertRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IReadOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IReadOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IWriteOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IWriteOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IOperationClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IOperationClock");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IExecutableInRetryableReadContext`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IExecutableInRetryableReadContext`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IExecutableInRetryableWriteContext`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IExecutableInRetryableWriteContext`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IRetryableReadOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IRetryableReadOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.IRetryableWriteOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.IRetryableWriteOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListCollectionsOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListCollectionsOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListCollectionsUsingCommandOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListCollectionsUsingCommandOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListCollectionsUsingQueryOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListCollectionsUsingQueryOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListDatabasesOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListDatabasesOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListIndexesOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListIndexesOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListIndexesUsingCommandOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListIndexesUsingCommandOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ListIndexesUsingQueryOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ListIndexesUsingQueryOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MapReduceLegacyOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MapReduceLegacyOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MapReduceOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MapReduceOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MapReduceOperationBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MapReduceOperationBase");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MapReduceOutputMode,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MapReduceOutputMode");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MapReduceOutputToCollectionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MapReduceOutputToCollectionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.MongoBulkWriteOperationException,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.MongoBulkWriteOperationException");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.OperationClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.OperationClock");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.NoOperationClock,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.NoOperationClock");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ParallelScanOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ParallelScanOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.PingOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.PingOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ReadCommandOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ReadCommandOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ReIndexOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ReIndexOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RenameCollectionOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RenameCollectionOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableDeleteCommandOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableDeleteCommandOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableDeleteCommandOperation+DeleteRequestSerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.DeleteRequestSerializer");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableInsertCommandOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableInsertCommandOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableInsertCommandOperation`1+InsertSerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.InsertSerializer'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableReadContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableReadContext");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableUpdateCommandOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableUpdateCommandOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableUpdateCommandOperation+UpdateRequestSerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.UpdateRequestSerializer");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableWriteCommandOperationBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableWriteCommandOperationBase");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableWriteCommandOperationBase+CommandArgs,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.CommandArgs");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.RetryableWriteContext,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.RetryableWriteContext");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ReturnDocument,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ReturnDocument");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.UpdateOpcodeOperation,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.UpdateOpcodeOperation");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.UpdateOpcodeOperationEmulator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.UpdateOpcodeOperationEmulator");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.UpdateRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.UpdateRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.UpdateType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.UpdateType");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.WriteCommandOperation`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.WriteCommandOperation`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.WriteRequest,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.WriteRequest");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.WriteRequestType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.WriteRequestType");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ElementNameValidators.ReplacementElementNameValidator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ElementNameValidators.ReplacementElementNameValidator");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ElementNameValidators.UpdateElementNameValidator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ElementNameValidators.UpdateElementNameValidator");
            feature.AddKnownType("MongoDB.Driver.Core.Operations.ElementNameValidators.UpdateOrReplacementElementNameValidator,MongoDB.Driver.Core", "MongoDB.Driver.Core.Operations.ElementNameValidators.UpdateOrReplacementElementNameValidator");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ClusterClockAdvancingCoreSession,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ClusterClockAdvancingCoreSession");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.DefaultServer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.DefaultServer");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.HeartbeatDelay,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.HeartbeatDelay");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IClusterableServerFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IClusterableServerFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IServer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IServer");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IClusterableServer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IClusterableServer");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IServerMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IServerMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IServerMonitorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IServerMonitorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.LoadBalancedServer,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.LoadBalancedServer");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.IRoundTripTimeMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.IRoundTripTimeMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.RoundTripTimeMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.RoundTripTimeMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.Server,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.Server");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.Server+ServerChannel,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerChannel");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerDescription,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerDescription");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerDescriptionChangedEventArgs,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerDescriptionChangedEventArgs");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerId,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerId");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerMonitor,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerMonitor");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerMonitorFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerMonitorFactory");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerMonitorSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerMonitorSettings");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerState,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerState");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.ServerType,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.ServerType");
            feature.AddKnownType("MongoDB.Driver.Core.Servers.TopologyVersion,MongoDB.Driver.Core", "MongoDB.Driver.Core.Servers.TopologyVersion");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandMessageFieldDecryptor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandMessageFieldDecryptor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandMessageFieldEncryptor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandMessageFieldEncryptor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandResponseHandling,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandResponseHandling");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandUsingCommandMessageWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandUsingCommandMessageWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandUsingQueryMessageWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandUsingQueryMessageWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandUsingQueryMessageWireProtocol`1+IgnoredReply,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IgnoredReply'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandUsingQueryMessageWireProtocol`1+IgnoredReplySerializer,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IgnoredReplySerializer'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CommandWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CommandWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.CursorBatch`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.CursorBatch`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.DeleteWireProtocol,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.DeleteWireProtocol");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.GetMoreWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.GetMoreWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.IBinaryCommandFieldEncryptor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IBinaryCommandFieldEncryptor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.IBinaryDocumentFieldDecryptor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IBinaryDocumentFieldDecryptor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.InsertWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.InsertWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.IWireProtocol,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IWireProtocol");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.IWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.IWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.KillCursorsWireProtocol,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.KillCursorsWireProtocol");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.QueryWireProtocol`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.QueryWireProtocol`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.UpdateWireProtocol,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.UpdateWireProtocol");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.WriteWireProtocolBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.WriteWireProtocolBase");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CommandMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CommandMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CommandMessageDisposer,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CommandMessageDisposer");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.PayloadType,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.PayloadType");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CommandMessageSection,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CommandMessageSection");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Type0CommandMessageSection,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Type0CommandMessageSection");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Type0CommandMessageSection`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Type0CommandMessageSection`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Type1CommandMessageSection,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Type1CommandMessageSection");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Type1CommandMessageSection`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Type1CommandMessageSection`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CommandRequestMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CommandRequestMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CommandResponseMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CommandResponseMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.CompressedMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.CompressedMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.DeleteMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.DeleteMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.GetMoreMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.GetMoreMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.InsertMessage`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.InsertMessage`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.KillCursorsMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.KillCursorsMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.MongoDBMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.MongoDBMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.MongoDBMessageType,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.MongoDBMessageType");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.QueryMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.QueryMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.ReplyMessage`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.ReplyMessage`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.RequestMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.RequestMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.ResponseMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.ResponseMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.UpdateMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.UpdateMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.CommandResponseMessageEncoderSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.CommandResponseMessageEncoderSelector");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.CompressedMessageEncoderSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.CompressedMessageEncoderSelector");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IEncodableMessage,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IEncodableMessage");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderFactory");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderPostProcessor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderPostProcessor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderSelector,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.IMessageEncoderSelector");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.MessageEncoderSettings,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.MessageEncoderSettings");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.ReplyMessageEncoderSelector`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.ReplyMessageEncoderSelector`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.BinaryMessageEncoderFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.BinaryMessageEncoderFactory");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandMessageBinaryEncoder+PostProcessor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.PostProcessor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandRequestMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandRequestMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandResponseMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CommandResponseMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CompressedMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.CompressedMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.DeleteMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.DeleteMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.DeleteMessageBinaryEncoder+DeleteFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.DeleteFlags");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.GetMoreMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.GetMoreMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.InsertMessageBinaryEncoder`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.InsertMessageBinaryEncoder`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.InsertMessageBinaryEncoder`1+InsertFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.InsertFlags'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.KillCursorsMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.KillCursorsMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.MessageBinaryEncoderBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.MessageBinaryEncoderBase");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.Opcode,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.Opcode");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.OpMsgFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.OpMsgFlags");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.QueryMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.QueryMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.QueryMessageBinaryEncoder+PostProcessor,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.PostProcessor");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.QueryMessageBinaryEncoder+QueryFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.QueryFlags");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.ReplyMessageBinaryEncoder`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.ReplyMessageBinaryEncoder`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.ReplyMessageBinaryEncoder`1+ResponseFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.ResponseFlags'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.UpdateMessageBinaryEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.UpdateMessageBinaryEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.UpdateMessageBinaryEncoder+UpdateFlags,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.BinaryEncoders.UpdateFlags");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandRequestMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandRequestMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandResponseMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CommandResponseMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CompressedMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.CompressedMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.DeleteMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.DeleteMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.GetMoreMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.GetMoreMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.InsertMessageJsonEncoder`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.InsertMessageJsonEncoder`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.JsonMessageEncoderFactory,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.JsonMessageEncoderFactory");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.KillCursorsMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.KillCursorsMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.MessageJsonEncoderBase,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.MessageJsonEncoderBase");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.QueryMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.QueryMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.ReplyMessageJsonEncoder`1,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.ReplyMessageJsonEncoder`1'1");
            feature.AddKnownType("MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.UpdateMessageJsonEncoder,MongoDB.Driver.Core", "MongoDB.Driver.Core.WireProtocol.Messages.Encoders.JsonEncoders.UpdateMessageJsonEncoder");
            feature.AddKnownType("MongoDB.Shared.Hasher,MongoDB.Driver.Core", "MongoDB.Shared.Hasher");
            feature.AddKnownType("MongoDB.Shared.OperatingSystemPlatform,MongoDB.Driver.Core", "MongoDB.Shared.OperatingSystemPlatform");
            feature.AddKnownType("System.Runtime.CompilerServices.NativeIntegerAttribute", "NativeIntegerAttribute");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketAutoGranularity,MongoDB.Driver", "MongoDB.Driver.AggregateBucketAutoGranularity");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketAutoOptions,MongoDB.Driver", "MongoDB.Driver.AggregateBucketAutoOptions");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketAutoResult`1,MongoDB.Driver", "MongoDB.Driver.AggregateBucketAutoResult`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketAutoResultId`1,MongoDB.Driver", "MongoDB.Driver.AggregateBucketAutoResultId`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketOptions`1,MongoDB.Driver", "MongoDB.Driver.AggregateBucketOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateBucketResult`1,MongoDB.Driver", "MongoDB.Driver.AggregateBucketResult`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateCountResult,MongoDB.Driver", "MongoDB.Driver.AggregateCountResult");
            feature.AddKnownType("MongoDB.Driver.AggregateExpressionDefinition`2,MongoDB.Driver", "MongoDB.Driver.AggregateExpressionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.BsonValueAggregateExpressionDefinition`2,MongoDB.Driver", "MongoDB.Driver.BsonValueAggregateExpressionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ExpressionAggregateExpressionDefinition`2,MongoDB.Driver", "MongoDB.Driver.ExpressionAggregateExpressionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.AggregateFacet`1,MongoDB.Driver", "MongoDB.Driver.AggregateFacet`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateFacet`2,MongoDB.Driver", "MongoDB.Driver.AggregateFacet`2'2");
            feature.AddKnownType("MongoDB.Driver.AggregateFacetOptions`1,MongoDB.Driver", "MongoDB.Driver.AggregateFacetOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateFacetResult,MongoDB.Driver", "MongoDB.Driver.AggregateFacetResult");
            feature.AddKnownType("MongoDB.Driver.AggregateFacetResult`1,MongoDB.Driver", "MongoDB.Driver.AggregateFacetResult`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateFacetResults,MongoDB.Driver", "MongoDB.Driver.AggregateFacetResults");
            feature.AddKnownType("MongoDB.Driver.AggregateFacetResultsSerializer,MongoDB.Driver", "MongoDB.Driver.AggregateFacetResultsSerializer");
            feature.AddKnownType("MongoDB.Driver.AggregateFluent`2,MongoDB.Driver", "MongoDB.Driver.AggregateFluent`2'2");
            feature.AddKnownType("MongoDB.Driver.CollectionAggregateFluent`2,MongoDB.Driver", "MongoDB.Driver.CollectionAggregateFluent`2'2");
            feature.AddKnownType("MongoDB.Driver.DatabaseAggregateFluent`1,MongoDB.Driver", "MongoDB.Driver.DatabaseAggregateFluent`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateFluentBase`1,MongoDB.Driver", "MongoDB.Driver.AggregateFluentBase`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateGraphLookupOptions`3,MongoDB.Driver", "MongoDB.Driver.AggregateGraphLookupOptions`3'3");
            feature.AddKnownType("MongoDB.Driver.AggregateLookupOptions`2,MongoDB.Driver", "MongoDB.Driver.AggregateLookupOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.AggregateOptions,MongoDB.Driver", "MongoDB.Driver.AggregateOptions");
            feature.AddKnownType("MongoDB.Driver.AggregateSortByCountResult`1,MongoDB.Driver", "MongoDB.Driver.AggregateSortByCountResult`1'1");
            feature.AddKnownType("MongoDB.Driver.AggregateStringTranslationMode,MongoDB.Driver", "MongoDB.Driver.AggregateStringTranslationMode");
            feature.AddKnownType("MongoDB.Driver.AggregateUnwindOptions`1,MongoDB.Driver", "MongoDB.Driver.AggregateUnwindOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.ArrayFilterDefinition,MongoDB.Driver", "MongoDB.Driver.ArrayFilterDefinition");
            feature.AddKnownType("MongoDB.Driver.ArrayFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.ArrayFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentArrayFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentArrayFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonArrayFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonArrayFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BulkWriteError,MongoDB.Driver", "MongoDB.Driver.BulkWriteError");
            feature.AddKnownType("MongoDB.Driver.BulkWriteOptions,MongoDB.Driver", "MongoDB.Driver.BulkWriteOptions");
            feature.AddKnownType("MongoDB.Driver.BulkWriteResult,MongoDB.Driver", "MongoDB.Driver.BulkWriteResult");
            feature.AddKnownType("MongoDB.Driver.BulkWriteResult`1,MongoDB.Driver", "MongoDB.Driver.BulkWriteResult`1'1");
            feature.AddKnownType("MongoDB.Driver.BulkWriteResult`1+Acknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.BulkWriteResult`1'1.Acknowledged'1");
            feature.AddKnownType("MongoDB.Driver.BulkWriteResult`1+Unacknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.BulkWriteResult`1'1.Unacknowledged'1");
            feature.AddKnownType("MongoDB.Driver.BulkWriteUpsert,MongoDB.Driver", "MongoDB.Driver.BulkWriteUpsert");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamOptions,MongoDB.Driver", "MongoDB.Driver.ChangeStreamOptions");
            feature.AddKnownType("MongoDB.Driver.ChangeStreamStageOptions,MongoDB.Driver", "MongoDB.Driver.ChangeStreamStageOptions");
            feature.AddKnownType("MongoDB.Driver.ClientSessionHandle,MongoDB.Driver", "MongoDB.Driver.ClientSessionHandle");
            feature.AddKnownType("MongoDB.Driver.ClientSessionOptions,MongoDB.Driver", "MongoDB.Driver.ClientSessionOptions");
            feature.AddKnownType("MongoDB.Driver.ClusterKey,MongoDB.Driver", "MongoDB.Driver.ClusterKey");
            feature.AddKnownType("MongoDB.Driver.ClusterRegistry,MongoDB.Driver", "MongoDB.Driver.ClusterRegistry");
            feature.AddKnownType("MongoDB.Driver.RenderedCommand`1,MongoDB.Driver", "MongoDB.Driver.RenderedCommand`1'1");
            feature.AddKnownType("MongoDB.Driver.Command`1,MongoDB.Driver", "MongoDB.Driver.Command`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentCommand`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentCommand`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonCommand`1,MongoDB.Driver", "MongoDB.Driver.JsonCommand`1'1");
            feature.AddKnownType("MongoDB.Driver.ObjectCommand`1,MongoDB.Driver", "MongoDB.Driver.ObjectCommand`1'1");
            feature.AddKnownType("MongoDB.Driver.ConnectionMode,MongoDB.Driver", "MongoDB.Driver.ConnectionMode");
            feature.AddKnownType("MongoDB.Driver.CountOptions,MongoDB.Driver", "MongoDB.Driver.CountOptions");
            feature.AddKnownType("MongoDB.Driver.CreateCollectionOptions,MongoDB.Driver", "MongoDB.Driver.CreateCollectionOptions");
            feature.AddKnownType("MongoDB.Driver.CreateCollectionOptions`1,MongoDB.Driver", "MongoDB.Driver.CreateCollectionOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.CreateIndexModel`1,MongoDB.Driver", "MongoDB.Driver.CreateIndexModel`1'1");
            feature.AddKnownType("MongoDB.Driver.CreateIndexOptions,MongoDB.Driver", "MongoDB.Driver.CreateIndexOptions");
            feature.AddKnownType("MongoDB.Driver.CreateIndexOptions`1,MongoDB.Driver", "MongoDB.Driver.CreateIndexOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.CreateManyIndexesOptions,MongoDB.Driver", "MongoDB.Driver.CreateManyIndexesOptions");
            feature.AddKnownType("MongoDB.Driver.CreateOneIndexOptions,MongoDB.Driver", "MongoDB.Driver.CreateOneIndexOptions");
            feature.AddKnownType("MongoDB.Driver.CreateViewOptions`1,MongoDB.Driver", "MongoDB.Driver.CreateViewOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.CursorType,MongoDB.Driver", "MongoDB.Driver.CursorType");
            feature.AddKnownType("MongoDB.Driver.DecryptedSecureString,MongoDB.Driver", "MongoDB.Driver.DecryptedSecureString");
            feature.AddKnownType("MongoDB.Driver.DeleteManyModel`1,MongoDB.Driver", "MongoDB.Driver.DeleteManyModel`1'1");
            feature.AddKnownType("MongoDB.Driver.DeleteOneModel`1,MongoDB.Driver", "MongoDB.Driver.DeleteOneModel`1'1");
            feature.AddKnownType("MongoDB.Driver.DeleteOptions,MongoDB.Driver", "MongoDB.Driver.DeleteOptions");
            feature.AddKnownType("MongoDB.Driver.DeleteResult,MongoDB.Driver", "MongoDB.Driver.DeleteResult");
            feature.AddKnownType("MongoDB.Driver.DeleteResult+Acknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.DeleteResult.Acknowledged");
            feature.AddKnownType("MongoDB.Driver.DeleteResult+Unacknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.DeleteResult.Unacknowledged");
            feature.AddKnownType("MongoDB.Driver.DistinctOptions,MongoDB.Driver", "MongoDB.Driver.DistinctOptions");
            feature.AddKnownType("MongoDB.Driver.DropIndexOptions,MongoDB.Driver", "MongoDB.Driver.DropIndexOptions");
            feature.AddKnownType("MongoDB.Driver.EstimatedDocumentCountOptions,MongoDB.Driver", "MongoDB.Driver.EstimatedDocumentCountOptions");
            feature.AddKnownType("MongoDB.Driver.ExpressionTranslationOptions,MongoDB.Driver", "MongoDB.Driver.ExpressionTranslationOptions");
            feature.AddKnownType("MongoDB.Driver.ExternalEvidence,MongoDB.Driver", "MongoDB.Driver.ExternalEvidence");
            feature.AddKnownType("MongoDB.Driver.RenderedFieldDefinition,MongoDB.Driver", "MongoDB.Driver.RenderedFieldDefinition");
            feature.AddKnownType("MongoDB.Driver.RenderedFieldDefinition`1,MongoDB.Driver", "MongoDB.Driver.RenderedFieldDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.FieldDefinition`1,MongoDB.Driver", "MongoDB.Driver.FieldDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.FieldDefinition`2,MongoDB.Driver", "MongoDB.Driver.FieldDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ExpressionFieldDefinition`1,MongoDB.Driver", "MongoDB.Driver.ExpressionFieldDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ExpressionFieldDefinition`2,MongoDB.Driver", "MongoDB.Driver.ExpressionFieldDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.StringFieldDefinition`1,MongoDB.Driver", "MongoDB.Driver.StringFieldDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.StringFieldDefinition`2,MongoDB.Driver", "MongoDB.Driver.StringFieldDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.UntypedFieldDefinitionAdapter`2,MongoDB.Driver", "MongoDB.Driver.UntypedFieldDefinitionAdapter`2'2");
            feature.AddKnownType("MongoDB.Driver.FieldValueSerializerHelper+ConvertIfPossibleSerializer`2,MongoDB.Driver", "MongoDB.Driver.ConvertIfPossibleSerializer`2'2");
            feature.AddKnownType("MongoDB.Driver.FieldValueSerializerHelper+EnumConvertingSerializer`2,MongoDB.Driver", "MongoDB.Driver.EnumConvertingSerializer`2'2");
            feature.AddKnownType("MongoDB.Driver.FieldValueSerializerHelper+IEnumerableSerializer`1,MongoDB.Driver", "MongoDB.Driver.IEnumerableSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.FieldValueSerializerHelper+NullableEnumConvertingSerializer`2,MongoDB.Driver", "MongoDB.Driver.NullableEnumConvertingSerializer`2'2");
            feature.AddKnownType("MongoDB.Driver.FilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.FilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.EmptyFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.EmptyFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ExpressionFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.ExpressionFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ObjectFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.ObjectFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.FilterDefinitionBuilder`1,MongoDB.Driver", "MongoDB.Driver.FilterDefinitionBuilder`1'1");
            feature.AddKnownType("MongoDB.Driver.AndFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.AndFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ArrayOperatorFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.ArrayOperatorFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ElementMatchFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.ElementMatchFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ScalarElementMatchFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.ScalarElementMatchFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.GeometryOperatorFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.GeometryOperatorFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.NearFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.NearFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.NotFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.NotFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.DocumentOfTypeFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.DocumentOfTypeFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.FieldOfTypeFilterDefinition`3,MongoDB.Driver", "MongoDB.Driver.FieldOfTypeFilterDefinition`3'3");
            feature.AddKnownType("MongoDB.Driver.OperatorFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.OperatorFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.OperatorFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.OperatorFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.OrFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.OrFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SimpleFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.SimpleFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SimpleFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.SimpleFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.SingleItemAsArrayOperatorFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.SingleItemAsArrayOperatorFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ArrayAsSingleItemOperatorFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.ArrayAsSingleItemOperatorFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ArrayAsSingleItemSimpleFilterDefinition`2,MongoDB.Driver", "MongoDB.Driver.ArrayAsSingleItemSimpleFilterDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ArrayIndexExistsFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.ArrayIndexExistsFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.UInt32GreaterThanFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.UInt32GreaterThanFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.UInt32LessThanFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.UInt32LessThanFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.UInt64GreaterThanFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.UInt64GreaterThanFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.UInt64LessThanFilterDefinition`1,MongoDB.Driver", "MongoDB.Driver.UInt64LessThanFilterDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.FilteredMongoCollectionBase`1,MongoDB.Driver", "MongoDB.Driver.FilteredMongoCollectionBase`1'1");
            feature.AddKnownType("MongoDB.Driver.FindFluent`2,MongoDB.Driver", "MongoDB.Driver.FindFluent`2'2");
            feature.AddKnownType("MongoDB.Driver.FindFluentBase`2,MongoDB.Driver", "MongoDB.Driver.FindFluentBase`2'2");
            feature.AddKnownType("MongoDB.Driver.FindOneAndDeleteOptions`2,MongoDB.Driver", "MongoDB.Driver.FindOneAndDeleteOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.FindOneAndDeleteOptions`1,MongoDB.Driver", "MongoDB.Driver.FindOneAndDeleteOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.FindOneAndReplaceOptions`2,MongoDB.Driver", "MongoDB.Driver.FindOneAndReplaceOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.FindOneAndReplaceOptions`1,MongoDB.Driver", "MongoDB.Driver.FindOneAndReplaceOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.FindOneAndUpdateOptions`2,MongoDB.Driver", "MongoDB.Driver.FindOneAndUpdateOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.FindOneAndUpdateOptions`1,MongoDB.Driver", "MongoDB.Driver.FindOneAndUpdateOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.FindOptionsBase,MongoDB.Driver", "MongoDB.Driver.FindOptionsBase");
            feature.AddKnownType("MongoDB.Driver.FindOptions,MongoDB.Driver", "MongoDB.Driver.FindOptions");
            feature.AddKnownType("MongoDB.Driver.FindOptions`2,MongoDB.Driver", "MongoDB.Driver.FindOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.FindOptions`1,MongoDB.Driver", "MongoDB.Driver.FindOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.IAggregateFluent`1,MongoDB.Driver", "MongoDB.Driver.IAggregateFluent`1'1");
            feature.AddKnownType("MongoDB.Driver.IOrderedAggregateFluent`1,MongoDB.Driver", "MongoDB.Driver.IOrderedAggregateFluent`1'1");
            feature.AddKnownType("MongoDB.Driver.IClientSession,MongoDB.Driver", "MongoDB.Driver.IClientSession");
            feature.AddKnownType("MongoDB.Driver.IClientSessionHandle,MongoDB.Driver", "MongoDB.Driver.IClientSessionHandle");
            feature.AddKnownType("MongoDB.Driver.IFilteredMongoCollection`1,MongoDB.Driver", "MongoDB.Driver.IFilteredMongoCollection`1'1");
            feature.AddKnownType("MongoDB.Driver.IFindFluent`2,MongoDB.Driver", "MongoDB.Driver.IFindFluent`2'2");
            feature.AddKnownType("MongoDB.Driver.IOrderedFindFluent`2,MongoDB.Driver", "MongoDB.Driver.IOrderedFindFluent`2'2");
            feature.AddKnownType("MongoDB.Driver.IInheritableMongoClientSettings,MongoDB.Driver", "MongoDB.Driver.IInheritableMongoClientSettings");
            feature.AddKnownType("MongoDB.Driver.IMongoClient,MongoDB.Driver", "MongoDB.Driver.IMongoClient");
            feature.AddKnownType("MongoDB.Driver.IMongoCollection`1,MongoDB.Driver", "MongoDB.Driver.IMongoCollection`1'1");
            feature.AddKnownType("MongoDB.Driver.IMongoDatabase,MongoDB.Driver", "MongoDB.Driver.IMongoDatabase");
            feature.AddKnownType("MongoDB.Driver.IMongoIndexManager`1,MongoDB.Driver", "MongoDB.Driver.IMongoIndexManager`1'1");
            feature.AddKnownType("MongoDB.Driver.IndexKeysDefinition`1,MongoDB.Driver", "MongoDB.Driver.IndexKeysDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentIndexKeysDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentIndexKeysDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonIndexKeysDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonIndexKeysDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.IndexKeysDefinitionBuilder`1,MongoDB.Driver", "MongoDB.Driver.IndexKeysDefinitionBuilder`1'1");
            feature.AddKnownType("MongoDB.Driver.CombinedIndexKeysDefinition`1,MongoDB.Driver", "MongoDB.Driver.CombinedIndexKeysDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.DirectionalIndexKeyDefinition`1,MongoDB.Driver", "MongoDB.Driver.DirectionalIndexKeyDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoHaystackIndexKeyDefinition`1,MongoDB.Driver", "MongoDB.Driver.GeoHaystackIndexKeyDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SimpleIndexKeyDefinition`1,MongoDB.Driver", "MongoDB.Driver.SimpleIndexKeyDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.WildcardIndexKeyDefinition`1,MongoDB.Driver", "MongoDB.Driver.WildcardIndexKeyDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.IndexOptionDefaults,MongoDB.Driver", "MongoDB.Driver.IndexOptionDefaults");
            feature.AddKnownType("MongoDB.Driver.InsertManyOptions,MongoDB.Driver", "MongoDB.Driver.InsertManyOptions");
            feature.AddKnownType("MongoDB.Driver.InsertOneModel`1,MongoDB.Driver", "MongoDB.Driver.InsertOneModel`1'1");
            feature.AddKnownType("MongoDB.Driver.InsertOneOptions,MongoDB.Driver", "MongoDB.Driver.InsertOneOptions");
            feature.AddKnownType("MongoDB.Driver.IOperationExecutor,MongoDB.Driver", "MongoDB.Driver.IOperationExecutor");
            feature.AddKnownType("MongoDB.Driver.IServerSession,MongoDB.Driver", "MongoDB.Driver.IServerSession");
            feature.AddKnownType("MongoDB.Driver.ListCollectionNamesOptions,MongoDB.Driver", "MongoDB.Driver.ListCollectionNamesOptions");
            feature.AddKnownType("MongoDB.Driver.ListCollectionsOptions,MongoDB.Driver", "MongoDB.Driver.ListCollectionsOptions");
            feature.AddKnownType("MongoDB.Driver.ListDatabaseNamesOptions,MongoDB.Driver", "MongoDB.Driver.ListDatabaseNamesOptions");
            feature.AddKnownType("MongoDB.Driver.ListDatabasesOptions,MongoDB.Driver", "MongoDB.Driver.ListDatabasesOptions");
            feature.AddKnownType("MongoDB.Driver.ListIndexesOptions,MongoDB.Driver", "MongoDB.Driver.ListIndexesOptions");
            feature.AddKnownType("MongoDB.Driver.MapReduceOptions`2,MongoDB.Driver", "MongoDB.Driver.MapReduceOptions`2'2");
            feature.AddKnownType("MongoDB.Driver.MapReduceOutputOptions,MongoDB.Driver", "MongoDB.Driver.MapReduceOutputOptions");
            feature.AddKnownType("MongoDB.Driver.MapReduceOutputOptions+InlineOutput,MongoDB.Driver", "MongoDB.Driver.InlineOutput");
            feature.AddKnownType("MongoDB.Driver.MapReduceOutputOptions+CollectionOutput,MongoDB.Driver", "MongoDB.Driver.CollectionOutput");
            feature.AddKnownType("MongoDB.Driver.MergeStageWhenMatched,MongoDB.Driver", "MongoDB.Driver.MergeStageWhenMatched");
            feature.AddKnownType("MongoDB.Driver.MergeStageWhenNotMatched,MongoDB.Driver", "MongoDB.Driver.MergeStageWhenNotMatched");
            feature.AddKnownType("MongoDB.Driver.MergeStageOptions`1,MongoDB.Driver", "MongoDB.Driver.MergeStageOptions`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoBulkWriteException,MongoDB.Driver", "MongoDB.Driver.MongoBulkWriteException");
            feature.AddKnownType("MongoDB.Driver.MongoBulkWriteException`1,MongoDB.Driver", "MongoDB.Driver.MongoBulkWriteException`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoClient,MongoDB.Driver", "MongoDB.Driver.MongoClient");
            feature.AddKnownType("MongoDB.Driver.MongoClient+AreSessionsSupportedServerSelector,MongoDB.Driver", "MongoDB.Driver.AreSessionsSupportedServerSelector");
            feature.AddKnownType("MongoDB.Driver.MongoClientBase,MongoDB.Driver", "MongoDB.Driver.MongoClientBase");
            feature.AddKnownType("MongoDB.Driver.MongoClientSettings,MongoDB.Driver", "MongoDB.Driver.MongoClientSettings");
            feature.AddKnownType("MongoDB.Driver.MongoCollectionBase`1,MongoDB.Driver", "MongoDB.Driver.MongoCollectionBase`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoCollectionImpl`1,MongoDB.Driver", "MongoDB.Driver.MongoCollectionImpl`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoCollectionImpl`1+MongoIndexManager,MongoDB.Driver", "MongoDB.Driver.MongoIndexManager'1");
            feature.AddKnownType("MongoDB.Driver.MongoCollectionSettings,MongoDB.Driver", "MongoDB.Driver.MongoCollectionSettings");
            feature.AddKnownType("MongoDB.Driver.MongoCredential,MongoDB.Driver", "MongoDB.Driver.MongoCredential");
            feature.AddKnownType("MongoDB.Driver.MongoCredentialStore,MongoDB.Driver", "MongoDB.Driver.MongoCredentialStore");
            feature.AddKnownType("MongoDB.Driver.MongoDatabaseBase,MongoDB.Driver", "MongoDB.Driver.MongoDatabaseBase");
            feature.AddKnownType("MongoDB.Driver.MongoDatabaseImpl,MongoDB.Driver", "MongoDB.Driver.MongoDatabaseImpl");
            feature.AddKnownType("MongoDB.Driver.MongoDatabaseSettings,MongoDB.Driver", "MongoDB.Driver.MongoDatabaseSettings");
            feature.AddKnownType("MongoDB.Driver.MongoDBRef,MongoDB.Driver", "MongoDB.Driver.MongoDBRef");
            feature.AddKnownType("MongoDB.Driver.MongoDBRefSerializer,MongoDB.Driver", "MongoDB.Driver.MongoDBRefSerializer");
            feature.AddKnownType("MongoDB.Driver.MongoExternalAwsIdentity,MongoDB.Driver", "MongoDB.Driver.MongoExternalAwsIdentity");
            feature.AddKnownType("MongoDB.Driver.MongoExternalIdentity,MongoDB.Driver", "MongoDB.Driver.MongoExternalIdentity");
            feature.AddKnownType("MongoDB.Driver.MongoIdentity,MongoDB.Driver", "MongoDB.Driver.MongoIdentity");
            feature.AddKnownType("MongoDB.Driver.MongoIdentityEvidence,MongoDB.Driver", "MongoDB.Driver.MongoIdentityEvidence");
            feature.AddKnownType("MongoDB.Driver.MongoIndexManagerBase`1,MongoDB.Driver", "MongoDB.Driver.MongoIndexManagerBase`1'1");
            feature.AddKnownType("MongoDB.Driver.MongoInternalIdentity,MongoDB.Driver", "MongoDB.Driver.MongoInternalIdentity");
            feature.AddKnownType("MongoDB.Driver.MongoServerAddress,MongoDB.Driver", "MongoDB.Driver.MongoServerAddress");
            feature.AddKnownType("MongoDB.Driver.MongoUrl,MongoDB.Driver", "MongoDB.Driver.MongoUrl");
            feature.AddKnownType("MongoDB.Driver.MongoUrlBuilder,MongoDB.Driver", "MongoDB.Driver.MongoUrlBuilder");
            feature.AddKnownType("MongoDB.Driver.MongoWriteException,MongoDB.Driver", "MongoDB.Driver.MongoWriteException");
            feature.AddKnownType("MongoDB.Driver.MongoX509Identity,MongoDB.Driver", "MongoDB.Driver.MongoX509Identity");
            feature.AddKnownType("MongoDB.Driver.NoPipelineInput,MongoDB.Driver", "MongoDB.Driver.NoPipelineInput");
            feature.AddKnownType("MongoDB.Driver.NoPipelineInputSerializer,MongoDB.Driver", "MongoDB.Driver.NoPipelineInputSerializer");
            feature.AddKnownType("MongoDB.Driver.OfTypeMongoCollection`2,MongoDB.Driver", "MongoDB.Driver.OfTypeMongoCollection`2'2");
            feature.AddKnownType("MongoDB.Driver.OfTypeSerializer`2,MongoDB.Driver", "MongoDB.Driver.OfTypeSerializer`2'2");
            feature.AddKnownType("MongoDB.Driver.OperationExecutor,MongoDB.Driver", "MongoDB.Driver.OperationExecutor");
            feature.AddKnownType("MongoDB.Driver.PasswordEvidence,MongoDB.Driver", "MongoDB.Driver.PasswordEvidence");
            feature.AddKnownType("MongoDB.Driver.RenderedPipelineDefinition`1,MongoDB.Driver", "MongoDB.Driver.RenderedPipelineDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.PipelineDefinition`2,MongoDB.Driver", "MongoDB.Driver.PipelineDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentStagePipelineDefinition`2,MongoDB.Driver", "MongoDB.Driver.BsonDocumentStagePipelineDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.PipelineStagePipelineDefinition`2,MongoDB.Driver", "MongoDB.Driver.PipelineStagePipelineDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.OptimizingPipelineDefinition`2,MongoDB.Driver", "MongoDB.Driver.OptimizingPipelineDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.AppendedStagePipelineDefinition`3,MongoDB.Driver", "MongoDB.Driver.AppendedStagePipelineDefinition`3'3");
            feature.AddKnownType("MongoDB.Driver.EmptyPipelineDefinition`1,MongoDB.Driver", "MongoDB.Driver.EmptyPipelineDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.PrependedStagePipelineDefinition`3,MongoDB.Driver", "MongoDB.Driver.PrependedStagePipelineDefinition`3'3");
            feature.AddKnownType("MongoDB.Driver.ReplaceOutputSerializerPipelineDefinition`3,MongoDB.Driver", "MongoDB.Driver.ReplaceOutputSerializerPipelineDefinition`3'3");
            feature.AddKnownType("MongoDB.Driver.IRenderedPipelineStageDefinition,MongoDB.Driver", "MongoDB.Driver.IRenderedPipelineStageDefinition");
            feature.AddKnownType("MongoDB.Driver.RenderedPipelineStageDefinition`1,MongoDB.Driver", "MongoDB.Driver.RenderedPipelineStageDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.IPipelineStageDefinition,MongoDB.Driver", "MongoDB.Driver.IPipelineStageDefinition");
            feature.AddKnownType("MongoDB.Driver.PipelineStageDefinition`2,MongoDB.Driver", "MongoDB.Driver.PipelineStageDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentPipelineStageDefinition`2,MongoDB.Driver", "MongoDB.Driver.BsonDocumentPipelineStageDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.JsonPipelineStageDefinition`2,MongoDB.Driver", "MongoDB.Driver.JsonPipelineStageDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.DelegatedPipelineStageDefinition`2,MongoDB.Driver", "MongoDB.Driver.DelegatedPipelineStageDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ExpressionBucketOutputProjection`3,MongoDB.Driver", "MongoDB.Driver.ExpressionBucketOutputProjection`3'3");
            feature.AddKnownType("MongoDB.Driver.GroupExpressionProjection`3,MongoDB.Driver", "MongoDB.Driver.GroupExpressionProjection`3'3");
            feature.AddKnownType("MongoDB.Driver.ProjectExpressionProjection`2,MongoDB.Driver", "MongoDB.Driver.ProjectExpressionProjection`2'2");
            feature.AddKnownType("MongoDB.Driver.SortPipelineStageDefinition`1,MongoDB.Driver", "MongoDB.Driver.SortPipelineStageDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.RenderedProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.RenderedProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.ProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.ProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.BsonDocumentProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.FindExpressionProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.FindExpressionProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.JsonProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.JsonProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ObjectProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.ObjectProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ObjectProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.ObjectProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.KnownResultTypeProjectionDefinitionAdapter`2,MongoDB.Driver", "MongoDB.Driver.KnownResultTypeProjectionDefinitionAdapter`2'2");
            feature.AddKnownType("MongoDB.Driver.ClientSideDeserializationProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.ClientSideDeserializationProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.ProjectionDefinitionBuilder`1,MongoDB.Driver", "MongoDB.Driver.ProjectionDefinitionBuilder`1'1");
            feature.AddKnownType("MongoDB.Driver.CombinedProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.CombinedProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ElementMatchProjectionDefinition`2,MongoDB.Driver", "MongoDB.Driver.ElementMatchProjectionDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.PositionalOperatorProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.PositionalOperatorProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SingleFieldProjectionDefinition`1,MongoDB.Driver", "MongoDB.Driver.SingleFieldProjectionDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.RenameCollectionOptions,MongoDB.Driver", "MongoDB.Driver.RenameCollectionOptions");
            feature.AddKnownType("MongoDB.Driver.ReplaceOneModel`1,MongoDB.Driver", "MongoDB.Driver.ReplaceOneModel`1'1");
            feature.AddKnownType("MongoDB.Driver.ReplaceOneResult,MongoDB.Driver", "MongoDB.Driver.ReplaceOneResult");
            feature.AddKnownType("MongoDB.Driver.ReplaceOneResult+Acknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.ReplaceOneResult.Acknowledged");
            feature.AddKnownType("MongoDB.Driver.ReplaceOneResult+Unacknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.ReplaceOneResult.Unacknowledged");
            feature.AddKnownType("MongoDB.Driver.ReplaceOptions,MongoDB.Driver", "MongoDB.Driver.ReplaceOptions");
            feature.AddKnownType("MongoDB.Driver.ReturnDocument,MongoDB.Driver", "MongoDB.Driver.ReturnDocument");
            feature.AddKnownType("MongoDB.Driver.ServerSession,MongoDB.Driver", "MongoDB.Driver.ServerSession");
            feature.AddKnownType("MongoDB.Driver.Setting`1,MongoDB.Driver", "MongoDB.Driver.Setting`1'1");
            feature.AddKnownType("MongoDB.Driver.SortDirection,MongoDB.Driver", "MongoDB.Driver.SortDirection");
            feature.AddKnownType("MongoDB.Driver.SortDefinition`1,MongoDB.Driver", "MongoDB.Driver.SortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentSortDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentSortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonSortDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonSortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ObjectSortDefinition`1,MongoDB.Driver", "MongoDB.Driver.ObjectSortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SortDefinitionBuilder`1,MongoDB.Driver", "MongoDB.Driver.SortDefinitionBuilder`1'1");
            feature.AddKnownType("MongoDB.Driver.CombinedSortDefinition`1,MongoDB.Driver", "MongoDB.Driver.CombinedSortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.DirectionalSortDefinition`1,MongoDB.Driver", "MongoDB.Driver.DirectionalSortDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.SslSettings,MongoDB.Driver", "MongoDB.Driver.SslSettings");
            feature.AddKnownType("MongoDB.Driver.SslSettings+X509CertificateCollectionEqualityComparer,MongoDB.Driver", "MongoDB.Driver.X509CertificateCollectionEqualityComparer");
            feature.AddKnownType("MongoDB.Driver.TextSearchOptions,MongoDB.Driver", "MongoDB.Driver.TextSearchOptions");
            feature.AddKnownType("MongoDB.Driver.TransactionExecutor+CallbackOutcome`1,MongoDB.Driver", "MongoDB.Driver.CallbackOutcome`1'1");
            feature.AddKnownType("MongoDB.Driver.TransactionExecutor+CallbackOutcome`1+WithResult,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.CallbackOutcome`1'1.WithResult'1");
            feature.AddKnownType("MongoDB.Driver.TransactionExecutor+CallbackOutcome`1+WithShouldRetryTransaction,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.CallbackOutcome`1'1.WithShouldRetryTransaction'1");
            feature.AddKnownType("MongoDB.Driver.UpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.UpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.PipelineUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.PipelineUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BsonDocumentUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.BsonDocumentUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.JsonUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.JsonUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.ObjectUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.ObjectUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.UpdateDefinitionCurrentDateType,MongoDB.Driver", "MongoDB.Driver.UpdateDefinitionCurrentDateType");
            feature.AddKnownType("MongoDB.Driver.UpdateDefinitionBuilder`1,MongoDB.Driver", "MongoDB.Driver.UpdateDefinitionBuilder`1'1");
            feature.AddKnownType("MongoDB.Driver.AddToSetUpdateDefinition`2,MongoDB.Driver", "MongoDB.Driver.AddToSetUpdateDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.CombinedUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.CombinedUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.BitwiseOperatorUpdateDefinition`2,MongoDB.Driver", "MongoDB.Driver.BitwiseOperatorUpdateDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.OperatorUpdateDefinition`1,MongoDB.Driver", "MongoDB.Driver.OperatorUpdateDefinition`1'1");
            feature.AddKnownType("MongoDB.Driver.OperatorUpdateDefinition`2,MongoDB.Driver", "MongoDB.Driver.OperatorUpdateDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.PullUpdateDefinition`2,MongoDB.Driver", "MongoDB.Driver.PullUpdateDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.PushUpdateDefinition`2,MongoDB.Driver", "MongoDB.Driver.PushUpdateDefinition`2'2");
            feature.AddKnownType("MongoDB.Driver.UpdateManyModel`1,MongoDB.Driver", "MongoDB.Driver.UpdateManyModel`1'1");
            feature.AddKnownType("MongoDB.Driver.UpdateOneModel`1,MongoDB.Driver", "MongoDB.Driver.UpdateOneModel`1'1");
            feature.AddKnownType("MongoDB.Driver.UpdateOptions,MongoDB.Driver", "MongoDB.Driver.UpdateOptions");
            feature.AddKnownType("MongoDB.Driver.UpdateResult,MongoDB.Driver", "MongoDB.Driver.UpdateResult");
            feature.AddKnownType("MongoDB.Driver.UpdateResult+Acknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.UpdateResult.Acknowledged");
            feature.AddKnownType("MongoDB.Driver.UpdateResult+Unacknowledged,MongoDB.Driver", "MongoDB.Driver.MongoDB.Driver.UpdateResult.Unacknowledged");
            feature.AddKnownType("MongoDB.Driver.WriteConcernError,MongoDB.Driver", "MongoDB.Driver.WriteConcernError");
            feature.AddKnownType("MongoDB.Driver.WriteError,MongoDB.Driver", "MongoDB.Driver.WriteError");
            feature.AddKnownType("MongoDB.Driver.WriteModel`1,MongoDB.Driver", "MongoDB.Driver.WriteModel`1'1");
            feature.AddKnownType("MongoDB.Driver.WriteModelType,MongoDB.Driver", "MongoDB.Driver.WriteModelType");
            feature.AddKnownType("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController,MongoDB.Driver", "MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController");
            feature.AddKnownType("MongoDB.Driver.Encryption.AutoEncryptionOptions,MongoDB.Driver", "MongoDB.Driver.Encryption.AutoEncryptionOptions");
            feature.AddKnownType("MongoDB.Driver.Encryption.ClientEncryption,MongoDB.Driver", "MongoDB.Driver.Encryption.ClientEncryption");
            feature.AddKnownType("MongoDB.Driver.Encryption.ClientEncryptionOptions,MongoDB.Driver", "MongoDB.Driver.Encryption.ClientEncryptionOptions");
            feature.AddKnownType("MongoDB.Driver.Encryption.DataKeyOptions,MongoDB.Driver", "MongoDB.Driver.Encryption.DataKeyOptions");
            feature.AddKnownType("MongoDB.Driver.Encryption.EncryptionAlgorithm,MongoDB.Driver", "MongoDB.Driver.Encryption.EncryptionAlgorithm");
            feature.AddKnownType("MongoDB.Driver.Encryption.EncryptOptions,MongoDB.Driver", "MongoDB.Driver.Encryption.EncryptOptions");
            feature.AddKnownType("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController,MongoDB.Driver", "MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController");
            feature.AddKnownType("MongoDB.Driver.Encryption.LibMongoCryptControllerBase,MongoDB.Driver", "MongoDB.Driver.Encryption.LibMongoCryptControllerBase");
            feature.AddKnownType("MongoDB.Driver.Encryption.MongocryptdFactory,MongoDB.Driver", "MongoDB.Driver.Encryption.MongocryptdFactory");
            feature.AddKnownType("MongoDB.Driver.Encryption.MongoEncryptionException,MongoDB.Driver", "MongoDB.Driver.Encryption.MongoEncryptionException");
            feature.AddKnownType("MongoDB.Driver.Encryption.NoopBinaryDocumentFieldCryptor,MongoDB.Driver", "MongoDB.Driver.Encryption.NoopBinaryDocumentFieldCryptor");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson2DCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson2DCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson2DProjectedCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson2DProjectedCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson3DCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson3DCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson3DGeographicCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson3DGeographicCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJson3DProjectedCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJson3DProjectedCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonBoundingBox`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonBoundingBox`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinateReferenceSystem,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinateReferenceSystem");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinates,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinates");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeature`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeature`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureArgs`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureArgs`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureCollection`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureCollection`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometry`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometry`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometryCollection`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometryCollection`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinearRingCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinearRingCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineString`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineString`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineStringCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineStringCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinkedCoordinateReferenceSystem,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinkedCoordinateReferenceSystem");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineString`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineString`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineStringCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineStringCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPoint`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPoint`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPointCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPointCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygon`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygon`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygonCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygonCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonNamedCoordinateReferenceSystem,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonNamedCoordinateReferenceSystem");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectArgs`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectArgs`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectType,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectType");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygon`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygon`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygonCoordinates`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygonCoordinates`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DGeographicCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DGeographicCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DProjectedCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DProjectedCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DGeographicCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DGeographicCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DProjectedCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DProjectedCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonBoundingBoxSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonBoundingBoxSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinateReferenceSystemSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinateReferenceSystemSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinatesSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinatesSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureCollectionSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureCollectionSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometryCollectionSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometryCollectionSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometrySerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometrySerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinearRingCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinearRingCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinkedCoordinateReferenceSystemSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinkedCoordinateReferenceSystemSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonNamedCoordinateReferenceSystemSerializer,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonNamedCoordinateReferenceSystemSerializer");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializerHelper`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializerHelper`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPointSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPointSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonCoordinatesSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonCoordinatesSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonSerializer`1,MongoDB.Driver", "MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.AggregateQueryableExecutionModel`1,MongoDB.Driver", "MongoDB.Driver.Linq.AggregateQueryableExecutionModel`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.FieldExpressionFlattener,MongoDB.Driver", "MongoDB.Driver.Linq.FieldExpressionFlattener");
            feature.AddKnownType("MongoDB.Driver.Linq.IMongoQueryable,MongoDB.Driver", "MongoDB.Driver.Linq.IMongoQueryable");
            feature.AddKnownType("MongoDB.Driver.Linq.IMongoQueryable`1,MongoDB.Driver", "MongoDB.Driver.Linq.IMongoQueryable`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.IOrderedMongoQueryable`1,MongoDB.Driver", "MongoDB.Driver.Linq.IOrderedMongoQueryable`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.IMongoQueryProvider,MongoDB.Driver", "MongoDB.Driver.Linq.IMongoQueryProvider");
            feature.AddKnownType("MongoDB.Driver.Linq.IResultTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.IResultTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.MongoQueryableImpl`2,MongoDB.Driver", "MongoDB.Driver.Linq.MongoQueryableImpl`2'2");
            feature.AddKnownType("MongoDB.Driver.Linq.MongoQueryProviderImpl`1,MongoDB.Driver", "MongoDB.Driver.Linq.MongoQueryProviderImpl`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.QueryableExecutionModel,MongoDB.Driver", "MongoDB.Driver.Linq.QueryableExecutionModel");
            feature.AddKnownType("MongoDB.Driver.Linq.QueryableTranslation,MongoDB.Driver", "MongoDB.Driver.Linq.QueryableTranslation");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.AccumulatorExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.AccumulatorExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.AccumulatorType,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.AccumulatorType");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.AggregateExpressionExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.AggregateExpressionExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ArrayIndexExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ArrayIndexExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.CollectionExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.CollectionExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ConcatExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ConcatExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.CorrelatedExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.CorrelatedExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.DefaultIfEmptyExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.DefaultIfEmptyExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.DistinctExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.DistinctExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.DocumentExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.DocumentExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExceptExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExceptExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExpressionComparer,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExpressionComparer");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExpressionComparer+ScopedDictionary`2,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ScopedDictionary`2'2");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExpressionReplacer,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExpressionReplacer");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExtensionExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExtensionExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExtensionExpressionType,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExtensionExpressionType");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ExtensionExpressionVisitor,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ExtensionExpressionVisitor");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.FieldAsDocumentExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.FieldAsDocumentExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.FieldExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.FieldExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.GroupByExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.GroupByExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.GroupByWithResultSelectorExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.GroupByWithResultSelectorExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.GroupingKeyExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.GroupingKeyExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.GroupJoinExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.GroupJoinExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.IFieldExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.IFieldExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.IHasOutOfCurrentScopePrefix,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.IHasOutOfCurrentScopePrefix");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.InjectedFilterExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.InjectedFilterExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.IntersectExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.IntersectExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ISerializationExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ISerializationExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ISourcedExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ISourcedExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.JoinExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.JoinExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.OrderByClause,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.OrderByClause");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.OrderByExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.OrderByExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.PipelineExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.PipelineExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ReverseExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ReverseExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SampleExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SampleExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SelectExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SelectExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SelectManyExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SelectManyExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SerializationExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SerializationExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SerializedConstantExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SerializedConstantExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.SkipExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.SkipExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.TakeExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.TakeExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.UnionExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.UnionExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.WhereExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.WhereExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ZipExpression,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ZipExpression");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.AggregateResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.AggregateResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.AllResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.AllResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.AnyResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.AnyResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.ArrayResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.ArrayResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.AverageResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.AverageResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.ContainsResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.ContainsResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.CountResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.CountResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.FirstResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.FirstResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.HashSetResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.HashSetResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.LastResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.LastResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.ListResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.ListResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.MaxResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.MaxResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.MinResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.MinResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.SingleResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.SingleResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.StandardDeviationResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.StandardDeviationResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Expressions.ResultOperators.SumResultOperator,MongoDB.Driver", "MongoDB.Driver.Linq.Expressions.ResultOperators.SumResultOperator");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.AccumulatorBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.AccumulatorBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.CompositeMethodCallBinder`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.CompositeMethodCallBinder`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.CorrelatedAccumulatorRemover,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.CorrelatedAccumulatorRemover");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.CorrelatedGroupRewriter,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.CorrelatedGroupRewriter");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.CorrelatedGroupRewriter+AccumulatorGatherer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.AccumulatorGatherer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.IBindingContext,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.IBindingContext");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.IMethodCallBinder`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.IMethodCallBinder`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.MethodInfoMethodCallBinder`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.MethodInfoMethodCallBinder`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.MultipleWhereMerger,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.MultipleWhereMerger");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.NameBasedMethodCallBinder`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.NameBasedMethodCallBinder`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.NameBasedMethodCallBinder`1+Registration,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Registration'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.OutOfCurrentScopePrefixCollector,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.OutOfCurrentScopePrefixCollector");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PartialEvaluator,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.PartialEvaluator");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PartialEvaluator+Nominator,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Nominator");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PartialEvaluator+ReflectionEvaluator,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.ReflectionEvaluator");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PipelineBinderBase`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.PipelineBinderBase`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PipelineBindingContext,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.PipelineBindingContext");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.PreviouslyUsedSerializerFinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.PreviouslyUsedSerializerFinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.ProjectionMapping,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.ProjectionMapping");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.ProjectionMemberMapping,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.ProjectionMemberMapping");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.ProjectionMapper,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.ProjectionMapper");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.SerializationBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.SerializationBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.SerializerBuilder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.SerializerBuilder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.EmbeddedPipelineBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.EmbeddedPipelineBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.EmbeddedPipelineBindingContext,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.EmbeddedPipelineBindingContext");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AggregateBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AggregateBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AllBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AllBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AnyBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AnyBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AsQueryableBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AsQueryableBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AverageBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.AverageBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ConcatBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ConcatBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ContainsBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ContainsBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.CountBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.CountBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.DefaultIfEmptyBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.DefaultIfEmptyBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.DistinctBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.DistinctBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ExceptBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ExceptBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.FirstBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.FirstBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.IntersectBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.IntersectBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.LastBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.LastBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.MaxBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.MaxBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.MinBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.MinBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.OfTypeBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.OfTypeBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ReverseBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ReverseBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SelectBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SelectBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SkipBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SkipBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.StandardDeviationBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.StandardDeviationBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SumBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.SumBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.TakeBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.TakeBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToArrayBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToArrayBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToHashSetBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToHashSetBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToListBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ToListBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.UnionBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.UnionBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.WhereBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.WhereBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ZipBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders.ZipBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.PipelineBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.PipelineBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.AnyBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.AnyBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.AverageBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.AverageBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.CountBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.CountBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.DistinctBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.DistinctBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.FirstBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.FirstBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByBinder+Grouping`2,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.Grouping`2'2");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByBinder+GroupingDeserializer`2,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupingDeserializer`2'2");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByWithResultSelectorBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.GroupByWithResultSelectorBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinSerializer`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinSerializer`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinSerializer`1+FieldHidingBsonReader,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.FieldHidingBsonReader'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.JoinSerializer`1+FieldHidingBsonReader+FieldHiderBookmark,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.FieldHiderBookmark'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.MaxBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.MaxBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.MinBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.MinBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.OfTypeBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.OfTypeBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.OrderByBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.OrderByBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SampleBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SampleBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectingResultOperatorBinderBase,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectingResultOperatorBinderBase");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectManyBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SelectManyBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SingleBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SingleBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SkipBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SkipBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.StandardDeviationPopulationBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.StandardDeviationPopulationBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.StandardDeviationSampleBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.StandardDeviationSampleBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SumBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.SumBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.TakeBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.TakeBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.ThenByBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.ThenByBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.WhereBinder,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders.WhereBinder");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.CollectionConstructorTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.CollectionConstructorTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.ConstantOnRightTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.ConstantOnRightTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.EqualsAnyBooleanTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.EqualsAnyBooleanTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.ExpressionTransformerRegistry,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.ExpressionTransformerRegistry");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.FirstLastNormalizingTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.FirstLastNormalizingTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.IExpressionTransformer`1,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.IExpressionTransformer`1'1");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.NullableTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.NullableTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.SelectSelectCombiningTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.SelectSelectCombiningTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.VBCoalesceTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.VBCoalesceTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.VBCompareStringTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.VBCompareStringTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.VBInformationIsNothingTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.VBInformationIsNothingTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.VBNothingConversionRemovalTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.VBNothingConversionRemovalTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Processors.Transformers.VBStringIndexComparisonTransformer,MongoDB.Driver", "MongoDB.Driver.Linq.Processors.Transformers.VBStringIndexComparisonTransformer");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.AggregateLanguageTranslator,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.AggregateLanguageTranslator");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.FieldNamePrefixer,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.FieldNamePrefixer");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.FindProjectionTranslator,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.FindProjectionTranslator");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.FindProjectionTranslator+SerializationExpressionGatherer,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.SerializationExpressionGatherer");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.FindProjectionTranslator+ProjectedObjectFieldReplacer,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.ProjectedObjectFieldReplacer");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.PredicateTranslator,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.PredicateTranslator");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.PredicateTranslator+DocumentToFieldConverter,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.DocumentToFieldConverter");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.ProjectedObject,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.ProjectedObject");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.ProjectedObjectDeserializer,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.ProjectedObjectDeserializer");
            feature.AddKnownType("MongoDB.Driver.Linq.Translators.QueryableTranslator,MongoDB.Driver", "MongoDB.Driver.Linq.Translators.QueryableTranslator");
            feature.AddKnownType("MongoDB.Driver.Support.IClock,MongoDB.Driver", "MongoDB.Driver.Support.IClock");
            feature.AddKnownType("MongoDB.Driver.Support.IndexMap,MongoDB.Driver", "MongoDB.Driver.Support.IndexMap");
            feature.AddKnownType("MongoDB.Driver.Support.IndexMap+RangeBased,MongoDB.Driver", "MongoDB.Driver.Support.MongoDB.Driver.Support.IndexMap.RangeBased");
            feature.AddKnownType("MongoDB.Driver.Support.IndexMap+DictionaryBased,MongoDB.Driver", "MongoDB.Driver.Support.MongoDB.Driver.Support.IndexMap.DictionaryBased");
            feature.AddKnownType("MongoDB.Driver.Support.SystemClock,MongoDB.Driver", "MongoDB.Driver.Support.SystemClock");
            feature.AddKnownType("MongoDB.Shared.Hasher,MongoDB.Driver", "MongoDB.Shared.Hasher");
            feature.AddKnownType("MongoDB.Shared.OperatingSystemPlatform,MongoDB.Driver", "MongoDB.Shared.OperatingSystemPlatform");
            feature.AddKnownType("MongoDB.Libmongocrypt.Binary,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.Binary");
            feature.AddKnownType("MongoDB.Libmongocrypt.BinarySafeHandle,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.BinarySafeHandle");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptMode,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptMode");
            feature.AddKnownType("MongoDB.Libmongocrypt.ContextSafeHandle,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.ContextSafeHandle");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptClient,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptClient");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptClientFactory,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptClientFactory");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptContext,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptContext");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptContext+StateCode,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.MongoDB.Libmongocrypt.CryptContext.StateCode");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptException,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptException");
            feature.AddKnownType("MongoDB.Libmongocrypt.CryptOptions,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.CryptOptions");
            feature.AddKnownType("MongoDB.Libmongocrypt.IStatus,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.IStatus");
            feature.AddKnownType("MongoDB.Libmongocrypt.KmsCredentials,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.KmsCredentials");
            feature.AddKnownType("MongoDB.Libmongocrypt.KmsKeyId,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.KmsKeyId");
            feature.AddKnownType("MongoDB.Libmongocrypt.KmsRequest,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.KmsRequest");
            feature.AddKnownType("MongoDB.Libmongocrypt.KmsRequestCollection,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.KmsRequestCollection");
            feature.AddKnownType("MongoDB.Libmongocrypt.Library,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.Library");
            feature.AddKnownType("MongoDB.Libmongocrypt.Library+StatusType,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.StatusType");
            feature.AddKnownType("MongoDB.Libmongocrypt.Library+Delegates,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.Delegates");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.LibraryLoader");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader+FunctionNotFoundException,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.MongoDB.Libmongocrypt.LibraryLoader.FunctionNotFoundException");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader+ISharedLibraryLoader,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.ISharedLibraryLoader");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader+DarwinLibraryLoader,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.DarwinLibraryLoader");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader+LinuxLibrary,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.LinuxLibrary");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoader+WindowsLibrary,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.WindowsLibrary");
            feature.AddKnownType("MongoDB.Libmongocrypt.LibraryLoadingException,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.LibraryLoadingException");
            feature.AddKnownType("MongoDB.Libmongocrypt.LogLevel,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.LogLevel");
            feature.AddKnownType("MongoDB.Libmongocrypt.MongoCryptSafeHandle,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.MongoCryptSafeHandle");
            feature.AddKnownType("MongoDB.Libmongocrypt.OperatingSystemPlatform,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.OperatingSystemPlatform");
            feature.AddKnownType("MongoDB.Libmongocrypt.PinnedBinary,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.PinnedBinary");
            feature.AddKnownType("MongoDB.Libmongocrypt.Status,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.Status");
            feature.AddKnownType("MongoDB.Libmongocrypt.StatusSafeHandle,MongoDB.Libmongocrypt", "MongoDB.Libmongocrypt.StatusSafeHandle");
            feature.AddKnownType("SharpCompress.Lazy`1,SharpCompress", "SharpCompress.Lazy`1'1");
            feature.AddKnownType("SharpCompress.LazyReadOnlyCollection`1,SharpCompress", "SharpCompress.LazyReadOnlyCollection`1'1");
            feature.AddKnownType("SharpCompress.LazyReadOnlyCollection`1+LazyLoader,SharpCompress", "SharpCompress.LazyLoader'1");
            feature.AddKnownType("SharpCompress.ReadOnlyCollection`1,SharpCompress", "SharpCompress.ReadOnlyCollection`1'1");
            feature.AddKnownType("SharpCompress.Archives.AbstractArchive`2,SharpCompress", "SharpCompress.Archives.AbstractArchive`2'2");
            feature.AddKnownType("SharpCompress.Archives.AbstractWritableArchive`2,SharpCompress", "SharpCompress.Archives.AbstractWritableArchive`2'2");
            feature.AddKnownType("SharpCompress.Archives.ArchiveFactory,SharpCompress", "SharpCompress.Archives.ArchiveFactory");
            feature.AddKnownType("SharpCompress.Archives.IArchive,SharpCompress", "SharpCompress.Archives.IArchive");
            feature.AddKnownType("SharpCompress.Archives.IArchiveEntry,SharpCompress", "SharpCompress.Archives.IArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.IArchiveExtractionListener,SharpCompress", "SharpCompress.Archives.IArchiveExtractionListener");
            feature.AddKnownType("SharpCompress.Archives.IWritableArchive,SharpCompress", "SharpCompress.Archives.IWritableArchive");
            feature.AddKnownType("SharpCompress.Archives.IWritableArchiveEntry,SharpCompress", "SharpCompress.Archives.IWritableArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.GZip.GZipArchive,SharpCompress", "SharpCompress.Archives.GZip.GZipArchive");
            feature.AddKnownType("SharpCompress.Archives.GZip.GZipArchiveEntry,SharpCompress", "SharpCompress.Archives.GZip.GZipArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.GZip.GZipWritableArchiveEntry,SharpCompress", "SharpCompress.Archives.GZip.GZipWritableArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Rar.FileInfoRarArchiveVolume,SharpCompress", "SharpCompress.Archives.Rar.FileInfoRarArchiveVolume");
            feature.AddKnownType("SharpCompress.Archives.Rar.FileInfoRarFilePart,SharpCompress", "SharpCompress.Archives.Rar.FileInfoRarFilePart");
            feature.AddKnownType("SharpCompress.Archives.Rar.RarArchive,SharpCompress", "SharpCompress.Archives.Rar.RarArchive");
            feature.AddKnownType("SharpCompress.Archives.Rar.RarArchiveEntry,SharpCompress", "SharpCompress.Archives.Rar.RarArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Rar.SeekableFilePart,SharpCompress", "SharpCompress.Archives.Rar.SeekableFilePart");
            feature.AddKnownType("SharpCompress.Archives.Rar.StreamRarArchiveVolume,SharpCompress", "SharpCompress.Archives.Rar.StreamRarArchiveVolume");
            feature.AddKnownType("SharpCompress.Archives.SevenZip.SevenZipArchive,SharpCompress", "SharpCompress.Archives.SevenZip.SevenZipArchive");
            feature.AddKnownType("SharpCompress.Archives.SevenZip.SevenZipArchive+SevenZipReader,SharpCompress", "SharpCompress.Archives.SevenZip.SevenZipReader");
            feature.AddKnownType("SharpCompress.Archives.SevenZip.SevenZipArchive+PasswordProvider,SharpCompress", "SharpCompress.Archives.SevenZip.PasswordProvider");
            feature.AddKnownType("SharpCompress.Archives.SevenZip.SevenZipArchiveEntry,SharpCompress", "SharpCompress.Archives.SevenZip.SevenZipArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Tar.TarArchive,SharpCompress", "SharpCompress.Archives.Tar.TarArchive");
            feature.AddKnownType("SharpCompress.Archives.Tar.TarArchiveEntry,SharpCompress", "SharpCompress.Archives.Tar.TarArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Tar.TarWritableArchiveEntry,SharpCompress", "SharpCompress.Archives.Tar.TarWritableArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Zip.ZipArchive,SharpCompress", "SharpCompress.Archives.Zip.ZipArchive");
            feature.AddKnownType("SharpCompress.Archives.Zip.ZipArchiveEntry,SharpCompress", "SharpCompress.Archives.Zip.ZipArchiveEntry");
            feature.AddKnownType("SharpCompress.Archives.Zip.ZipWritableArchiveEntry,SharpCompress", "SharpCompress.Archives.Zip.ZipWritableArchiveEntry");
            feature.AddKnownType("SharpCompress.Buffers.ArrayPool`1,SharpCompress", "SharpCompress.Buffers.ArrayPool`1'1");
            feature.AddKnownType("SharpCompress.Buffers.DefaultArrayPool`1,SharpCompress", "SharpCompress.Buffers.DefaultArrayPool`1'1");
            feature.AddKnownType("SharpCompress.Buffers.DefaultArrayPool`1+Bucket,SharpCompress", "SharpCompress.Buffers.Bucket'1");
            feature.AddKnownType("SharpCompress.Common.ArchiveEncoding,SharpCompress", "SharpCompress.Common.ArchiveEncoding");
            feature.AddKnownType("SharpCompress.Common.ArchiveException,SharpCompress", "SharpCompress.Common.ArchiveException");
            feature.AddKnownType("SharpCompress.Common.ArchiveExtractionEventArgs`1,SharpCompress", "SharpCompress.Common.ArchiveExtractionEventArgs`1'1");
            feature.AddKnownType("SharpCompress.Common.ArchiveType,SharpCompress", "SharpCompress.Common.ArchiveType");
            feature.AddKnownType("SharpCompress.Common.CompressedBytesReadEventArgs,SharpCompress", "SharpCompress.Common.CompressedBytesReadEventArgs");
            feature.AddKnownType("SharpCompress.Common.CompressionType,SharpCompress", "SharpCompress.Common.CompressionType");
            feature.AddKnownType("SharpCompress.Common.CryptographicException,SharpCompress", "SharpCompress.Common.CryptographicException");
            feature.AddKnownType("SharpCompress.Common.Entry,SharpCompress", "SharpCompress.Common.Entry");
            feature.AddKnownType("SharpCompress.Common.EntryStream,SharpCompress", "SharpCompress.Common.EntryStream");
            feature.AddKnownType("SharpCompress.Common.ExtractionException,SharpCompress", "SharpCompress.Common.ExtractionException");
            feature.AddKnownType("SharpCompress.Common.ExtractionOptions,SharpCompress", "SharpCompress.Common.ExtractionOptions");
            feature.AddKnownType("SharpCompress.Common.FilePart,SharpCompress", "SharpCompress.Common.FilePart");
            feature.AddKnownType("SharpCompress.Common.FilePartExtractionBeginEventArgs,SharpCompress", "SharpCompress.Common.FilePartExtractionBeginEventArgs");
            feature.AddKnownType("SharpCompress.Common.IEntry,SharpCompress", "SharpCompress.Common.IEntry");
            feature.AddKnownType("SharpCompress.Common.IExtractionListener,SharpCompress", "SharpCompress.Common.IExtractionListener");
            feature.AddKnownType("SharpCompress.Common.IncompleteArchiveException,SharpCompress", "SharpCompress.Common.IncompleteArchiveException");
            feature.AddKnownType("SharpCompress.Common.InvalidFormatException,SharpCompress", "SharpCompress.Common.InvalidFormatException");
            feature.AddKnownType("SharpCompress.Common.IVolume,SharpCompress", "SharpCompress.Common.IVolume");
            feature.AddKnownType("SharpCompress.Common.MultipartStreamRequiredException,SharpCompress", "SharpCompress.Common.MultipartStreamRequiredException");
            feature.AddKnownType("SharpCompress.Common.MultiVolumeExtractionException,SharpCompress", "SharpCompress.Common.MultiVolumeExtractionException");
            feature.AddKnownType("SharpCompress.Common.OptionsBase,SharpCompress", "SharpCompress.Common.OptionsBase");
            feature.AddKnownType("SharpCompress.Common.PasswordProtectedException,SharpCompress", "SharpCompress.Common.PasswordProtectedException");
            feature.AddKnownType("SharpCompress.Common.ReaderExtractionEventArgs`1,SharpCompress", "SharpCompress.Common.ReaderExtractionEventArgs`1'1");
            feature.AddKnownType("SharpCompress.Common.Volume,SharpCompress", "SharpCompress.Common.Volume");
            feature.AddKnownType("SharpCompress.Common.GZip.GZipEntry,SharpCompress", "SharpCompress.Common.GZip.GZipEntry");
            feature.AddKnownType("SharpCompress.Common.GZip.GZipFilePart,SharpCompress", "SharpCompress.Common.GZip.GZipFilePart");
            feature.AddKnownType("SharpCompress.Common.GZip.GZipVolume,SharpCompress", "SharpCompress.Common.GZip.GZipVolume");
            feature.AddKnownType("SharpCompress.Common.Rar.RarCrcBinaryReader,SharpCompress", "SharpCompress.Common.Rar.RarCrcBinaryReader");
            feature.AddKnownType("SharpCompress.Common.Rar.RarCryptoBinaryReader,SharpCompress", "SharpCompress.Common.Rar.RarCryptoBinaryReader");
            feature.AddKnownType("SharpCompress.Common.Rar.RarCryptoWrapper,SharpCompress", "SharpCompress.Common.Rar.RarCryptoWrapper");
            feature.AddKnownType("SharpCompress.Common.Rar.RarEntry,SharpCompress", "SharpCompress.Common.Rar.RarEntry");
            feature.AddKnownType("SharpCompress.Common.Rar.RarFilePart,SharpCompress", "SharpCompress.Common.Rar.RarFilePart");
            feature.AddKnownType("SharpCompress.Common.Rar.RarRijndael,SharpCompress", "SharpCompress.Common.Rar.RarRijndael");
            feature.AddKnownType("SharpCompress.Common.Rar.RarVolume,SharpCompress", "SharpCompress.Common.Rar.RarVolume");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.ArchiveCryptHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.ArchiveCryptHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.ArchiveHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.ArchiveHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.AvHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.AvHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.CommentHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.CommentHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.EndArchiveHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.EndArchiveHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.FileHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.FileHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.HeaderType,SharpCompress", "SharpCompress.Common.Rar.Headers.HeaderType");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.IRarHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.IRarHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.MarkHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.MarkHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.NewSubHeaderType,SharpCompress", "SharpCompress.Common.Rar.Headers.NewSubHeaderType");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.ProtectHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.ProtectHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.RarHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.RarHeader");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.RarHeaderFactory,SharpCompress", "SharpCompress.Common.Rar.Headers.RarHeaderFactory");
            feature.AddKnownType("SharpCompress.Common.Rar.Headers.SignHeader,SharpCompress", "SharpCompress.Common.Rar.Headers.SignHeader");
            feature.AddKnownType("SharpCompress.Common.SevenZip.ArchiveDatabase,SharpCompress", "SharpCompress.Common.SevenZip.ArchiveDatabase");
            feature.AddKnownType("SharpCompress.Common.SevenZip.ArchiveReader,SharpCompress", "SharpCompress.Common.SevenZip.ArchiveReader");
            feature.AddKnownType("SharpCompress.Common.SevenZip.ArchiveReader+CExtractFolderInfo,SharpCompress", "SharpCompress.Common.SevenZip.CExtractFolderInfo");
            feature.AddKnownType("SharpCompress.Common.SevenZip.ArchiveReader+FolderUnpackStream,SharpCompress", "SharpCompress.Common.SevenZip.FolderUnpackStream");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CBindPair,SharpCompress", "SharpCompress.Common.SevenZip.CBindPair");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CCoderInfo,SharpCompress", "SharpCompress.Common.SevenZip.CCoderInfo");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CFileItem,SharpCompress", "SharpCompress.Common.SevenZip.CFileItem");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CFolder,SharpCompress", "SharpCompress.Common.SevenZip.CFolder");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CMethodId,SharpCompress", "SharpCompress.Common.SevenZip.CMethodId");
            feature.AddKnownType("SharpCompress.Common.SevenZip.CStreamSwitch,SharpCompress", "SharpCompress.Common.SevenZip.CStreamSwitch");
            feature.AddKnownType("SharpCompress.Common.SevenZip.DataReader,SharpCompress", "SharpCompress.Common.SevenZip.DataReader");
            feature.AddKnownType("SharpCompress.Common.SevenZip.SevenZipEntry,SharpCompress", "SharpCompress.Common.SevenZip.SevenZipEntry");
            feature.AddKnownType("SharpCompress.Common.SevenZip.SevenZipFilePart,SharpCompress", "SharpCompress.Common.SevenZip.SevenZipFilePart");
            feature.AddKnownType("SharpCompress.Common.SevenZip.SevenZipVolume,SharpCompress", "SharpCompress.Common.SevenZip.SevenZipVolume");
            feature.AddKnownType("SharpCompress.Common.Tar.TarEntry,SharpCompress", "SharpCompress.Common.Tar.TarEntry");
            feature.AddKnownType("SharpCompress.Common.Tar.TarFilePart,SharpCompress", "SharpCompress.Common.Tar.TarFilePart");
            feature.AddKnownType("SharpCompress.Common.Tar.TarReadOnlySubStream,SharpCompress", "SharpCompress.Common.Tar.TarReadOnlySubStream");
            feature.AddKnownType("SharpCompress.Common.Tar.TarVolume,SharpCompress", "SharpCompress.Common.Tar.TarVolume");
            feature.AddKnownType("SharpCompress.Common.Tar.Headers.EntryType,SharpCompress", "SharpCompress.Common.Tar.Headers.EntryType");
            feature.AddKnownType("SharpCompress.Common.Tar.Headers.TarHeader,SharpCompress", "SharpCompress.Common.Tar.Headers.TarHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.CryptoMode,SharpCompress", "SharpCompress.Common.Zip.CryptoMode");
            feature.AddKnownType("SharpCompress.Common.Zip.PkwareTraditionalCryptoStream,SharpCompress", "SharpCompress.Common.Zip.PkwareTraditionalCryptoStream");
            feature.AddKnownType("SharpCompress.Common.Zip.PkwareTraditionalEncryptionData,SharpCompress", "SharpCompress.Common.Zip.PkwareTraditionalEncryptionData");
            feature.AddKnownType("SharpCompress.Common.Zip.SeekableZipFilePart,SharpCompress", "SharpCompress.Common.Zip.SeekableZipFilePart");
            feature.AddKnownType("SharpCompress.Common.Zip.SeekableZipHeaderFactory,SharpCompress", "SharpCompress.Common.Zip.SeekableZipHeaderFactory");
            feature.AddKnownType("SharpCompress.Common.Zip.StreamingZipFilePart,SharpCompress", "SharpCompress.Common.Zip.StreamingZipFilePart");
            feature.AddKnownType("SharpCompress.Common.Zip.StreamingZipHeaderFactory,SharpCompress", "SharpCompress.Common.Zip.StreamingZipHeaderFactory");
            feature.AddKnownType("SharpCompress.Common.Zip.WinzipAesCryptoStream,SharpCompress", "SharpCompress.Common.Zip.WinzipAesCryptoStream");
            feature.AddKnownType("SharpCompress.Common.Zip.WinzipAesEncryptionData,SharpCompress", "SharpCompress.Common.Zip.WinzipAesEncryptionData");
            feature.AddKnownType("SharpCompress.Common.Zip.WinzipAesKeySize,SharpCompress", "SharpCompress.Common.Zip.WinzipAesKeySize");
            feature.AddKnownType("SharpCompress.Common.Zip.ZipCompressionMethod,SharpCompress", "SharpCompress.Common.Zip.ZipCompressionMethod");
            feature.AddKnownType("SharpCompress.Common.Zip.ZipEntry,SharpCompress", "SharpCompress.Common.Zip.ZipEntry");
            feature.AddKnownType("SharpCompress.Common.Zip.ZipFilePart,SharpCompress", "SharpCompress.Common.Zip.ZipFilePart");
            feature.AddKnownType("SharpCompress.Common.Zip.ZipHeaderFactory,SharpCompress", "SharpCompress.Common.Zip.ZipHeaderFactory");
            feature.AddKnownType("SharpCompress.Common.Zip.ZipVolume,SharpCompress", "SharpCompress.Common.Zip.ZipVolume");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.DirectoryEndHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.DirectoryEndHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.DirectoryEntryHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.DirectoryEntryHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.HeaderFlags,SharpCompress", "SharpCompress.Common.Zip.Headers.HeaderFlags");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.IgnoreHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.IgnoreHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.LocalEntryHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.LocalEntryHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ExtraDataType,SharpCompress", "SharpCompress.Common.Zip.Headers.ExtraDataType");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ExtraData,SharpCompress", "SharpCompress.Common.Zip.Headers.ExtraData");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ExtraUnicodePathExtraField,SharpCompress", "SharpCompress.Common.Zip.Headers.ExtraUnicodePathExtraField");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.Zip64ExtendedInformationExtraField,SharpCompress", "SharpCompress.Common.Zip.Headers.Zip64ExtendedInformationExtraField");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.SplitHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.SplitHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.Zip64DirectoryEndHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.Zip64DirectoryEndHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.Zip64DirectoryEndLocatorHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.Zip64DirectoryEndLocatorHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ZipFileEntry,SharpCompress", "SharpCompress.Common.Zip.Headers.ZipFileEntry");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ZipHeader,SharpCompress", "SharpCompress.Common.Zip.Headers.ZipHeader");
            feature.AddKnownType("SharpCompress.Common.Zip.Headers.ZipHeaderType,SharpCompress", "SharpCompress.Common.Zip.Headers.ZipHeaderType");
            feature.AddKnownType("SharpCompress.Compressors.CompressionMode,SharpCompress", "SharpCompress.Compressors.CompressionMode");
            feature.AddKnownType("SharpCompress.Compressors.ADC.ADCStream,SharpCompress", "SharpCompress.Compressors.ADC.ADCStream");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.BZip2Constants,SharpCompress", "SharpCompress.Compressors.BZip2.BZip2Constants");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.BZip2Stream,SharpCompress", "SharpCompress.Compressors.BZip2.BZip2Stream");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.CBZip2InputStream,SharpCompress", "SharpCompress.Compressors.BZip2.CBZip2InputStream");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.CBZip2OutputStream,SharpCompress", "SharpCompress.Compressors.BZip2.CBZip2OutputStream");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.CBZip2OutputStream+StackElem,SharpCompress", "SharpCompress.Compressors.BZip2.StackElem");
            feature.AddKnownType("SharpCompress.Compressors.BZip2.CRC,SharpCompress", "SharpCompress.Compressors.BZip2.CRC");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.CRC32,SharpCompress", "SharpCompress.Compressors.Deflate.CRC32");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateManager,SharpCompress", "SharpCompress.Compressors.Deflate.DeflateManager");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateManager+BlockState,SharpCompress", "SharpCompress.Compressors.Deflate.BlockState");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateManager+DeflateFlavor,SharpCompress", "SharpCompress.Compressors.Deflate.DeflateFlavor");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateManager+Config,SharpCompress", "SharpCompress.Compressors.Deflate.Config");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateManager+Tree,SharpCompress", "SharpCompress.Compressors.Deflate.Tree");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.DeflateStream,SharpCompress", "SharpCompress.Compressors.Deflate.DeflateStream");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.FlushType,SharpCompress", "SharpCompress.Compressors.Deflate.FlushType");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.GZipStream,SharpCompress", "SharpCompress.Compressors.Deflate.GZipStream");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InflateBlocks,SharpCompress", "SharpCompress.Compressors.Deflate.InflateBlocks");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InflateBlocks+InflateBlockMode,SharpCompress", "SharpCompress.Compressors.Deflate.InflateBlockMode");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InflateCodes,SharpCompress", "SharpCompress.Compressors.Deflate.InflateCodes");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InflateManager,SharpCompress", "SharpCompress.Compressors.Deflate.InflateManager");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InflateManager+InflateManagerMode,SharpCompress", "SharpCompress.Compressors.Deflate.InflateManagerMode");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.InfTree,SharpCompress", "SharpCompress.Compressors.Deflate.InfTree");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.CompressionLevel,SharpCompress", "SharpCompress.Compressors.Deflate.CompressionLevel");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.CompressionStrategy,SharpCompress", "SharpCompress.Compressors.Deflate.CompressionStrategy");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibException,SharpCompress", "SharpCompress.Compressors.Deflate.ZlibException");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.SharedUtils,SharpCompress", "SharpCompress.Compressors.Deflate.SharedUtils");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.StaticTree,SharpCompress", "SharpCompress.Compressors.Deflate.StaticTree");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.Adler,SharpCompress", "SharpCompress.Compressors.Deflate.Adler");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibStreamFlavor,SharpCompress", "SharpCompress.Compressors.Deflate.ZlibStreamFlavor");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibBaseStream,SharpCompress", "SharpCompress.Compressors.Deflate.ZlibBaseStream");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibBaseStream+StreamMode,SharpCompress", "SharpCompress.Compressors.Deflate.StreamMode");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibCodec,SharpCompress", "SharpCompress.Compressors.Deflate.ZlibCodec");
            feature.AddKnownType("SharpCompress.Compressors.Deflate.ZlibStream,SharpCompress", "SharpCompress.Compressors.Deflate.ZlibStream");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.BlockType,SharpCompress", "SharpCompress.Compressors.Deflate64.BlockType");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.Deflate64Stream,SharpCompress", "SharpCompress.Compressors.Deflate64.Deflate64Stream");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.DeflateInput,SharpCompress", "SharpCompress.Compressors.Deflate64.DeflateInput");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.DeflateInput+InputState,SharpCompress", "SharpCompress.Compressors.Deflate64.InputState");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.HuffmanTree,SharpCompress", "SharpCompress.Compressors.Deflate64.HuffmanTree");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.InflaterManaged,SharpCompress", "SharpCompress.Compressors.Deflate64.InflaterManaged");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.InflaterState,SharpCompress", "SharpCompress.Compressors.Deflate64.InflaterState");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.InputBuffer,SharpCompress", "SharpCompress.Compressors.Deflate64.InputBuffer");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.Match,SharpCompress", "SharpCompress.Compressors.Deflate64.Match");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.MatchState,SharpCompress", "SharpCompress.Compressors.Deflate64.MatchState");
            feature.AddKnownType("SharpCompress.Compressors.Deflate64.OutputWindow,SharpCompress", "SharpCompress.Compressors.Deflate64.OutputWindow");
            feature.AddKnownType("SharpCompress.Compressors.Filters.BCJ2Filter,SharpCompress", "SharpCompress.Compressors.Filters.BCJ2Filter");
            feature.AddKnownType("SharpCompress.Compressors.Filters.BCJFilter,SharpCompress", "SharpCompress.Compressors.Filters.BCJFilter");
            feature.AddKnownType("SharpCompress.Compressors.Filters.Filter,SharpCompress", "SharpCompress.Compressors.Filters.Filter");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.AesDecoderStream,SharpCompress", "SharpCompress.Compressors.LZMA.AesDecoderStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Bcj2DecoderStream,SharpCompress", "SharpCompress.Compressors.LZMA.Bcj2DecoderStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Bcj2DecoderStream+RangeDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Bcj2DecoderStream+StatusDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.StatusDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.BitVector,SharpCompress", "SharpCompress.Compressors.LZMA.BitVector");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.DecoderStream2,SharpCompress", "SharpCompress.Compressors.LZMA.DecoderStream2");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.DataErrorException,SharpCompress", "SharpCompress.Compressors.LZMA.DataErrorException");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.InvalidParamException,SharpCompress", "SharpCompress.Compressors.LZMA.InvalidParamException");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.ICodeProgress,SharpCompress", "SharpCompress.Compressors.LZMA.ICodeProgress");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.ICoder,SharpCompress", "SharpCompress.Compressors.LZMA.ICoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.CoderPropId,SharpCompress", "SharpCompress.Compressors.LZMA.CoderPropId");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.ISetCoderProperties,SharpCompress", "SharpCompress.Compressors.LZMA.ISetCoderProperties");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.IWriteCoderProperties,SharpCompress", "SharpCompress.Compressors.LZMA.IWriteCoderProperties");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.ISetDecoderProperties,SharpCompress", "SharpCompress.Compressors.LZMA.ISetDecoderProperties");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LZipStream,SharpCompress", "SharpCompress.Compressors.LZMA.LZipStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Base,SharpCompress", "SharpCompress.Compressors.LZMA.Base");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Base+State,SharpCompress", "SharpCompress.Compressors.LZMA.SharpCompress.Compressors.LZMA.Base.State");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Decoder,SharpCompress", "SharpCompress.Compressors.LZMA.Decoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Decoder+LenDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.LenDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Decoder+LiteralDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.LiteralDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Decoder+LiteralDecoder+Decoder2,SharpCompress", "SharpCompress.Compressors.LZMA.Decoder2");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder,SharpCompress", "SharpCompress.Compressors.LZMA.Encoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+EMatchFinderType,SharpCompress", "SharpCompress.Compressors.LZMA.EMatchFinderType");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+LiteralEncoder,SharpCompress", "SharpCompress.Compressors.LZMA.LiteralEncoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+LiteralEncoder+Encoder2,SharpCompress", "SharpCompress.Compressors.LZMA.SharpCompress.Compressors.LZMA.LiteralEncoder.Encoder2");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+LenEncoder,SharpCompress", "SharpCompress.Compressors.LZMA.LenEncoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+LenPriceTableEncoder,SharpCompress", "SharpCompress.Compressors.LZMA.LenPriceTableEncoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Encoder+Optimal,SharpCompress", "SharpCompress.Compressors.LZMA.Optimal");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LzmaEncoderProperties,SharpCompress", "SharpCompress.Compressors.LZMA.LzmaEncoderProperties");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LzmaStream,SharpCompress", "SharpCompress.Compressors.LZMA.LzmaStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LZ.BinTree,SharpCompress", "SharpCompress.Compressors.LZMA.LZ.BinTree");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LZ.InWindow,SharpCompress", "SharpCompress.Compressors.LZMA.LZ.InWindow");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.LZ.OutWindow,SharpCompress", "SharpCompress.Compressors.LZMA.LZ.OutWindow");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.Encoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.Encoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.Decoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.Decoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.BitEncoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.BitEncoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.BitDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.BitDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.BitTreeEncoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.BitTreeEncoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.RangeCoder.BitTreeDecoder,SharpCompress", "SharpCompress.Compressors.LZMA.RangeCoder.BitTreeDecoder");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Utilites.CrcBuilderStream,SharpCompress", "SharpCompress.Compressors.LZMA.Utilites.CrcBuilderStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Utilites.CrcCheckStream,SharpCompress", "SharpCompress.Compressors.LZMA.Utilites.CrcCheckStream");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Utilites.IPasswordProvider,SharpCompress", "SharpCompress.Compressors.LZMA.Utilites.IPasswordProvider");
            feature.AddKnownType("SharpCompress.Compressors.LZMA.Utilites.BlockType,SharpCompress", "SharpCompress.Compressors.LZMA.Utilites.BlockType");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.PpmdProperties,SharpCompress", "SharpCompress.Compressors.PPMd.PpmdProperties");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.PpmdStream,SharpCompress", "SharpCompress.Compressors.PPMd.PpmdStream");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.PpmdVersion,SharpCompress", "SharpCompress.Compressors.PPMd.PpmdVersion");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.FreqData,SharpCompress", "SharpCompress.Compressors.PPMd.H.FreqData");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.ModelPpm,SharpCompress", "SharpCompress.Compressors.PPMd.H.ModelPpm");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.Pointer,SharpCompress", "SharpCompress.Compressors.PPMd.H.Pointer");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.PpmContext,SharpCompress", "SharpCompress.Compressors.PPMd.H.PpmContext");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.RangeCoder,SharpCompress", "SharpCompress.Compressors.PPMd.H.RangeCoder");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.SubRange,SharpCompress", "SharpCompress.Compressors.PPMd.H.SubRange");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.RarMemBlock,SharpCompress", "SharpCompress.Compressors.PPMd.H.RarMemBlock");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.RarNode,SharpCompress", "SharpCompress.Compressors.PPMd.H.RarNode");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.See2Context,SharpCompress", "SharpCompress.Compressors.PPMd.H.See2Context");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.State,SharpCompress", "SharpCompress.Compressors.PPMd.H.State");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.StateRef,SharpCompress", "SharpCompress.Compressors.PPMd.H.StateRef");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.H.SubAllocator,SharpCompress", "SharpCompress.Compressors.PPMd.H.SubAllocator");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.Allocator,SharpCompress", "SharpCompress.Compressors.PPMd.I1.Allocator");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.Coder,SharpCompress", "SharpCompress.Compressors.PPMd.I1.Coder");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.MemoryNode,SharpCompress", "SharpCompress.Compressors.PPMd.I1.MemoryNode");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.Model,SharpCompress", "SharpCompress.Compressors.PPMd.I1.Model");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.Model+PpmContext,SharpCompress", "SharpCompress.Compressors.PPMd.I1.PpmContext");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.ModelRestorationMethod,SharpCompress", "SharpCompress.Compressors.PPMd.I1.ModelRestorationMethod");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.Pointer,SharpCompress", "SharpCompress.Compressors.PPMd.I1.Pointer");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.PpmState,SharpCompress", "SharpCompress.Compressors.PPMd.I1.PpmState");
            feature.AddKnownType("SharpCompress.Compressors.PPMd.I1.See2Context,SharpCompress", "SharpCompress.Compressors.PPMd.I1.See2Context");
            feature.AddKnownType("SharpCompress.Compressors.Rar.IRarUnpack,SharpCompress", "SharpCompress.Compressors.Rar.IRarUnpack");
            feature.AddKnownType("SharpCompress.Compressors.Rar.MultiVolumeReadOnlyStream,SharpCompress", "SharpCompress.Compressors.Rar.MultiVolumeReadOnlyStream");
            feature.AddKnownType("SharpCompress.Compressors.Rar.RarCrcStream,SharpCompress", "SharpCompress.Compressors.Rar.RarCrcStream");
            feature.AddKnownType("SharpCompress.Compressors.Rar.RarStream,SharpCompress", "SharpCompress.Compressors.Rar.RarStream");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Unpack,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Unpack");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.UnpackFilter,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.UnpackFilter");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.AudioVariables,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.AudioVariables");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.BitDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.BitDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.CodeType,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.CodeType");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.Decode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.Decode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.DistDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.DistDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.FilterType,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.FilterType");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.LitDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.LitDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.LowDistDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.LowDistDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.MultDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.MultDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.Decode.RepDecode,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.Decode.RepDecode");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV1.PPM.BlockTypes,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV1.PPM.BlockTypes");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.BitInput,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.BitInput");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.FragmentedWindow,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.FragmentedWindow");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.Unpack,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.Unpack");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.DecodeTable,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.DecodeTable");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.UnpackBlockHeader,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.UnpackBlockHeader");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.UnpackBlockTables,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.UnpackBlockTables");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.UnpackFilter,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.UnpackFilter");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.UnpackFilter30,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.UnpackFilter30");
            feature.AddKnownType("SharpCompress.Compressors.Rar.UnpackV2017.AudioVariables,SharpCompress", "SharpCompress.Compressors.Rar.UnpackV2017.AudioVariables");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.BitInput,SharpCompress", "SharpCompress.Compressors.Rar.VM.BitInput");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.RarVM,SharpCompress", "SharpCompress.Compressors.Rar.VM.RarVM");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMCmdFlags,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMCmdFlags");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMCommands,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMCommands");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMFlags,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMFlags");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMOpType,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMOpType");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMPreparedCommand,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMPreparedCommand");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMPreparedOperand,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMPreparedOperand");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMPreparedProgram,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMPreparedProgram");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMStandardFilters,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMStandardFilters");
            feature.AddKnownType("SharpCompress.Compressors.Rar.VM.VMStandardFilterSignature,SharpCompress", "SharpCompress.Compressors.Rar.VM.VMStandardFilterSignature");
            feature.AddKnownType("SharpCompress.Compressors.Xz.CheckType,SharpCompress", "SharpCompress.Compressors.Xz.CheckType");
            feature.AddKnownType("SharpCompress.Compressors.Xz.ReadOnlyStream,SharpCompress", "SharpCompress.Compressors.Xz.ReadOnlyStream");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZBlock,SharpCompress", "SharpCompress.Compressors.Xz.XZBlock");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZFooter,SharpCompress", "SharpCompress.Compressors.Xz.XZFooter");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZHeader,SharpCompress", "SharpCompress.Compressors.Xz.XZHeader");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZIndex,SharpCompress", "SharpCompress.Compressors.Xz.XZIndex");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZIndexMarkerReachedException,SharpCompress", "SharpCompress.Compressors.Xz.XZIndexMarkerReachedException");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZIndexRecord,SharpCompress", "SharpCompress.Compressors.Xz.XZIndexRecord");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZReadOnlyStream,SharpCompress", "SharpCompress.Compressors.Xz.XZReadOnlyStream");
            feature.AddKnownType("SharpCompress.Compressors.Xz.XZStream,SharpCompress", "SharpCompress.Compressors.Xz.XZStream");
            feature.AddKnownType("SharpCompress.Compressors.Xz.Filters.BlockFilter,SharpCompress", "SharpCompress.Compressors.Xz.Filters.BlockFilter");
            feature.AddKnownType("SharpCompress.Compressors.Xz.Filters.BlockFilter+FilterTypes,SharpCompress", "SharpCompress.Compressors.Xz.Filters.SharpCompress.Compressors.Xz.Filters.BlockFilter.FilterTypes");
            feature.AddKnownType("SharpCompress.Compressors.Xz.Filters.Lzma2Filter,SharpCompress", "SharpCompress.Compressors.Xz.Filters.Lzma2Filter");
            feature.AddKnownType("SharpCompress.Converters.DataConverter,SharpCompress", "SharpCompress.Converters.DataConverter");
            feature.AddKnownType("SharpCompress.Converters.DataConverter+CopyConverter,SharpCompress", "SharpCompress.Converters.CopyConverter");
            feature.AddKnownType("SharpCompress.Converters.DataConverter+SwapConverter,SharpCompress", "SharpCompress.Converters.SwapConverter");
            feature.AddKnownType("SharpCompress.Crypto.Crc32Stream,SharpCompress", "SharpCompress.Crypto.Crc32Stream");
            feature.AddKnownType("SharpCompress.Crypto.CryptoException,SharpCompress", "SharpCompress.Crypto.CryptoException");
            feature.AddKnownType("SharpCompress.Crypto.DataLengthException,SharpCompress", "SharpCompress.Crypto.DataLengthException");
            feature.AddKnownType("SharpCompress.Crypto.IBlockCipher,SharpCompress", "SharpCompress.Crypto.IBlockCipher");
            feature.AddKnownType("SharpCompress.Crypto.ICipherParameters,SharpCompress", "SharpCompress.Crypto.ICipherParameters");
            feature.AddKnownType("SharpCompress.Crypto.KeyParameter,SharpCompress", "SharpCompress.Crypto.KeyParameter");
            feature.AddKnownType("SharpCompress.Crypto.RijndaelEngine,SharpCompress", "SharpCompress.Crypto.RijndaelEngine");
            feature.AddKnownType("SharpCompress.IO.BufferedSubStream,SharpCompress", "SharpCompress.IO.BufferedSubStream");
            feature.AddKnownType("SharpCompress.IO.CountingWritableSubStream,SharpCompress", "SharpCompress.IO.CountingWritableSubStream");
            feature.AddKnownType("SharpCompress.IO.ListeningStream,SharpCompress", "SharpCompress.IO.ListeningStream");
            feature.AddKnownType("SharpCompress.IO.MarkingBinaryReader,SharpCompress", "SharpCompress.IO.MarkingBinaryReader");
            feature.AddKnownType("SharpCompress.IO.NonDisposingStream,SharpCompress", "SharpCompress.IO.NonDisposingStream");
            feature.AddKnownType("SharpCompress.IO.ReadOnlySubStream,SharpCompress", "SharpCompress.IO.ReadOnlySubStream");
            feature.AddKnownType("SharpCompress.IO.RewindableStream,SharpCompress", "SharpCompress.IO.RewindableStream");
            feature.AddKnownType("SharpCompress.IO.StreamingMode,SharpCompress", "SharpCompress.IO.StreamingMode");
            feature.AddKnownType("SharpCompress.Readers.AbstractReader`2,SharpCompress", "SharpCompress.Readers.AbstractReader`2'2");
            feature.AddKnownType("SharpCompress.Readers.IReader,SharpCompress", "SharpCompress.Readers.IReader");
            feature.AddKnownType("SharpCompress.Readers.IReaderExtractionListener,SharpCompress", "SharpCompress.Readers.IReaderExtractionListener");
            feature.AddKnownType("SharpCompress.Readers.ReaderOptions,SharpCompress", "SharpCompress.Readers.ReaderOptions");
            feature.AddKnownType("SharpCompress.Readers.ReaderProgress,SharpCompress", "SharpCompress.Readers.ReaderProgress");
            feature.AddKnownType("SharpCompress.Readers.GZip.GZipReader,SharpCompress", "SharpCompress.Readers.GZip.GZipReader");
            feature.AddKnownType("SharpCompress.Readers.Rar.MultiVolumeRarReader,SharpCompress", "SharpCompress.Readers.Rar.MultiVolumeRarReader");
            feature.AddKnownType("SharpCompress.Readers.Rar.MultiVolumeRarReader+MultiVolumeStreamEnumerator,SharpCompress", "SharpCompress.Readers.Rar.MultiVolumeStreamEnumerator");
            feature.AddKnownType("SharpCompress.Readers.Rar.NonSeekableStreamFilePart,SharpCompress", "SharpCompress.Readers.Rar.NonSeekableStreamFilePart");
            feature.AddKnownType("SharpCompress.Readers.Rar.RarReader,SharpCompress", "SharpCompress.Readers.Rar.RarReader");
            feature.AddKnownType("SharpCompress.Readers.Rar.RarReaderEntry,SharpCompress", "SharpCompress.Readers.Rar.RarReaderEntry");
            feature.AddKnownType("SharpCompress.Readers.Rar.RarReaderVolume,SharpCompress", "SharpCompress.Readers.Rar.RarReaderVolume");
            feature.AddKnownType("SharpCompress.Readers.Rar.SingleVolumeRarReader,SharpCompress", "SharpCompress.Readers.Rar.SingleVolumeRarReader");
            feature.AddKnownType("SharpCompress.Readers.Tar.TarReader,SharpCompress", "SharpCompress.Readers.Tar.TarReader");
            feature.AddKnownType("SharpCompress.Readers.Zip.ZipReader,SharpCompress", "SharpCompress.Readers.Zip.ZipReader");
            feature.AddKnownType("SharpCompress.Writers.AbstractWriter,SharpCompress", "SharpCompress.Writers.AbstractWriter");
            feature.AddKnownType("SharpCompress.Writers.IWriter,SharpCompress", "SharpCompress.Writers.IWriter");
            feature.AddKnownType("SharpCompress.Writers.WriterOptions,SharpCompress", "SharpCompress.Writers.WriterOptions");
            feature.AddKnownType("SharpCompress.Writers.GZip.GZipWriter,SharpCompress", "SharpCompress.Writers.GZip.GZipWriter");
            feature.AddKnownType("SharpCompress.Writers.GZip.GZipWriterOptions,SharpCompress", "SharpCompress.Writers.GZip.GZipWriterOptions");
            feature.AddKnownType("SharpCompress.Writers.Tar.TarWriter,SharpCompress", "SharpCompress.Writers.Tar.TarWriter");
            feature.AddKnownType("SharpCompress.Writers.Tar.TarWriterOptions,SharpCompress", "SharpCompress.Writers.Tar.TarWriterOptions");
            feature.AddKnownType("SharpCompress.Writers.Zip.ZipCentralDirectoryEntry,SharpCompress", "SharpCompress.Writers.Zip.ZipCentralDirectoryEntry");
            feature.AddKnownType("SharpCompress.Writers.Zip.ZipWriter,SharpCompress", "SharpCompress.Writers.Zip.ZipWriter");
            feature.AddKnownType("SharpCompress.Writers.Zip.ZipWriter+ZipWritingStream,SharpCompress", "SharpCompress.Writers.Zip.ZipWritingStream");
            feature.AddKnownType("SharpCompress.Writers.Zip.ZipWriterEntryOptions,SharpCompress", "SharpCompress.Writers.Zip.ZipWriterEntryOptions");
            feature.AddKnownType("SharpCompress.Writers.Zip.ZipWriterOptions,SharpCompress", "SharpCompress.Writers.Zip.ZipWriterOptions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Concurrent", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Concurrent.BlockingCollection`1", "BlockingCollection`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentBag`1", "ConcurrentBag`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentDictionary`2", "ConcurrentDictionary`2'2");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentQueue`1", "ConcurrentQueue`1'1");
            feature.AddKnownType("System.Collections.Concurrent.ConcurrentStack`1", "ConcurrentStack`1'1");
            feature.AddKnownType("System.Collections.Concurrent.EnumerablePartitionerOptions", "EnumerablePartitionerOptions");
            feature.AddKnownType("System.Collections.Concurrent.IProducerConsumerCollection`1", "IProducerConsumerCollection`1'1");
            feature.AddKnownType("System.Collections.Concurrent.OrderablePartitioner`1", "OrderablePartitioner`1'1");
            feature.AddKnownType("System.Collections.Concurrent.Partitioner`1", "Partitioner`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.BitArray", "BitArray");
            feature.AddKnownType("System.Collections.Generic.Comparer`1", "Comparer`1'1");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2", "Dictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+Enumerator", "Dictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+KeyCollection", "Dictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator", "Dictionary`2'2.KeyCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+ValueCollection", "Dictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator", "Dictionary`2'2.ValueCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.EqualityComparer`1", "EqualityComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.HashSet`1", "HashSet`1'1");
            feature.AddKnownType("System.Collections.Generic.HashSet`1+Enumerator", "HashSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.LinkedListNode`1", "LinkedListNode`1'1");
            feature.AddKnownType("System.Collections.Generic.LinkedList`1", "LinkedList`1'1");
            feature.AddKnownType("System.Collections.Generic.LinkedList`1+Enumerator", "LinkedList`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.List`1", "List`1'1");
            feature.AddKnownType("System.Collections.Generic.List`1+Enumerator", "List`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.Queue`1", "Queue`1'1");
            feature.AddKnownType("System.Collections.Generic.Queue`1+Enumerator", "Queue`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.ReferenceEqualityComparer", "ReferenceEqualityComparer");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2", "SortedDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+Enumerator", "SortedDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+KeyCollection", "SortedDictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator", "SortedDictionary`2'2.KeyCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+ValueCollection", "SortedDictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator", "SortedDictionary`2'2.ValueCollection'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Generic.SortedList`2", "SortedList`2'2");
            feature.AddKnownType("System.Collections.Generic.SortedSet`1", "SortedSet`1'1");
            feature.AddKnownType("System.Collections.Generic.SortedSet`1+Enumerator", "SortedSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Generic.Stack`1", "Stack`1'1");
            feature.AddKnownType("System.Collections.Generic.Stack`1+Enumerator", "Stack`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Immutable", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Immutable.IImmutableDictionary`2", "IImmutableDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.IImmutableList`1", "IImmutableList`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableQueue`1", "IImmutableQueue`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableSet`1", "IImmutableSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.IImmutableStack`1", "IImmutableStack`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1", "ImmutableArray`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1+Builder", "ImmutableArray`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableArray`1+Enumerator", "ImmutableArray`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2", "ImmutableDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2+Builder", "ImmutableDictionary`2'2.Builder'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableDictionary`2+Enumerator", "ImmutableDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1", "ImmutableHashSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1+Builder", "ImmutableHashSet`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableHashSet`1+Enumerator", "ImmutableHashSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1", "ImmutableList`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1+Builder", "ImmutableList`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableList`1+Enumerator", "ImmutableList`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableQueue`1", "ImmutableQueue`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableQueue`1+Enumerator", "ImmutableQueue`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2", "ImmutableSortedDictionary`2'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2+Builder", "ImmutableSortedDictionary`2'2.Builder'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator", "ImmutableSortedDictionary`2'2.Enumerator'2");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1", "ImmutableSortedSet`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1+Builder", "ImmutableSortedSet`1'1.Builder'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableSortedSet`1+Enumerator", "ImmutableSortedSet`1'1.Enumerator'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableStack`1", "ImmutableStack`1'1");
            feature.AddKnownType("System.Collections.Immutable.ImmutableStack`1+Enumerator", "ImmutableStack`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.NonGeneric", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.CaseInsensitiveComparer", "CaseInsensitiveComparer");
            feature.AddKnownType("System.Collections.CaseInsensitiveHashCodeProvider", "CaseInsensitiveHashCodeProvider");
            feature.AddKnownType("System.Collections.CollectionBase", "CollectionBase");
            feature.AddKnownType("System.Collections.DictionaryBase", "DictionaryBase");
            feature.AddKnownType("System.Collections.Queue", "Queue");
            feature.AddKnownType("System.Collections.ReadOnlyCollectionBase", "ReadOnlyCollectionBase");
            feature.AddKnownType("System.Collections.SortedList", "SortedList");
            feature.AddKnownType("System.Collections.Stack", "Stack");
            feature.AddKnownType("System.Collections.Specialized.CollectionsUtil", "CollectionsUtil");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Collections.Specialized", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.Specialized.BitVector32", "BitVector32");
            feature.AddKnownType("System.Collections.Specialized.BitVector32+Section", "BitVector32.Section");
            feature.AddKnownType("System.Collections.Specialized.HybridDictionary", "HybridDictionary");
            feature.AddKnownType("System.Collections.Specialized.IOrderedDictionary", "IOrderedDictionary");
            feature.AddKnownType("System.Collections.Specialized.ListDictionary", "ListDictionary");
            feature.AddKnownType("System.Collections.Specialized.NameObjectCollectionBase", "NameObjectCollectionBase");
            feature.AddKnownType("System.Collections.Specialized.NameObjectCollectionBase+KeysCollection", "NameObjectCollectionBase.KeysCollection");
            feature.AddKnownType("System.Collections.Specialized.NameValueCollection", "NameValueCollection");
            feature.AddKnownType("System.Collections.Specialized.OrderedDictionary", "OrderedDictionary");
            feature.AddKnownType("System.Collections.Specialized.StringCollection", "StringCollection");
            feature.AddKnownType("System.Collections.Specialized.StringDictionary", "StringDictionary");
            feature.AddKnownType("System.Collections.Specialized.StringEnumerator", "StringEnumerator");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.Annotations", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider", "AssociatedMetadataTypeTypeDescriptionProvider");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.AssociationAttribute", "AssociationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CompareAttribute", "CompareAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute", "ConcurrencyCheckAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CreditCardAttribute", "CreditCardAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.CustomValidationAttribute", "CustomValidationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DataType", "DataType");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DataTypeAttribute", "DataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayAttribute", "DisplayAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayColumnAttribute", "DisplayColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.DisplayFormatAttribute", "DisplayFormatAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EditableAttribute", "EditableAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EmailAddressAttribute", "EmailAddressAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.EnumDataTypeAttribute", "EnumDataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.FileExtensionsAttribute", "FileExtensionsAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.FilterUIHintAttribute", "FilterUIHintAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.IValidatableObject", "IValidatableObject");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.KeyAttribute", "KeyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MaxLengthAttribute", "MaxLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MetadataTypeAttribute", "MetadataTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.MinLengthAttribute", "MinLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.PhoneAttribute", "PhoneAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RangeAttribute", "RangeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RegularExpressionAttribute", "RegularExpressionAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.RequiredAttribute", "RequiredAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute", "ScaffoldColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.StringLengthAttribute", "StringLengthAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.TimestampAttribute", "TimestampAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.UIHintAttribute", "UIHintAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.UrlAttribute", "UrlAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationAttribute", "ValidationAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationContext", "ValidationContext");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationException", "ValidationException");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.ValidationResult", "ValidationResult");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ColumnAttribute", "ColumnAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute", "ComplexTypeAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute", "DatabaseGeneratedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption", "DatabaseGeneratedOption");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute", "ForeignKeyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute", "InversePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute", "NotMappedAttribute");
            feature.AddKnownType("System.ComponentModel.DataAnnotations.Schema.TableAttribute", "TableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IServiceProvider", "IServiceProvider");
            feature.AddKnownType("System.ComponentModel.CancelEventArgs", "CancelEventArgs");
            feature.AddKnownType("System.ComponentModel.IChangeTracking", "IChangeTracking");
            feature.AddKnownType("System.ComponentModel.IEditableObject", "IEditableObject");
            feature.AddKnownType("System.ComponentModel.IRevertibleChangeTracking", "IRevertibleChangeTracking");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.EventBasedAsync", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.AsyncCompletedEventArgs", "AsyncCompletedEventArgs");
            feature.AddKnownType("System.ComponentModel.AsyncOperation", "AsyncOperation");
            feature.AddKnownType("System.ComponentModel.BackgroundWorker", "BackgroundWorker");
            feature.AddKnownType("System.ComponentModel.DoWorkEventArgs", "DoWorkEventArgs");
            feature.AddKnownType("System.ComponentModel.ProgressChangedEventArgs", "ProgressChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.RunWorkerCompletedEventArgs", "RunWorkerCompletedEventArgs");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ComponentModel.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ComponentModel.BrowsableAttribute", "BrowsableAttribute");
            feature.AddKnownType("System.ComponentModel.CategoryAttribute", "CategoryAttribute");
            feature.AddKnownType("System.ComponentModel.Component", "Component");
            feature.AddKnownType("System.ComponentModel.ComponentCollection", "ComponentCollection");
            feature.AddKnownType("System.ComponentModel.DescriptionAttribute", "DescriptionAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerAttribute", "DesignerAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerCategoryAttribute", "DesignerCategoryAttribute");
            feature.AddKnownType("System.ComponentModel.DesignerSerializationVisibility", "DesignerSerializationVisibility");
            feature.AddKnownType("System.ComponentModel.DesignerSerializationVisibilityAttribute", "DesignerSerializationVisibilityAttribute");
            feature.AddKnownType("System.ComponentModel.DesignOnlyAttribute", "DesignOnlyAttribute");
            feature.AddKnownType("System.ComponentModel.DisplayNameAttribute", "DisplayNameAttribute");
            feature.AddKnownType("System.ComponentModel.EditorAttribute", "EditorAttribute");
            feature.AddKnownType("System.ComponentModel.EventHandlerList", "EventHandlerList");
            feature.AddKnownType("System.ComponentModel.IComponent", "IComponent");
            feature.AddKnownType("System.ComponentModel.IContainer", "IContainer");
            feature.AddKnownType("System.ComponentModel.ImmutableObjectAttribute", "ImmutableObjectAttribute");
            feature.AddKnownType("System.ComponentModel.InitializationEventAttribute", "InitializationEventAttribute");
            feature.AddKnownType("System.ComponentModel.InvalidAsynchronousStateException", "InvalidAsynchronousStateException");
            feature.AddKnownType("System.ComponentModel.InvalidEnumArgumentException", "InvalidEnumArgumentException");
            feature.AddKnownType("System.ComponentModel.ISite", "ISite");
            feature.AddKnownType("System.ComponentModel.ISupportInitialize", "ISupportInitialize");
            feature.AddKnownType("System.ComponentModel.ISynchronizeInvoke", "ISynchronizeInvoke");
            feature.AddKnownType("System.ComponentModel.LocalizableAttribute", "LocalizableAttribute");
            feature.AddKnownType("System.ComponentModel.MergablePropertyAttribute", "MergablePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.NotifyParentPropertyAttribute", "NotifyParentPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.ParenthesizePropertyNameAttribute", "ParenthesizePropertyNameAttribute");
            feature.AddKnownType("System.ComponentModel.ReadOnlyAttribute", "ReadOnlyAttribute");
            feature.AddKnownType("System.ComponentModel.RefreshProperties", "RefreshProperties");
            feature.AddKnownType("System.ComponentModel.RefreshPropertiesAttribute", "RefreshPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DesignerSerializerAttribute", "DesignerSerializerAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.UriTypeConverter", "UriTypeConverter");
            feature.AddKnownType("System.ComponentModel.AddingNewEventArgs", "AddingNewEventArgs");
            feature.AddKnownType("System.ComponentModel.AmbientValueAttribute", "AmbientValueAttribute");
            feature.AddKnownType("System.ComponentModel.ArrayConverter", "ArrayConverter");
            feature.AddKnownType("System.ComponentModel.AttributeCollection", "AttributeCollection");
            feature.AddKnownType("System.ComponentModel.AttributeProviderAttribute", "AttributeProviderAttribute");
            feature.AddKnownType("System.ComponentModel.BaseNumberConverter", "BaseNumberConverter");
            feature.AddKnownType("System.ComponentModel.BindableAttribute", "BindableAttribute");
            feature.AddKnownType("System.ComponentModel.BindableSupport", "BindableSupport");
            feature.AddKnownType("System.ComponentModel.BindingDirection", "BindingDirection");
            feature.AddKnownType("System.ComponentModel.BindingList`1", "BindingList`1'1");
            feature.AddKnownType("System.ComponentModel.BooleanConverter", "BooleanConverter");
            feature.AddKnownType("System.ComponentModel.ByteConverter", "ByteConverter");
            feature.AddKnownType("System.ComponentModel.CharConverter", "CharConverter");
            feature.AddKnownType("System.ComponentModel.CollectionChangeAction", "CollectionChangeAction");
            feature.AddKnownType("System.ComponentModel.CollectionChangeEventArgs", "CollectionChangeEventArgs");
            feature.AddKnownType("System.ComponentModel.CollectionConverter", "CollectionConverter");
            feature.AddKnownType("System.ComponentModel.ComplexBindingPropertiesAttribute", "ComplexBindingPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.ComponentConverter", "ComponentConverter");
            feature.AddKnownType("System.ComponentModel.ComponentEditor", "ComponentEditor");
            feature.AddKnownType("System.ComponentModel.ComponentResourceManager", "ComponentResourceManager");
            feature.AddKnownType("System.ComponentModel.Container", "Container");
            feature.AddKnownType("System.ComponentModel.ContainerFilterService", "ContainerFilterService");
            feature.AddKnownType("System.ComponentModel.CultureInfoConverter", "CultureInfoConverter");
            feature.AddKnownType("System.ComponentModel.CustomTypeDescriptor", "CustomTypeDescriptor");
            feature.AddKnownType("System.ComponentModel.DataObjectAttribute", "DataObjectAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectFieldAttribute", "DataObjectFieldAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectMethodAttribute", "DataObjectMethodAttribute");
            feature.AddKnownType("System.ComponentModel.DataObjectMethodType", "DataObjectMethodType");
            feature.AddKnownType("System.ComponentModel.DateTimeConverter", "DateTimeConverter");
            feature.AddKnownType("System.ComponentModel.DateTimeOffsetConverter", "DateTimeOffsetConverter");
            feature.AddKnownType("System.ComponentModel.DecimalConverter", "DecimalConverter");
            feature.AddKnownType("System.ComponentModel.DefaultBindingPropertyAttribute", "DefaultBindingPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DefaultEventAttribute", "DefaultEventAttribute");
            feature.AddKnownType("System.ComponentModel.DefaultPropertyAttribute", "DefaultPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.DesignTimeVisibleAttribute", "DesignTimeVisibleAttribute");
            feature.AddKnownType("System.ComponentModel.DoubleConverter", "DoubleConverter");
            feature.AddKnownType("System.ComponentModel.EnumConverter", "EnumConverter");
            feature.AddKnownType("System.ComponentModel.EventDescriptor", "EventDescriptor");
            feature.AddKnownType("System.ComponentModel.EventDescriptorCollection", "EventDescriptorCollection");
            feature.AddKnownType("System.ComponentModel.ExpandableObjectConverter", "ExpandableObjectConverter");
            feature.AddKnownType("System.ComponentModel.ExtenderProvidedPropertyAttribute", "ExtenderProvidedPropertyAttribute");
            feature.AddKnownType("System.ComponentModel.GuidConverter", "GuidConverter");
            feature.AddKnownType("System.ComponentModel.HandledEventArgs", "HandledEventArgs");
            feature.AddKnownType("System.ComponentModel.IBindingList", "IBindingList");
            feature.AddKnownType("System.ComponentModel.IBindingListView", "IBindingListView");
            feature.AddKnownType("System.ComponentModel.ICancelAddNew", "ICancelAddNew");
            feature.AddKnownType("System.ComponentModel.IComNativeDescriptorHandler", "IComNativeDescriptorHandler");
            feature.AddKnownType("System.ComponentModel.ICustomTypeDescriptor", "ICustomTypeDescriptor");
            feature.AddKnownType("System.ComponentModel.IDataErrorInfo", "IDataErrorInfo");
            feature.AddKnownType("System.ComponentModel.IExtenderProvider", "IExtenderProvider");
            feature.AddKnownType("System.ComponentModel.IIntellisenseBuilder", "IIntellisenseBuilder");
            feature.AddKnownType("System.ComponentModel.IListSource", "IListSource");
            feature.AddKnownType("System.ComponentModel.INestedContainer", "INestedContainer");
            feature.AddKnownType("System.ComponentModel.INestedSite", "INestedSite");
            feature.AddKnownType("System.ComponentModel.InheritanceAttribute", "InheritanceAttribute");
            feature.AddKnownType("System.ComponentModel.InheritanceLevel", "InheritanceLevel");
            feature.AddKnownType("System.ComponentModel.InstallerTypeAttribute", "InstallerTypeAttribute");
            feature.AddKnownType("System.ComponentModel.InstanceCreationEditor", "InstanceCreationEditor");
            feature.AddKnownType("System.ComponentModel.Int16Converter", "Int16Converter");
            feature.AddKnownType("System.ComponentModel.Int32Converter", "Int32Converter");
            feature.AddKnownType("System.ComponentModel.Int64Converter", "Int64Converter");
            feature.AddKnownType("System.ComponentModel.IRaiseItemChangedEvents", "IRaiseItemChangedEvents");
            feature.AddKnownType("System.ComponentModel.ISupportInitializeNotification", "ISupportInitializeNotification");
            feature.AddKnownType("System.ComponentModel.ITypeDescriptorContext", "ITypeDescriptorContext");
            feature.AddKnownType("System.ComponentModel.ITypedList", "ITypedList");
            feature.AddKnownType("System.ComponentModel.License", "License");
            feature.AddKnownType("System.ComponentModel.LicenseContext", "LicenseContext");
            feature.AddKnownType("System.ComponentModel.LicenseException", "LicenseException");
            feature.AddKnownType("System.ComponentModel.LicenseManager", "LicenseManager");
            feature.AddKnownType("System.ComponentModel.LicenseProvider", "LicenseProvider");
            feature.AddKnownType("System.ComponentModel.LicenseProviderAttribute", "LicenseProviderAttribute");
            feature.AddKnownType("System.ComponentModel.LicenseUsageMode", "LicenseUsageMode");
            feature.AddKnownType("System.ComponentModel.LicFileLicenseProvider", "LicFileLicenseProvider");
            feature.AddKnownType("System.ComponentModel.ListBindableAttribute", "ListBindableAttribute");
            feature.AddKnownType("System.ComponentModel.ListChangedEventArgs", "ListChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.ListChangedType", "ListChangedType");
            feature.AddKnownType("System.ComponentModel.ListSortDescription", "ListSortDescription");
            feature.AddKnownType("System.ComponentModel.ListSortDescriptionCollection", "ListSortDescriptionCollection");
            feature.AddKnownType("System.ComponentModel.ListSortDirection", "ListSortDirection");
            feature.AddKnownType("System.ComponentModel.LookupBindingPropertiesAttribute", "LookupBindingPropertiesAttribute");
            feature.AddKnownType("System.ComponentModel.MarshalByValueComponent", "MarshalByValueComponent");
            feature.AddKnownType("System.ComponentModel.MaskedTextProvider", "MaskedTextProvider");
            feature.AddKnownType("System.ComponentModel.MaskedTextResultHint", "MaskedTextResultHint");
            feature.AddKnownType("System.ComponentModel.MemberDescriptor", "MemberDescriptor");
            feature.AddKnownType("System.ComponentModel.MultilineStringConverter", "MultilineStringConverter");
            feature.AddKnownType("System.ComponentModel.NestedContainer", "NestedContainer");
            feature.AddKnownType("System.ComponentModel.NullableConverter", "NullableConverter");
            feature.AddKnownType("System.ComponentModel.PasswordPropertyTextAttribute", "PasswordPropertyTextAttribute");
            feature.AddKnownType("System.ComponentModel.PropertyDescriptor", "PropertyDescriptor");
            feature.AddKnownType("System.ComponentModel.PropertyDescriptorCollection", "PropertyDescriptorCollection");
            feature.AddKnownType("System.ComponentModel.PropertyTabAttribute", "PropertyTabAttribute");
            feature.AddKnownType("System.ComponentModel.PropertyTabScope", "PropertyTabScope");
            feature.AddKnownType("System.ComponentModel.ProvidePropertyAttribute", "ProvidePropertyAttribute");
            feature.AddKnownType("System.ComponentModel.RecommendedAsConfigurableAttribute", "RecommendedAsConfigurableAttribute");
            feature.AddKnownType("System.ComponentModel.ReferenceConverter", "ReferenceConverter");
            feature.AddKnownType("System.ComponentModel.RefreshEventArgs", "RefreshEventArgs");
            feature.AddKnownType("System.ComponentModel.RunInstallerAttribute", "RunInstallerAttribute");
            feature.AddKnownType("System.ComponentModel.SByteConverter", "SByteConverter");
            feature.AddKnownType("System.ComponentModel.SettingsBindableAttribute", "SettingsBindableAttribute");
            feature.AddKnownType("System.ComponentModel.SingleConverter", "SingleConverter");
            feature.AddKnownType("System.ComponentModel.StringConverter", "StringConverter");
            feature.AddKnownType("System.ComponentModel.TimeSpanConverter", "TimeSpanConverter");
            feature.AddKnownType("System.ComponentModel.ToolboxItemAttribute", "ToolboxItemAttribute");
            feature.AddKnownType("System.ComponentModel.ToolboxItemFilterAttribute", "ToolboxItemFilterAttribute");
            feature.AddKnownType("System.ComponentModel.ToolboxItemFilterType", "ToolboxItemFilterType");
            feature.AddKnownType("System.ComponentModel.TypeConverter", "TypeConverter");
            feature.AddKnownType("System.ComponentModel.TypeConverter+SimplePropertyDescriptor", "SimplePropertyDescriptor");
            feature.AddKnownType("System.ComponentModel.TypeConverter+StandardValuesCollection", "TypeConverter.StandardValuesCollection");
            feature.AddKnownType("System.ComponentModel.TypeDescriptionProvider", "TypeDescriptionProvider");
            feature.AddKnownType("System.ComponentModel.TypeDescriptor", "TypeDescriptor");
            feature.AddKnownType("System.ComponentModel.TypeListConverter", "TypeListConverter");
            feature.AddKnownType("System.ComponentModel.UInt16Converter", "UInt16Converter");
            feature.AddKnownType("System.ComponentModel.UInt32Converter", "UInt32Converter");
            feature.AddKnownType("System.ComponentModel.UInt64Converter", "UInt64Converter");
            feature.AddKnownType("System.ComponentModel.VersionConverter", "VersionConverter");
            feature.AddKnownType("System.ComponentModel.WarningException", "WarningException");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService", "DesignerOptionService");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection", "DesignerOptionService.DesignerOptionCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesignerOptionService+DesignerOptionConverter", "DesignerOptionConverter");
            feature.AddKnownType("System.ComponentModel.Design.ActiveDesignerEventArgs", "ActiveDesignerEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.CheckoutException", "CheckoutException");
            feature.AddKnownType("System.ComponentModel.Design.CommandID", "CommandID");
            feature.AddKnownType("System.ComponentModel.Design.ComponentChangedEventArgs", "ComponentChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentChangingEventArgs", "ComponentChangingEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentEventArgs", "ComponentEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.ComponentRenameEventArgs", "ComponentRenameEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerCollection", "DesignerCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesignerEventArgs", "DesignerEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerTransaction", "DesignerTransaction");
            feature.AddKnownType("System.ComponentModel.Design.DesignerTransactionCloseEventArgs", "DesignerTransactionCloseEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.DesignerVerb", "DesignerVerb");
            feature.AddKnownType("System.ComponentModel.Design.DesignerVerbCollection", "DesignerVerbCollection");
            feature.AddKnownType("System.ComponentModel.Design.DesigntimeLicenseContext", "DesigntimeLicenseContext");
            feature.AddKnownType("System.ComponentModel.Design.DesigntimeLicenseContextSerializer", "DesigntimeLicenseContextSerializer");
            feature.AddKnownType("System.ComponentModel.Design.HelpContextType", "HelpContextType");
            feature.AddKnownType("System.ComponentModel.Design.HelpKeywordAttribute", "HelpKeywordAttribute");
            feature.AddKnownType("System.ComponentModel.Design.HelpKeywordType", "HelpKeywordType");
            feature.AddKnownType("System.ComponentModel.Design.IComponentChangeService", "IComponentChangeService");
            feature.AddKnownType("System.ComponentModel.Design.IComponentDiscoveryService", "IComponentDiscoveryService");
            feature.AddKnownType("System.ComponentModel.Design.IComponentInitializer", "IComponentInitializer");
            feature.AddKnownType("System.ComponentModel.Design.IDesigner", "IDesigner");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerEventService", "IDesignerEventService");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerFilter", "IDesignerFilter");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerHost", "IDesignerHost");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerHostTransactionState", "IDesignerHostTransactionState");
            feature.AddKnownType("System.ComponentModel.Design.IDesignerOptionService", "IDesignerOptionService");
            feature.AddKnownType("System.ComponentModel.Design.IDictionaryService", "IDictionaryService");
            feature.AddKnownType("System.ComponentModel.Design.IEventBindingService", "IEventBindingService");
            feature.AddKnownType("System.ComponentModel.Design.IExtenderListService", "IExtenderListService");
            feature.AddKnownType("System.ComponentModel.Design.IExtenderProviderService", "IExtenderProviderService");
            feature.AddKnownType("System.ComponentModel.Design.IHelpService", "IHelpService");
            feature.AddKnownType("System.ComponentModel.Design.IInheritanceService", "IInheritanceService");
            feature.AddKnownType("System.ComponentModel.Design.IMenuCommandService", "IMenuCommandService");
            feature.AddKnownType("System.ComponentModel.Design.IReferenceService", "IReferenceService");
            feature.AddKnownType("System.ComponentModel.Design.IResourceService", "IResourceService");
            feature.AddKnownType("System.ComponentModel.Design.IRootDesigner", "IRootDesigner");
            feature.AddKnownType("System.ComponentModel.Design.ISelectionService", "ISelectionService");
            feature.AddKnownType("System.ComponentModel.Design.IServiceContainer", "IServiceContainer");
            feature.AddKnownType("System.ComponentModel.Design.ITreeDesigner", "ITreeDesigner");
            feature.AddKnownType("System.ComponentModel.Design.ITypeDescriptorFilterService", "ITypeDescriptorFilterService");
            feature.AddKnownType("System.ComponentModel.Design.ITypeDiscoveryService", "ITypeDiscoveryService");
            feature.AddKnownType("System.ComponentModel.Design.ITypeResolutionService", "ITypeResolutionService");
            feature.AddKnownType("System.ComponentModel.Design.MenuCommand", "MenuCommand");
            feature.AddKnownType("System.ComponentModel.Design.SelectionTypes", "SelectionTypes");
            feature.AddKnownType("System.ComponentModel.Design.ServiceContainer", "ServiceContainer");
            feature.AddKnownType("System.ComponentModel.Design.StandardCommands", "StandardCommands");
            feature.AddKnownType("System.ComponentModel.Design.StandardToolWindows", "StandardToolWindows");
            feature.AddKnownType("System.ComponentModel.Design.TypeDescriptionProviderService", "TypeDescriptionProviderService");
            feature.AddKnownType("System.ComponentModel.Design.ViewTechnology", "ViewTechnology");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ComponentSerializationService", "ComponentSerializationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ContextStack", "ContextStack");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute", "DefaultSerializationProviderAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.DesignerLoader", "DesignerLoader");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderHost", "IDesignerLoaderHost");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderHost2", "IDesignerLoaderHost2");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerLoaderService", "IDesignerLoaderService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationManager", "IDesignerSerializationManager");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationProvider", "IDesignerSerializationProvider");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.IDesignerSerializationService", "IDesignerSerializationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.INameCreationService", "INameCreationService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.InstanceDescriptor", "InstanceDescriptor");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.MemberRelationship", "MemberRelationship");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.MemberRelationshipService", "MemberRelationshipService");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.ResolveNameEventArgs", "ResolveNameEventArgs");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute", "RootDesignerSerializerAttribute");
            feature.AddKnownType("System.ComponentModel.Design.Serialization.SerializationStore", "SerializationStore");
            feature.AddKnownType("System.Drawing.ColorConverter", "ColorConverter");
            feature.AddKnownType("System.Drawing.PointConverter", "PointConverter");
            feature.AddKnownType("System.Drawing.RectangleConverter", "RectangleConverter");
            feature.AddKnownType("System.Drawing.SizeConverter", "SizeConverter");
            feature.AddKnownType("System.Drawing.SizeFConverter", "SizeFConverter");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter", "ExtendedProtectionPolicyTypeConverter");
            feature.AddKnownType("System.Timers.ElapsedEventArgs", "ElapsedEventArgs");
            feature.AddKnownType("System.Timers.Timer", "Timer");
            feature.AddKnownType("System.Timers.TimersDescriptionAttribute", "TimersDescriptionAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Console", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.ConsoleCancelEventArgs", "ConsoleCancelEventArgs");
            feature.AddKnownType("System.ConsoleColor", "ConsoleColor");
            feature.AddKnownType("System.ConsoleKey", "ConsoleKey");
            feature.AddKnownType("System.ConsoleKeyInfo", "ConsoleKeyInfo");
            feature.AddKnownType("System.ConsoleModifiers", "ConsoleModifiers");
            feature.AddKnownType("System.ConsoleSpecialKey", "ConsoleSpecialKey");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Data.Common", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Data.AcceptRejectRule", "AcceptRejectRule");
            feature.AddKnownType("System.Data.CommandBehavior", "CommandBehavior");
            feature.AddKnownType("System.Data.CommandType", "CommandType");
            feature.AddKnownType("System.Data.ConflictOption", "ConflictOption");
            feature.AddKnownType("System.Data.ConnectionState", "ConnectionState");
            feature.AddKnownType("System.Data.Constraint", "Constraint");
            feature.AddKnownType("System.Data.ConstraintCollection", "ConstraintCollection");
            feature.AddKnownType("System.Data.ConstraintException", "ConstraintException");
            feature.AddKnownType("System.Data.DataColumn", "DataColumn");
            feature.AddKnownType("System.Data.DataColumnChangeEventArgs", "DataColumnChangeEventArgs");
            feature.AddKnownType("System.Data.DataColumnCollection", "DataColumnCollection");
            feature.AddKnownType("System.Data.DataException", "DataException");
            feature.AddKnownType("System.Data.DataRelation", "DataRelation");
            feature.AddKnownType("System.Data.DataRelationCollection", "DataRelationCollection");
            feature.AddKnownType("System.Data.DataRow", "DataRow");
            feature.AddKnownType("System.Data.DataRowAction", "DataRowAction");
            feature.AddKnownType("System.Data.DataRowBuilder", "DataRowBuilder");
            feature.AddKnownType("System.Data.DataRowChangeEventArgs", "DataRowChangeEventArgs");
            feature.AddKnownType("System.Data.DataRowCollection", "DataRowCollection");
            feature.AddKnownType("System.Data.DataRowComparer`1", "DataRowComparer`1'1");
            feature.AddKnownType("System.Data.DataRowState", "DataRowState");
            feature.AddKnownType("System.Data.DataRowVersion", "DataRowVersion");
            feature.AddKnownType("System.Data.DataRowView", "DataRowView");
            feature.AddKnownType("System.Data.DataSet", "DataSet");
            feature.AddKnownType("System.Data.DataSetDateTime", "DataSetDateTime");
            feature.AddKnownType("System.Data.DataSysDescriptionAttribute", "DataSysDescriptionAttribute");
            feature.AddKnownType("System.Data.DataTable", "DataTable");
            feature.AddKnownType("System.Data.DataTableClearEventArgs", "DataTableClearEventArgs");
            feature.AddKnownType("System.Data.DataTableCollection", "DataTableCollection");
            feature.AddKnownType("System.Data.DataTableNewRowEventArgs", "DataTableNewRowEventArgs");
            feature.AddKnownType("System.Data.DataTableReader", "DataTableReader");
            feature.AddKnownType("System.Data.DataView", "DataView");
            feature.AddKnownType("System.Data.DataViewManager", "DataViewManager");
            feature.AddKnownType("System.Data.DataViewRowState", "DataViewRowState");
            feature.AddKnownType("System.Data.DataViewSetting", "DataViewSetting");
            feature.AddKnownType("System.Data.DataViewSettingCollection", "DataViewSettingCollection");
            feature.AddKnownType("System.Data.DBConcurrencyException", "DBConcurrencyException");
            feature.AddKnownType("System.Data.DbType", "DbType");
            feature.AddKnownType("System.Data.DeletedRowInaccessibleException", "DeletedRowInaccessibleException");
            feature.AddKnownType("System.Data.DuplicateNameException", "DuplicateNameException");
            feature.AddKnownType("System.Data.EnumerableRowCollection", "EnumerableRowCollection");
            feature.AddKnownType("System.Data.EnumerableRowCollection`1", "EnumerableRowCollection`1'1");
            feature.AddKnownType("System.Data.EvaluateException", "EvaluateException");
            feature.AddKnownType("System.Data.FillErrorEventArgs", "FillErrorEventArgs");
            feature.AddKnownType("System.Data.ForeignKeyConstraint", "ForeignKeyConstraint");
            feature.AddKnownType("System.Data.IColumnMapping", "IColumnMapping");
            feature.AddKnownType("System.Data.IColumnMappingCollection", "IColumnMappingCollection");
            feature.AddKnownType("System.Data.IDataAdapter", "IDataAdapter");
            feature.AddKnownType("System.Data.IDataParameter", "IDataParameter");
            feature.AddKnownType("System.Data.IDataParameterCollection", "IDataParameterCollection");
            feature.AddKnownType("System.Data.IDataReader", "IDataReader");
            feature.AddKnownType("System.Data.IDataRecord", "IDataRecord");
            feature.AddKnownType("System.Data.IDbCommand", "IDbCommand");
            feature.AddKnownType("System.Data.IDbConnection", "IDbConnection");
            feature.AddKnownType("System.Data.IDbDataAdapter", "IDbDataAdapter");
            feature.AddKnownType("System.Data.IDbDataParameter", "IDbDataParameter");
            feature.AddKnownType("System.Data.IDbTransaction", "IDbTransaction");
            feature.AddKnownType("System.Data.InRowChangingEventException", "InRowChangingEventException");
            feature.AddKnownType("System.Data.InternalDataCollectionBase", "InternalDataCollectionBase");
            feature.AddKnownType("System.Data.InvalidConstraintException", "InvalidConstraintException");
            feature.AddKnownType("System.Data.InvalidExpressionException", "InvalidExpressionException");
            feature.AddKnownType("System.Data.IsolationLevel", "IsolationLevel");
            feature.AddKnownType("System.Data.ITableMapping", "ITableMapping");
            feature.AddKnownType("System.Data.ITableMappingCollection", "ITableMappingCollection");
            feature.AddKnownType("System.Data.KeyRestrictionBehavior", "KeyRestrictionBehavior");
            feature.AddKnownType("System.Data.LoadOption", "LoadOption");
            feature.AddKnownType("System.Data.MappingType", "MappingType");
            feature.AddKnownType("System.Data.MergeFailedEventArgs", "MergeFailedEventArgs");
            feature.AddKnownType("System.Data.MissingMappingAction", "MissingMappingAction");
            feature.AddKnownType("System.Data.MissingPrimaryKeyException", "MissingPrimaryKeyException");
            feature.AddKnownType("System.Data.MissingSchemaAction", "MissingSchemaAction");
            feature.AddKnownType("System.Data.NoNullAllowedException", "NoNullAllowedException");
            feature.AddKnownType("System.Data.OrderedEnumerableRowCollection`1", "OrderedEnumerableRowCollection`1'1");
            feature.AddKnownType("System.Data.ParameterDirection", "ParameterDirection");
            feature.AddKnownType("System.Data.PropertyCollection", "PropertyCollection");
            feature.AddKnownType("System.Data.ReadOnlyException", "ReadOnlyException");
            feature.AddKnownType("System.Data.RowNotInTableException", "RowNotInTableException");
            feature.AddKnownType("System.Data.Rule", "Rule");
            feature.AddKnownType("System.Data.SchemaSerializationMode", "SchemaSerializationMode");
            feature.AddKnownType("System.Data.SchemaType", "SchemaType");
            feature.AddKnownType("System.Data.SerializationFormat", "SerializationFormat");
            feature.AddKnownType("System.Data.SqlDbType", "SqlDbType");
            feature.AddKnownType("System.Data.StateChangeEventArgs", "StateChangeEventArgs");
            feature.AddKnownType("System.Data.StatementCompletedEventArgs", "StatementCompletedEventArgs");
            feature.AddKnownType("System.Data.StatementType", "StatementType");
            feature.AddKnownType("System.Data.StrongTypingException", "StrongTypingException");
            feature.AddKnownType("System.Data.SyntaxErrorException", "SyntaxErrorException");
            feature.AddKnownType("System.Data.TypedTableBase`1", "TypedTableBase`1'1");
            feature.AddKnownType("System.Data.UniqueConstraint", "UniqueConstraint");
            feature.AddKnownType("System.Data.UpdateRowSource", "UpdateRowSource");
            feature.AddKnownType("System.Data.UpdateStatus", "UpdateStatus");
            feature.AddKnownType("System.Data.VersionNotFoundException", "VersionNotFoundException");
            feature.AddKnownType("System.Data.XmlReadMode", "XmlReadMode");
            feature.AddKnownType("System.Data.XmlWriteMode", "XmlWriteMode");
            feature.AddKnownType("System.Data.ConstraintConverter", "ConstraintConverter");
            feature.AddKnownType("System.Data.RelationshipConverter", "RelationshipConverter");
            feature.AddKnownType("System.Data.ColumnTypeConverter", "ColumnTypeConverter");
            feature.AddKnownType("System.Data.DefaultValueTypeConverter", "DefaultValueTypeConverter");
            feature.AddKnownType("System.Data.PrimaryKeyTypeConverter", "PrimaryKeyTypeConverter");
            feature.AddKnownType("System.Data.DataTableTypeConverter", "DataTableTypeConverter");
            feature.AddKnownType("System.Data.Common.CatalogLocation", "CatalogLocation");
            feature.AddKnownType("System.Data.Common.DataAdapter", "DataAdapter");
            feature.AddKnownType("System.Data.Common.DataColumnMapping", "DataColumnMapping");
            feature.AddKnownType("System.Data.Common.DataColumnMapping+DataColumnMappingConverter", "DataColumnMappingConverter");
            feature.AddKnownType("System.Data.Common.DataColumnMappingCollection", "DataColumnMappingCollection");
            feature.AddKnownType("System.Data.Common.DataTableMapping", "DataTableMapping");
            feature.AddKnownType("System.Data.Common.DataTableMapping+DataTableMappingConverter", "DataTableMappingConverter");
            feature.AddKnownType("System.Data.Common.DataTableMappingCollection", "DataTableMappingCollection");
            feature.AddKnownType("System.Data.Common.DbColumn", "DbColumn");
            feature.AddKnownType("System.Data.Common.DbCommand", "DbCommand");
            feature.AddKnownType("System.Data.Common.DbCommandBuilder", "DbCommandBuilder");
            feature.AddKnownType("System.Data.Common.DbConnection", "DbConnection");
            feature.AddKnownType("System.Data.Common.DbConnectionStringBuilder", "DbConnectionStringBuilder");
            feature.AddKnownType("System.Data.Common.DbDataAdapter", "DbDataAdapter");
            feature.AddKnownType("System.Data.Common.DbDataReader", "DbDataReader");
            feature.AddKnownType("System.Data.Common.DbDataRecord", "DbDataRecord");
            feature.AddKnownType("System.Data.Common.DbDataSourceEnumerator", "DbDataSourceEnumerator");
            feature.AddKnownType("System.Data.Common.DbEnumerator", "DbEnumerator");
            feature.AddKnownType("System.Data.Common.DbException", "DbException");
            feature.AddKnownType("System.Data.Common.DbParameter", "DbParameter");
            feature.AddKnownType("System.Data.Common.DbParameterCollection", "DbParameterCollection");
            feature.AddKnownType("System.Data.Common.DbProviderFactory", "DbProviderFactory");
            feature.AddKnownType("System.Data.Common.DbProviderSpecificTypePropertyAttribute", "DbProviderSpecificTypePropertyAttribute");
            feature.AddKnownType("System.Data.Common.DbTransaction", "DbTransaction");
            feature.AddKnownType("System.Data.Common.GroupByBehavior", "GroupByBehavior");
            feature.AddKnownType("System.Data.Common.IDbColumnSchemaGenerator", "IDbColumnSchemaGenerator");
            feature.AddKnownType("System.Data.Common.IdentifierCase", "IdentifierCase");
            feature.AddKnownType("System.Data.Common.RowUpdatedEventArgs", "RowUpdatedEventArgs");
            feature.AddKnownType("System.Data.Common.RowUpdatingEventArgs", "RowUpdatingEventArgs");
            feature.AddKnownType("System.Data.Common.SupportedJoinOperators", "SupportedJoinOperators");
            feature.AddKnownType("System.Data.SqlTypes.INullable", "INullable");
            feature.AddKnownType("System.Data.SqlTypes.SqlAlreadyFilledException", "SqlAlreadyFilledException");
            feature.AddKnownType("System.Data.SqlTypes.SqlBinary", "SqlBinary");
            feature.AddKnownType("System.Data.SqlTypes.SqlBoolean", "SqlBoolean");
            feature.AddKnownType("System.Data.SqlTypes.SqlByte", "SqlByte");
            feature.AddKnownType("System.Data.SqlTypes.SqlBytes", "SqlBytes");
            feature.AddKnownType("System.Data.SqlTypes.SqlChars", "SqlChars");
            feature.AddKnownType("System.Data.SqlTypes.SqlCompareOptions", "SqlCompareOptions");
            feature.AddKnownType("System.Data.SqlTypes.SqlDateTime", "SqlDateTime");
            feature.AddKnownType("System.Data.SqlTypes.SqlDecimal", "SqlDecimal");
            feature.AddKnownType("System.Data.SqlTypes.SqlDouble", "SqlDouble");
            feature.AddKnownType("System.Data.SqlTypes.SqlGuid", "SqlGuid");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt16", "SqlInt16");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt32", "SqlInt32");
            feature.AddKnownType("System.Data.SqlTypes.SqlInt64", "SqlInt64");
            feature.AddKnownType("System.Data.SqlTypes.SqlMoney", "SqlMoney");
            feature.AddKnownType("System.Data.SqlTypes.SqlNotFilledException", "SqlNotFilledException");
            feature.AddKnownType("System.Data.SqlTypes.SqlNullValueException", "SqlNullValueException");
            feature.AddKnownType("System.Data.SqlTypes.SqlSingle", "SqlSingle");
            feature.AddKnownType("System.Data.SqlTypes.SqlString", "SqlString");
            feature.AddKnownType("System.Data.SqlTypes.SqlTruncateException", "SqlTruncateException");
            feature.AddKnownType("System.Data.SqlTypes.SqlTypeException", "SqlTypeException");
            feature.AddKnownType("System.Data.SqlTypes.SqlXml", "SqlXml");
            feature.AddKnownType("System.Data.SqlTypes.StorageState", "StorageState");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.XmlDataDocument", "XmlDataDocument");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Contracts", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractAbbreviatorAttribute", "ContractAbbreviatorAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractArgumentValidatorAttribute", "ContractArgumentValidatorAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractClassAttribute", "ContractClassAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractClassForAttribute", "ContractClassForAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractFailedEventArgs", "ContractFailedEventArgs");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractFailureKind", "ContractFailureKind");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractInvariantMethodAttribute", "ContractInvariantMethodAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractOptionAttribute", "ContractOptionAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute", "ContractPublicPropertyNameAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute", "ContractReferenceAssemblyAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute", "ContractRuntimeIgnoredAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.ContractVerificationAttribute", "ContractVerificationAttribute");
            feature.AddKnownType("System.Diagnostics.Contracts.PureAttribute", "PureAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.DiagnosticSource", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.DiagnosticListener", "DiagnosticListener");
            feature.AddKnownType("System.Diagnostics.DiagnosticSource", "DiagnosticSource");
            feature.AddKnownType("System.Diagnostics.Activity", "Activity");
            feature.AddKnownType("System.Diagnostics.ActivityTagsCollection", "ActivityTagsCollection");
            feature.AddKnownType("System.Diagnostics.ActivityTagsCollection+Enumerator", "ActivityTagsCollection.Enumerator");
            feature.AddKnownType("System.Diagnostics.ActivityIdFormat", "ActivityIdFormat");
            feature.AddKnownType("System.Diagnostics.ActivitySpanId", "ActivitySpanId");
            feature.AddKnownType("System.Diagnostics.ActivitySource", "ActivitySource");
            feature.AddKnownType("System.Diagnostics.ActivityTraceFlags", "ActivityTraceFlags");
            feature.AddKnownType("System.Diagnostics.ActivityTraceId", "ActivityTraceId");
            feature.AddKnownType("System.Diagnostics.ActivitySamplingResult", "ActivitySamplingResult");
            feature.AddKnownType("System.Diagnostics.ActivityKind", "ActivityKind");
            feature.AddKnownType("System.Diagnostics.ActivityEvent", "ActivityEvent");
            feature.AddKnownType("System.Diagnostics.ActivityContext", "ActivityContext");
            feature.AddKnownType("System.Diagnostics.ActivityLink", "ActivityLink");
            feature.AddKnownType("System.Diagnostics.ActivityCreationOptions`1", "ActivityCreationOptions`1'1");
            feature.AddKnownType("System.Diagnostics.ActivityListener", "ActivityListener");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.FileVersionInfo", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.FileVersionInfo", "FileVersionInfo");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Process", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeProcessHandle,System.Diagnostics.Process", "Microsoft.Win32.SafeHandles.SafeProcessHandle");
            feature.AddKnownType("System.Diagnostics.DataReceivedEventArgs", "DataReceivedEventArgs");
            feature.AddKnownType("System.Diagnostics.MonitoringDescriptionAttribute", "MonitoringDescriptionAttribute");
            feature.AddKnownType("System.Diagnostics.Process", "Process");
            feature.AddKnownType("System.Diagnostics.ProcessModule", "ProcessModule");
            feature.AddKnownType("System.Diagnostics.ProcessModuleCollection", "ProcessModuleCollection");
            feature.AddKnownType("System.Diagnostics.ProcessPriorityClass", "ProcessPriorityClass");
            feature.AddKnownType("System.Diagnostics.ProcessStartInfo", "ProcessStartInfo");
            feature.AddKnownType("System.Diagnostics.ProcessThread", "ProcessThread");
            feature.AddKnownType("System.Diagnostics.ProcessThreadCollection", "ProcessThreadCollection");
            feature.AddKnownType("System.Diagnostics.ProcessWindowStyle", "ProcessWindowStyle");
            feature.AddKnownType("System.Diagnostics.ThreadPriorityLevel", "ThreadPriorityLevel");
            feature.AddKnownType("System.Diagnostics.ThreadState", "ThreadState");
            feature.AddKnownType("System.Diagnostics.ThreadWaitReason", "ThreadWaitReason");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.StackTrace", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.StackFrame", "StackFrame");
            feature.AddKnownType("System.Diagnostics.StackTrace", "StackTrace");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolBinder", "ISymbolBinder");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolBinder1", "ISymbolBinder1");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolDocument", "ISymbolDocument");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolDocumentWriter", "ISymbolDocumentWriter");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolMethod", "ISymbolMethod");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolNamespace", "ISymbolNamespace");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolReader", "ISymbolReader");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolScope", "ISymbolScope");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolVariable", "ISymbolVariable");
            feature.AddKnownType("System.Diagnostics.SymbolStore.ISymbolWriter", "ISymbolWriter");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymAddressKind", "SymAddressKind");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymbolToken", "SymbolToken");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymDocumentType", "SymDocumentType");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymLanguageType", "SymLanguageType");
            feature.AddKnownType("System.Diagnostics.SymbolStore.SymLanguageVendor", "SymLanguageVendor");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.TextWriterTraceListener", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.ConsoleTraceListener", "ConsoleTraceListener");
            feature.AddKnownType("System.Diagnostics.DelimitedListTraceListener", "DelimitedListTraceListener");
            feature.AddKnownType("System.Diagnostics.TextWriterTraceListener", "TextWriterTraceListener");
            feature.AddKnownType("System.Diagnostics.XmlWriterTraceListener", "XmlWriterTraceListener");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.TraceSource", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.BooleanSwitch", "BooleanSwitch");
            feature.AddKnownType("System.Diagnostics.CorrelationManager", "CorrelationManager");
            feature.AddKnownType("System.Diagnostics.DefaultTraceListener", "DefaultTraceListener");
            feature.AddKnownType("System.Diagnostics.EventTypeFilter", "EventTypeFilter");
            feature.AddKnownType("System.Diagnostics.SourceFilter", "SourceFilter");
            feature.AddKnownType("System.Diagnostics.SourceLevels", "SourceLevels");
            feature.AddKnownType("System.Diagnostics.SourceSwitch", "SourceSwitch");
            feature.AddKnownType("System.Diagnostics.Switch", "Switch");
            feature.AddKnownType("System.Diagnostics.SwitchAttribute", "SwitchAttribute");
            feature.AddKnownType("System.Diagnostics.SwitchLevelAttribute", "SwitchLevelAttribute");
            feature.AddKnownType("System.Diagnostics.Trace", "Trace");
            feature.AddKnownType("System.Diagnostics.TraceEventCache", "TraceEventCache");
            feature.AddKnownType("System.Diagnostics.TraceEventType", "TraceEventType");
            feature.AddKnownType("System.Diagnostics.TraceFilter", "TraceFilter");
            feature.AddKnownType("System.Diagnostics.TraceLevel", "TraceLevel");
            feature.AddKnownType("System.Diagnostics.TraceListener", "TraceListener");
            feature.AddKnownType("System.Diagnostics.TraceListenerCollection", "TraceListenerCollection");
            feature.AddKnownType("System.Diagnostics.TraceOptions", "TraceOptions");
            feature.AddKnownType("System.Diagnostics.TraceSource", "TraceSource");
            feature.AddKnownType("System.Diagnostics.TraceSwitch", "TraceSwitch");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Diagnostics.Tracing", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventActivityOptions", "EventActivityOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventAttribute", "EventAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventChannel", "EventChannel");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCommand", "EventCommand");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCommandEventArgs", "EventCommandEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.EventDataAttribute", "EventDataAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldAttribute", "EventFieldAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldFormat", "EventFieldFormat");
            feature.AddKnownType("System.Diagnostics.Tracing.EventFieldTags", "EventFieldTags");
            feature.AddKnownType("System.Diagnostics.Tracing.EventIgnoreAttribute", "EventIgnoreAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventKeywords", "EventKeywords");
            feature.AddKnownType("System.Diagnostics.Tracing.EventLevel", "EventLevel");
            feature.AddKnownType("System.Diagnostics.Tracing.EventListener", "EventListener");
            feature.AddKnownType("System.Diagnostics.Tracing.EventManifestOptions", "EventManifestOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventOpcode", "EventOpcode");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSource", "EventSource");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSource+EventData", "EventData");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceAttribute", "EventSourceAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceCreatedEventArgs", "EventSourceCreatedEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceException", "EventSourceException");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceOptions", "EventSourceOptions");
            feature.AddKnownType("System.Diagnostics.Tracing.EventSourceSettings", "EventSourceSettings");
            feature.AddKnownType("System.Diagnostics.Tracing.EventTags", "EventTags");
            feature.AddKnownType("System.Diagnostics.Tracing.EventTask", "EventTask");
            feature.AddKnownType("System.Diagnostics.Tracing.EventWrittenEventArgs", "EventWrittenEventArgs");
            feature.AddKnownType("System.Diagnostics.Tracing.NonEventAttribute", "NonEventAttribute");
            feature.AddKnownType("System.Diagnostics.Tracing.DiagnosticCounter", "DiagnosticCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.PollingCounter", "PollingCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.IncrementingEventCounter", "IncrementingEventCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.IncrementingPollingCounter", "IncrementingPollingCounter");
            feature.AddKnownType("System.Diagnostics.Tracing.EventCounter", "EventCounter");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Drawing.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Drawing.Color", "Color");
            feature.AddKnownType("System.Drawing.KnownColor", "KnownColor");
            feature.AddKnownType("System.Drawing.Point", "Point");
            feature.AddKnownType("System.Drawing.PointF", "PointF");
            feature.AddKnownType("System.Drawing.Rectangle", "Rectangle");
            feature.AddKnownType("System.Drawing.RectangleF", "RectangleF");
            feature.AddKnownType("System.Drawing.Size", "Size");
            feature.AddKnownType("System.Drawing.SizeF", "SizeF");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Formats.Asn1", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Formats.Asn1.Asn1Tag", "Asn1Tag");
            feature.AddKnownType("System.Formats.Asn1.AsnContentException", "AsnContentException");
            feature.AddKnownType("System.Formats.Asn1.AsnEncodingRules", "AsnEncodingRules");
            feature.AddKnownType("System.Formats.Asn1.AsnReader", "AsnReader");
            feature.AddKnownType("System.Formats.Asn1.AsnReaderOptions", "AsnReaderOptions");
            feature.AddKnownType("System.Formats.Asn1.AsnWriter", "AsnWriter");
            feature.AddKnownType("System.Formats.Asn1.AsnWriter+Scope", "AsnWriter.Scope");
            feature.AddKnownType("System.Formats.Asn1.TagClass", "TagClass");
            feature.AddKnownType("System.Formats.Asn1.UniversalTagNumber", "UniversalTagNumber");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression.Brotli", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.Compression.BrotliDecoder", "BrotliDecoder");
            feature.AddKnownType("System.IO.Compression.BrotliEncoder", "BrotliEncoder");
            feature.AddKnownType("System.IO.Compression.BrotliStream", "BrotliStream");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.Compression.CompressionLevel", "CompressionLevel");
            feature.AddKnownType("System.IO.Compression.CompressionMode", "CompressionMode");
            feature.AddKnownType("System.IO.Compression.DeflateStream", "DeflateStream");
            feature.AddKnownType("System.IO.Compression.GZipStream", "GZipStream");
            feature.AddKnownType("System.IO.Compression.ZipArchive", "ZipArchive");
            feature.AddKnownType("System.IO.Compression.ZipArchiveEntry", "ZipArchiveEntry");
            feature.AddKnownType("System.IO.Compression.ZipArchiveMode", "ZipArchiveMode");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Compression.ZipFile", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.DirectoryInfo", "DirectoryInfo");
            feature.AddKnownType("System.IO.EnumerationOptions", "EnumerationOptions");
            feature.AddKnownType("System.IO.FileInfo", "FileInfo");
            feature.AddKnownType("System.IO.FileSystemInfo", "FileSystemInfo");
            feature.AddKnownType("System.IO.MatchCasing", "MatchCasing");
            feature.AddKnownType("System.IO.MatchType", "MatchType");
            feature.AddKnownType("System.IO.SearchOption", "SearchOption");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEntry", "FileSystemEntry");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEnumerable`1", "FileSystemEnumerable`1'1");
            feature.AddKnownType("System.IO.Enumeration.FileSystemEnumerator`1", "FileSystemEnumerator`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem.DriveInfo", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.DriveInfo", "DriveInfo");
            feature.AddKnownType("System.IO.DriveNotFoundException", "DriveNotFoundException");
            feature.AddKnownType("System.IO.DriveType", "DriveType");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.FileSystem.Watcher", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.ErrorEventArgs", "ErrorEventArgs");
            feature.AddKnownType("System.IO.FileSystemEventArgs", "FileSystemEventArgs");
            feature.AddKnownType("System.IO.FileSystemWatcher", "FileSystemWatcher");
            feature.AddKnownType("System.IO.InternalBufferOverflowException", "InternalBufferOverflowException");
            feature.AddKnownType("System.IO.NotifyFilters", "NotifyFilters");
            feature.AddKnownType("System.IO.RenamedEventArgs", "RenamedEventArgs");
            feature.AddKnownType("System.IO.WaitForChangedResult", "WaitForChangedResult");
            feature.AddKnownType("System.IO.WatcherChangeTypes", "WatcherChangeTypes");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.IsolatedStorage", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.IO.IsolatedStorage.INormalizeForIsolatedStorage", "INormalizeForIsolatedStorage");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorage", "IsolatedStorage");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageException", "IsolatedStorageException");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageFile", "IsolatedStorageFile");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageFileStream", "IsolatedStorageFileStream");
            feature.AddKnownType("System.IO.IsolatedStorage.IsolatedStorageScope", "IsolatedStorageScope");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.MemoryMappedFiles", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle,System.IO.MemoryMappedFiles", "Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle,System.IO.MemoryMappedFiles", "Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFile", "MemoryMappedFile");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileAccess", "MemoryMappedFileAccess");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileOptions", "MemoryMappedFileOptions");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedFileRights", "MemoryMappedFileRights");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor", "MemoryMappedViewAccessor");
            feature.AddKnownType("System.IO.MemoryMappedFiles.MemoryMappedViewStream", "MemoryMappedViewStream");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.IO.Pipes", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafePipeHandle,System.IO.Pipes", "Microsoft.Win32.SafeHandles.SafePipeHandle");
            feature.AddKnownType("System.IO.Pipes.AnonymousPipeClientStream", "AnonymousPipeClientStream");
            feature.AddKnownType("System.IO.Pipes.AnonymousPipeServerStream", "AnonymousPipeServerStream");
            feature.AddKnownType("System.IO.Pipes.NamedPipeClientStream", "NamedPipeClientStream");
            feature.AddKnownType("System.IO.Pipes.NamedPipeServerStream", "NamedPipeServerStream");
            feature.AddKnownType("System.IO.Pipes.PipeDirection", "PipeDirection");
            feature.AddKnownType("System.IO.Pipes.PipeOptions", "PipeOptions");
            feature.AddKnownType("System.IO.Pipes.PipeStream", "PipeStream");
            feature.AddKnownType("System.IO.Pipes.PipeTransmissionMode", "PipeTransmissionMode");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.IGrouping`2", "IGrouping`2'2");
            feature.AddKnownType("System.Linq.ILookup`2", "ILookup`2'2");
            feature.AddKnownType("System.Linq.IOrderedEnumerable`1", "IOrderedEnumerable`1'1");
            feature.AddKnownType("System.Linq.Lookup`2", "Lookup`2'2");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Expressions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Dynamic.BinaryOperationBinder", "BinaryOperationBinder");
            feature.AddKnownType("System.Dynamic.BindingRestrictions", "BindingRestrictions");
            feature.AddKnownType("System.Dynamic.CallInfo", "CallInfo");
            feature.AddKnownType("System.Dynamic.ConvertBinder", "ConvertBinder");
            feature.AddKnownType("System.Dynamic.CreateInstanceBinder", "CreateInstanceBinder");
            feature.AddKnownType("System.Dynamic.DeleteIndexBinder", "DeleteIndexBinder");
            feature.AddKnownType("System.Dynamic.DeleteMemberBinder", "DeleteMemberBinder");
            feature.AddKnownType("System.Dynamic.DynamicMetaObject", "DynamicMetaObject");
            feature.AddKnownType("System.Dynamic.DynamicMetaObjectBinder", "DynamicMetaObjectBinder");
            feature.AddKnownType("System.Dynamic.DynamicObject", "DynamicObject");
            feature.AddKnownType("System.Dynamic.ExpandoObject", "ExpandoObject");
            feature.AddKnownType("System.Dynamic.GetIndexBinder", "GetIndexBinder");
            feature.AddKnownType("System.Dynamic.GetMemberBinder", "GetMemberBinder");
            feature.AddKnownType("System.Dynamic.IDynamicMetaObjectProvider", "IDynamicMetaObjectProvider");
            feature.AddKnownType("System.Dynamic.IInvokeOnGetBinder", "IInvokeOnGetBinder");
            feature.AddKnownType("System.Dynamic.InvokeBinder", "InvokeBinder");
            feature.AddKnownType("System.Dynamic.InvokeMemberBinder", "InvokeMemberBinder");
            feature.AddKnownType("System.Dynamic.SetIndexBinder", "SetIndexBinder");
            feature.AddKnownType("System.Dynamic.SetMemberBinder", "SetMemberBinder");
            feature.AddKnownType("System.Dynamic.UnaryOperationBinder", "UnaryOperationBinder");
            feature.AddKnownType("System.Linq.IOrderedQueryable", "IOrderedQueryable");
            feature.AddKnownType("System.Linq.IOrderedQueryable`1", "IOrderedQueryable`1'1");
            feature.AddKnownType("System.Linq.IQueryable", "IQueryable");
            feature.AddKnownType("System.Linq.IQueryable`1", "IQueryable`1'1");
            feature.AddKnownType("System.Linq.IQueryProvider", "IQueryProvider");
            feature.AddKnownType("System.Linq.Expressions.BinaryExpression", "BinaryExpression");
            feature.AddKnownType("System.Linq.Expressions.BlockExpression", "BlockExpression");
            feature.AddKnownType("System.Linq.Expressions.CatchBlock", "CatchBlock");
            feature.AddKnownType("System.Linq.Expressions.ConditionalExpression", "ConditionalExpression");
            feature.AddKnownType("System.Linq.Expressions.ConstantExpression", "ConstantExpression");
            feature.AddKnownType("System.Linq.Expressions.DebugInfoExpression", "DebugInfoExpression");
            feature.AddKnownType("System.Linq.Expressions.DefaultExpression", "DefaultExpression");
            feature.AddKnownType("System.Linq.Expressions.DynamicExpression", "DynamicExpression");
            feature.AddKnownType("System.Linq.Expressions.DynamicExpressionVisitor", "DynamicExpressionVisitor");
            feature.AddKnownType("System.Linq.Expressions.ElementInit", "ElementInit");
            feature.AddKnownType("System.Linq.Expressions.Expression", "Expression");
            feature.AddKnownType("System.Linq.Expressions.Expression`1", "Expression`1'1");
            feature.AddKnownType("System.Linq.Expressions.ExpressionType", "ExpressionType");
            feature.AddKnownType("System.Linq.Expressions.ExpressionVisitor", "ExpressionVisitor");
            feature.AddKnownType("System.Linq.Expressions.GotoExpression", "GotoExpression");
            feature.AddKnownType("System.Linq.Expressions.GotoExpressionKind", "GotoExpressionKind");
            feature.AddKnownType("System.Linq.Expressions.IArgumentProvider", "IArgumentProvider");
            feature.AddKnownType("System.Linq.Expressions.IDynamicExpression", "IDynamicExpression");
            feature.AddKnownType("System.Linq.Expressions.IndexExpression", "IndexExpression");
            feature.AddKnownType("System.Linq.Expressions.InvocationExpression", "InvocationExpression");
            feature.AddKnownType("System.Linq.Expressions.LabelExpression", "LabelExpression");
            feature.AddKnownType("System.Linq.Expressions.LabelTarget", "LabelTarget");
            feature.AddKnownType("System.Linq.Expressions.LambdaExpression", "LambdaExpression");
            feature.AddKnownType("System.Linq.Expressions.ListInitExpression", "ListInitExpression");
            feature.AddKnownType("System.Linq.Expressions.LoopExpression", "LoopExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberAssignment", "MemberAssignment");
            feature.AddKnownType("System.Linq.Expressions.MemberBinding", "MemberBinding");
            feature.AddKnownType("System.Linq.Expressions.MemberBindingType", "MemberBindingType");
            feature.AddKnownType("System.Linq.Expressions.MemberExpression", "MemberExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberInitExpression", "MemberInitExpression");
            feature.AddKnownType("System.Linq.Expressions.MemberListBinding", "MemberListBinding");
            feature.AddKnownType("System.Linq.Expressions.MemberMemberBinding", "MemberMemberBinding");
            feature.AddKnownType("System.Linq.Expressions.MethodCallExpression", "MethodCallExpression");
            feature.AddKnownType("System.Linq.Expressions.NewArrayExpression", "NewArrayExpression");
            feature.AddKnownType("System.Linq.Expressions.NewExpression", "NewExpression");
            feature.AddKnownType("System.Linq.Expressions.ParameterExpression", "ParameterExpression");
            feature.AddKnownType("System.Linq.Expressions.RuntimeVariablesExpression", "RuntimeVariablesExpression");
            feature.AddKnownType("System.Linq.Expressions.SwitchCase", "SwitchCase");
            feature.AddKnownType("System.Linq.Expressions.SwitchExpression", "SwitchExpression");
            feature.AddKnownType("System.Linq.Expressions.SymbolDocumentInfo", "SymbolDocumentInfo");
            feature.AddKnownType("System.Linq.Expressions.TryExpression", "TryExpression");
            feature.AddKnownType("System.Linq.Expressions.TypeBinaryExpression", "TypeBinaryExpression");
            feature.AddKnownType("System.Linq.Expressions.UnaryExpression", "UnaryExpression");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSite", "CallSite");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSite`1", "CallSite`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.CallSiteBinder", "CallSiteBinder");
            feature.AddKnownType("System.Runtime.CompilerServices.DebugInfoGenerator", "DebugInfoGenerator");
            feature.AddKnownType("System.Runtime.CompilerServices.DynamicAttribute", "DynamicAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IRuntimeVariables", "IRuntimeVariables");
            feature.AddKnownType("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", "ReadOnlyCollectionBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.RuleCache`1", "RuleCache`1'1");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Parallel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.OrderedParallelQuery`1", "OrderedParallelQuery`1'1");
            feature.AddKnownType("System.Linq.ParallelExecutionMode", "ParallelExecutionMode");
            feature.AddKnownType("System.Linq.ParallelMergeOptions", "ParallelMergeOptions");
            feature.AddKnownType("System.Linq.ParallelQuery", "ParallelQuery");
            feature.AddKnownType("System.Linq.ParallelQuery`1", "ParallelQuery`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Linq.Queryable", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Linq.EnumerableExecutor", "EnumerableExecutor");
            feature.AddKnownType("System.Linq.EnumerableExecutor`1", "EnumerableExecutor`1'1");
            feature.AddKnownType("System.Linq.EnumerableQuery", "EnumerableQuery");
            feature.AddKnownType("System.Linq.EnumerableQuery`1", "EnumerableQuery`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Memory", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.SequencePosition", "SequencePosition");
            feature.AddKnownType("System.Buffers.ArrayBufferWriter`1", "ArrayBufferWriter`1'1");
            feature.AddKnownType("System.Buffers.IBufferWriter`1", "IBufferWriter`1'1");
            feature.AddKnownType("System.Buffers.MemoryPool`1", "MemoryPool`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequenceSegment`1", "ReadOnlySequenceSegment`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequence`1", "ReadOnlySequence`1'1");
            feature.AddKnownType("System.Buffers.ReadOnlySequence`1+Enumerator", "ReadOnlySequence`1'1.Enumerator'1");
            feature.AddKnownType("System.Buffers.SequenceReader`1", "SequenceReader`1'1");
            feature.AddKnownType("System.Buffers.StandardFormat", "StandardFormat");
            feature.AddKnownType("System.Runtime.CompilerServices.IsUnmanagedAttribute", "IsUnmanagedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.SpanRuneEnumerator", "SpanRuneEnumerator");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Http", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Http.ByteArrayContent", "ByteArrayContent");
            feature.AddKnownType("System.Net.Http.ClientCertificateOption", "ClientCertificateOption");
            feature.AddKnownType("System.Net.Http.DelegatingHandler", "DelegatingHandler");
            feature.AddKnownType("System.Net.Http.FormUrlEncodedContent", "FormUrlEncodedContent");
            feature.AddKnownType("System.Net.Http.HttpClient", "HttpClient");
            feature.AddKnownType("System.Net.Http.HttpClientHandler", "HttpClientHandler");
            feature.AddKnownType("System.Net.Http.HttpCompletionOption", "HttpCompletionOption");
            feature.AddKnownType("System.Net.Http.HttpContent", "HttpContent");
            feature.AddKnownType("System.Net.Http.HttpMessageHandler", "HttpMessageHandler");
            feature.AddKnownType("System.Net.Http.HttpMessageInvoker", "HttpMessageInvoker");
            feature.AddKnownType("System.Net.Http.HttpMethod", "HttpMethod");
            feature.AddKnownType("System.Net.Http.HttpRequestException", "HttpRequestException");
            feature.AddKnownType("System.Net.Http.HttpRequestMessage", "HttpRequestMessage");
            feature.AddKnownType("System.Net.Http.HttpRequestOptionsKey`1", "HttpRequestOptionsKey`1'1");
            feature.AddKnownType("System.Net.Http.HttpRequestOptions", "HttpRequestOptions");
            feature.AddKnownType("System.Net.Http.HttpResponseMessage", "HttpResponseMessage");
            feature.AddKnownType("System.Net.Http.HttpVersionPolicy", "HttpVersionPolicy");
            feature.AddKnownType("System.Net.Http.MessageProcessingHandler", "MessageProcessingHandler");
            feature.AddKnownType("System.Net.Http.MultipartContent", "MultipartContent");
            feature.AddKnownType("System.Net.Http.MultipartFormDataContent", "MultipartFormDataContent");
            feature.AddKnownType("System.Net.Http.ReadOnlyMemoryContent", "ReadOnlyMemoryContent");
            feature.AddKnownType("System.Net.Http.SocketsHttpHandler", "SocketsHttpHandler");
            feature.AddKnownType("System.Net.Http.SocketsHttpConnectionContext", "SocketsHttpConnectionContext");
            feature.AddKnownType("System.Net.Http.SocketsHttpPlaintextStreamFilterContext", "SocketsHttpPlaintextStreamFilterContext");
            feature.AddKnownType("System.Net.Http.HttpKeepAlivePingPolicy", "HttpKeepAlivePingPolicy");
            feature.AddKnownType("System.Net.Http.StreamContent", "StreamContent");
            feature.AddKnownType("System.Net.Http.StringContent", "StringContent");
            feature.AddKnownType("System.Net.Http.Headers.AuthenticationHeaderValue", "AuthenticationHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.CacheControlHeaderValue", "CacheControlHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ContentDispositionHeaderValue", "ContentDispositionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ContentRangeHeaderValue", "ContentRangeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.EntityTagHeaderValue", "EntityTagHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.HttpContentHeaders", "HttpContentHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpHeaders", "HttpHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpHeaderValueCollection`1", "HttpHeaderValueCollection`1'1");
            feature.AddKnownType("System.Net.Http.Headers.HttpRequestHeaders", "HttpRequestHeaders");
            feature.AddKnownType("System.Net.Http.Headers.HttpResponseHeaders", "HttpResponseHeaders");
            feature.AddKnownType("System.Net.Http.Headers.MediaTypeHeaderValue", "MediaTypeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.MediaTypeWithQualityHeaderValue", "MediaTypeWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.NameValueHeaderValue", "NameValueHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.NameValueWithParametersHeaderValue", "NameValueWithParametersHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ProductHeaderValue", "ProductHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ProductInfoHeaderValue", "ProductInfoHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeConditionHeaderValue", "RangeConditionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeHeaderValue", "RangeHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RangeItemHeaderValue", "RangeItemHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.RetryConditionHeaderValue", "RetryConditionHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.StringWithQualityHeaderValue", "StringWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.TransferCodingHeaderValue", "TransferCodingHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.TransferCodingWithQualityHeaderValue", "TransferCodingWithQualityHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.ViaHeaderValue", "ViaHeaderValue");
            feature.AddKnownType("System.Net.Http.Headers.WarningHeaderValue", "WarningHeaderValue");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Http.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Http.Json.JsonContent", "JsonContent");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.HttpListener", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.HttpListener", "HttpListener");
            feature.AddKnownType("System.Net.HttpListenerBasicIdentity", "HttpListenerBasicIdentity");
            feature.AddKnownType("System.Net.HttpListenerContext", "HttpListenerContext");
            feature.AddKnownType("System.Net.HttpListenerException", "HttpListenerException");
            feature.AddKnownType("System.Net.HttpListenerPrefixCollection", "HttpListenerPrefixCollection");
            feature.AddKnownType("System.Net.HttpListenerRequest", "HttpListenerRequest");
            feature.AddKnownType("System.Net.HttpListenerResponse", "HttpListenerResponse");
            feature.AddKnownType("System.Net.HttpListenerTimeoutManager", "HttpListenerTimeoutManager");
            feature.AddKnownType("System.Net.WebSockets.HttpListenerWebSocketContext", "HttpListenerWebSocketContext");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Mail", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Mail.AlternateView", "AlternateView");
            feature.AddKnownType("System.Net.Mail.AlternateViewCollection", "AlternateViewCollection");
            feature.AddKnownType("System.Net.Mail.Attachment", "Attachment");
            feature.AddKnownType("System.Net.Mail.AttachmentBase", "AttachmentBase");
            feature.AddKnownType("System.Net.Mail.AttachmentCollection", "AttachmentCollection");
            feature.AddKnownType("System.Net.Mail.DeliveryNotificationOptions", "DeliveryNotificationOptions");
            feature.AddKnownType("System.Net.Mail.LinkedResource", "LinkedResource");
            feature.AddKnownType("System.Net.Mail.LinkedResourceCollection", "LinkedResourceCollection");
            feature.AddKnownType("System.Net.Mail.MailAddress", "MailAddress");
            feature.AddKnownType("System.Net.Mail.MailAddressCollection", "MailAddressCollection");
            feature.AddKnownType("System.Net.Mail.MailMessage", "MailMessage");
            feature.AddKnownType("System.Net.Mail.MailPriority", "MailPriority");
            feature.AddKnownType("System.Net.Mail.SmtpClient", "SmtpClient");
            feature.AddKnownType("System.Net.Mail.SmtpDeliveryFormat", "SmtpDeliveryFormat");
            feature.AddKnownType("System.Net.Mail.SmtpDeliveryMethod", "SmtpDeliveryMethod");
            feature.AddKnownType("System.Net.Mail.SmtpException", "SmtpException");
            feature.AddKnownType("System.Net.Mail.SmtpFailedRecipientException", "SmtpFailedRecipientException");
            feature.AddKnownType("System.Net.Mail.SmtpFailedRecipientsException", "SmtpFailedRecipientsException");
            feature.AddKnownType("System.Net.Mail.SmtpStatusCode", "SmtpStatusCode");
            feature.AddKnownType("System.Net.Mime.ContentDisposition", "ContentDisposition");
            feature.AddKnownType("System.Net.Mime.ContentType", "ContentType");
            feature.AddKnownType("System.Net.Mime.TransferEncoding", "TransferEncoding");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.NameResolution", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.IPHostEntry", "IPHostEntry");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.NetworkInformation", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.NetworkInformation.DuplicateAddressDetectionState", "DuplicateAddressDetectionState");
            feature.AddKnownType("System.Net.NetworkInformation.GatewayIPAddressInformation", "GatewayIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.GatewayIPAddressInformationCollection", "GatewayIPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.IcmpV4Statistics", "IcmpV4Statistics");
            feature.AddKnownType("System.Net.NetworkInformation.IcmpV6Statistics", "IcmpV6Statistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressInformation", "IPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressInformationCollection", "IPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.IPGlobalProperties", "IPGlobalProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPGlobalStatistics", "IPGlobalStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPInterfaceProperties", "IPInterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPInterfaceStatistics", "IPInterfaceStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPv4InterfaceProperties", "IPv4InterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.IPv4InterfaceStatistics", "IPv4InterfaceStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.IPv6InterfaceProperties", "IPv6InterfaceProperties");
            feature.AddKnownType("System.Net.NetworkInformation.MulticastIPAddressInformation", "MulticastIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.MulticastIPAddressInformationCollection", "MulticastIPAddressInformationCollection");
            feature.AddKnownType("System.Net.NetworkInformation.NetBiosNodeType", "NetBiosNodeType");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkAvailabilityEventArgs", "NetworkAvailabilityEventArgs");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkChange", "NetworkChange");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInformationException", "NetworkInformationException");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterface", "NetworkInterface");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterfaceComponent", "NetworkInterfaceComponent");
            feature.AddKnownType("System.Net.NetworkInformation.NetworkInterfaceType", "NetworkInterfaceType");
            feature.AddKnownType("System.Net.NetworkInformation.OperationalStatus", "OperationalStatus");
            feature.AddKnownType("System.Net.NetworkInformation.PhysicalAddress", "PhysicalAddress");
            feature.AddKnownType("System.Net.NetworkInformation.PrefixOrigin", "PrefixOrigin");
            feature.AddKnownType("System.Net.NetworkInformation.ScopeLevel", "ScopeLevel");
            feature.AddKnownType("System.Net.NetworkInformation.SuffixOrigin", "SuffixOrigin");
            feature.AddKnownType("System.Net.NetworkInformation.TcpConnectionInformation", "TcpConnectionInformation");
            feature.AddKnownType("System.Net.NetworkInformation.TcpState", "TcpState");
            feature.AddKnownType("System.Net.NetworkInformation.TcpStatistics", "TcpStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.UdpStatistics", "UdpStatistics");
            feature.AddKnownType("System.Net.NetworkInformation.UnicastIPAddressInformation", "UnicastIPAddressInformation");
            feature.AddKnownType("System.Net.NetworkInformation.UnicastIPAddressInformationCollection", "UnicastIPAddressInformationCollection");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Ping", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.NetworkInformation.IPStatus", "IPStatus");
            feature.AddKnownType("System.Net.NetworkInformation.Ping", "Ping");
            feature.AddKnownType("System.Net.NetworkInformation.PingCompletedEventArgs", "PingCompletedEventArgs");
            feature.AddKnownType("System.Net.NetworkInformation.PingException", "PingException");
            feature.AddKnownType("System.Net.NetworkInformation.PingOptions", "PingOptions");
            feature.AddKnownType("System.Net.NetworkInformation.PingReply", "PingReply");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.AuthenticationSchemes", "AuthenticationSchemes");
            feature.AddKnownType("System.Net.Cookie", "Cookie");
            feature.AddKnownType("System.Net.CookieCollection", "CookieCollection");
            feature.AddKnownType("System.Net.CookieContainer", "CookieContainer");
            feature.AddKnownType("System.Net.CookieException", "CookieException");
            feature.AddKnownType("System.Net.CredentialCache", "CredentialCache");
            feature.AddKnownType("System.Net.DecompressionMethods", "DecompressionMethods");
            feature.AddKnownType("System.Net.DnsEndPoint", "DnsEndPoint");
            feature.AddKnownType("System.Net.EndPoint", "EndPoint");
            feature.AddKnownType("System.Net.HttpStatusCode", "HttpStatusCode");
            feature.AddKnownType("System.Net.ICredentials", "ICredentials");
            feature.AddKnownType("System.Net.ICredentialsByHost", "ICredentialsByHost");
            feature.AddKnownType("System.Net.IPAddress", "IPAddress");
            feature.AddKnownType("System.Net.IPEndPoint", "IPEndPoint");
            feature.AddKnownType("System.Net.IWebProxy", "IWebProxy");
            feature.AddKnownType("System.Net.NetworkCredential", "NetworkCredential");
            feature.AddKnownType("System.Net.SocketAddress", "SocketAddress");
            feature.AddKnownType("System.Net.TransportContext", "TransportContext");
            feature.AddKnownType("System.Net.Cache.RequestCacheLevel", "RequestCacheLevel");
            feature.AddKnownType("System.Net.Cache.RequestCachePolicy", "RequestCachePolicy");
            feature.AddKnownType("System.Net.NetworkInformation.IPAddressCollection", "IPAddressCollection");
            feature.AddKnownType("System.Net.Security.AuthenticationLevel", "AuthenticationLevel");
            feature.AddKnownType("System.Net.Security.SslPolicyErrors", "SslPolicyErrors");
            feature.AddKnownType("System.Net.Sockets.AddressFamily", "AddressFamily");
            feature.AddKnownType("System.Net.Sockets.SocketError", "SocketError");
            feature.AddKnownType("System.Net.Sockets.SocketException", "SocketException");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Authentication.CipherAlgorithmType", "CipherAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.ExchangeAlgorithmType", "ExchangeAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.HashAlgorithmType", "HashAlgorithmType");
            feature.AddKnownType("System.Security.Authentication.SslProtocols", "SslProtocols");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ChannelBinding", "ChannelBinding");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ChannelBindingKind", "ChannelBindingKind");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Requests", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.AuthenticationManager", "AuthenticationManager");
            feature.AddKnownType("System.Net.Authorization", "Authorization");
            feature.AddKnownType("System.Net.FileWebRequest", "FileWebRequest");
            feature.AddKnownType("System.Net.FileWebResponse", "FileWebResponse");
            feature.AddKnownType("System.Net.FtpStatusCode", "FtpStatusCode");
            feature.AddKnownType("System.Net.FtpWebRequest", "FtpWebRequest");
            feature.AddKnownType("System.Net.FtpWebResponse", "FtpWebResponse");
            feature.AddKnownType("System.Net.GlobalProxySelection", "GlobalProxySelection");
            feature.AddKnownType("System.Net.HttpWebRequest", "HttpWebRequest");
            feature.AddKnownType("System.Net.HttpWebResponse", "HttpWebResponse");
            feature.AddKnownType("System.Net.IAuthenticationModule", "IAuthenticationModule");
            feature.AddKnownType("System.Net.ICredentialPolicy", "ICredentialPolicy");
            feature.AddKnownType("System.Net.IWebRequestCreate", "IWebRequestCreate");
            feature.AddKnownType("System.Net.ProtocolViolationException", "ProtocolViolationException");
            feature.AddKnownType("System.Net.WebException", "WebException");
            feature.AddKnownType("System.Net.WebExceptionStatus", "WebExceptionStatus");
            feature.AddKnownType("System.Net.WebRequest", "WebRequest");
            feature.AddKnownType("System.Net.WebResponse", "WebResponse");
            feature.AddKnownType("System.Net.Cache.HttpCacheAgeControl", "HttpCacheAgeControl");
            feature.AddKnownType("System.Net.Cache.HttpRequestCacheLevel", "HttpRequestCacheLevel");
            feature.AddKnownType("System.Net.Cache.HttpRequestCachePolicy", "HttpRequestCachePolicy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Security", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Security.AuthenticatedStream", "AuthenticatedStream");
            feature.AddKnownType("System.Net.Security.CipherSuitesPolicy", "CipherSuitesPolicy");
            feature.AddKnownType("System.Net.Security.EncryptionPolicy", "EncryptionPolicy");
            feature.AddKnownType("System.Net.Security.NegotiateStream", "NegotiateStream");
            feature.AddKnownType("System.Net.Security.ProtectionLevel", "ProtectionLevel");
            feature.AddKnownType("System.Net.Security.SslClientHelloInfo", "SslClientHelloInfo");
            feature.AddKnownType("System.Net.Security.SslApplicationProtocol", "SslApplicationProtocol");
            feature.AddKnownType("System.Net.Security.SslStreamCertificateContext", "SslStreamCertificateContext");
            feature.AddKnownType("System.Net.Security.SslClientAuthenticationOptions", "SslClientAuthenticationOptions");
            feature.AddKnownType("System.Net.Security.SslServerAuthenticationOptions", "SslServerAuthenticationOptions");
            feature.AddKnownType("System.Net.Security.SslStream", "SslStream");
            feature.AddKnownType("System.Net.Security.TlsCipherSuite", "TlsCipherSuite");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Authentication.AuthenticationException", "AuthenticationException");
            feature.AddKnownType("System.Security.Authentication.InvalidCredentialException", "InvalidCredentialException");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy", "ExtendedProtectionPolicy");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.PolicyEnforcement", "PolicyEnforcement");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ProtectionScenario", "ProtectionScenario");
            feature.AddKnownType("System.Security.Authentication.ExtendedProtection.ServiceNameCollection", "ServiceNameCollection");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.ServicePoint", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.SecurityProtocolType", "SecurityProtocolType");
            feature.AddKnownType("System.Net.ServicePoint", "ServicePoint");
            feature.AddKnownType("System.Net.ServicePointManager", "ServicePointManager");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.Sockets", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.Sockets.IOControlCode", "IOControlCode");
            feature.AddKnownType("System.Net.Sockets.IPPacketInformation", "IPPacketInformation");
            feature.AddKnownType("System.Net.Sockets.IPProtectionLevel", "IPProtectionLevel");
            feature.AddKnownType("System.Net.Sockets.IPv6MulticastOption", "IPv6MulticastOption");
            feature.AddKnownType("System.Net.Sockets.LingerOption", "LingerOption");
            feature.AddKnownType("System.Net.Sockets.MulticastOption", "MulticastOption");
            feature.AddKnownType("System.Net.Sockets.NetworkStream", "NetworkStream");
            feature.AddKnownType("System.Net.Sockets.ProtocolFamily", "ProtocolFamily");
            feature.AddKnownType("System.Net.Sockets.ProtocolType", "ProtocolType");
            feature.AddKnownType("System.Net.Sockets.SafeSocketHandle", "SafeSocketHandle");
            feature.AddKnownType("System.Net.Sockets.SelectMode", "SelectMode");
            feature.AddKnownType("System.Net.Sockets.SendPacketsElement", "SendPacketsElement");
            feature.AddKnownType("System.Net.Sockets.Socket", "Socket");
            feature.AddKnownType("System.Net.Sockets.SocketAsyncEventArgs", "SocketAsyncEventArgs");
            feature.AddKnownType("System.Net.Sockets.SocketAsyncOperation", "SocketAsyncOperation");
            feature.AddKnownType("System.Net.Sockets.SocketFlags", "SocketFlags");
            feature.AddKnownType("System.Net.Sockets.SocketInformation", "SocketInformation");
            feature.AddKnownType("System.Net.Sockets.SocketInformationOptions", "SocketInformationOptions");
            feature.AddKnownType("System.Net.Sockets.SocketOptionLevel", "SocketOptionLevel");
            feature.AddKnownType("System.Net.Sockets.SocketOptionName", "SocketOptionName");
            feature.AddKnownType("System.Net.Sockets.SocketReceiveFromResult", "SocketReceiveFromResult");
            feature.AddKnownType("System.Net.Sockets.SocketReceiveMessageFromResult", "SocketReceiveMessageFromResult");
            feature.AddKnownType("System.Net.Sockets.SocketShutdown", "SocketShutdown");
            feature.AddKnownType("System.Net.Sockets.SocketType", "SocketType");
            feature.AddKnownType("System.Net.Sockets.TcpClient", "TcpClient");
            feature.AddKnownType("System.Net.Sockets.TcpListener", "TcpListener");
            feature.AddKnownType("System.Net.Sockets.TransmitFileOptions", "TransmitFileOptions");
            feature.AddKnownType("System.Net.Sockets.UdpClient", "UdpClient");
            feature.AddKnownType("System.Net.Sockets.UdpReceiveResult", "UdpReceiveResult");
            feature.AddKnownType("System.Net.Sockets.UnixDomainSocketEndPoint", "UnixDomainSocketEndPoint");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebClient", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.DownloadDataCompletedEventArgs", "DownloadDataCompletedEventArgs");
            feature.AddKnownType("System.Net.DownloadProgressChangedEventArgs", "DownloadProgressChangedEventArgs");
            feature.AddKnownType("System.Net.DownloadStringCompletedEventArgs", "DownloadStringCompletedEventArgs");
            feature.AddKnownType("System.Net.OpenReadCompletedEventArgs", "OpenReadCompletedEventArgs");
            feature.AddKnownType("System.Net.OpenWriteCompletedEventArgs", "OpenWriteCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadDataCompletedEventArgs", "UploadDataCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadFileCompletedEventArgs", "UploadFileCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadProgressChangedEventArgs", "UploadProgressChangedEventArgs");
            feature.AddKnownType("System.Net.UploadStringCompletedEventArgs", "UploadStringCompletedEventArgs");
            feature.AddKnownType("System.Net.UploadValuesCompletedEventArgs", "UploadValuesCompletedEventArgs");
            feature.AddKnownType("System.Net.WebClient", "WebClient");
            feature.AddKnownType("System.Net.WriteStreamClosedEventArgs", "WriteStreamClosedEventArgs");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebHeaderCollection", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.HttpRequestHeader", "HttpRequestHeader");
            feature.AddKnownType("System.Net.HttpResponseHeader", "HttpResponseHeader");
            feature.AddKnownType("System.Net.WebHeaderCollection", "WebHeaderCollection");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebProxy", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.IWebProxyScript", "IWebProxyScript");
            feature.AddKnownType("System.Net.WebProxy", "WebProxy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebSockets.Client", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.WebSockets.ClientWebSocket", "ClientWebSocket");
            feature.AddKnownType("System.Net.WebSockets.ClientWebSocketOptions", "ClientWebSocketOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Net.WebSockets", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Net.WebSockets.ValueWebSocketReceiveResult", "ValueWebSocketReceiveResult");
            feature.AddKnownType("System.Net.WebSockets.WebSocket", "WebSocket");
            feature.AddKnownType("System.Net.WebSockets.WebSocketCloseStatus", "WebSocketCloseStatus");
            feature.AddKnownType("System.Net.WebSockets.WebSocketContext", "WebSocketContext");
            feature.AddKnownType("System.Net.WebSockets.WebSocketError", "WebSocketError");
            feature.AddKnownType("System.Net.WebSockets.WebSocketException", "WebSocketException");
            feature.AddKnownType("System.Net.WebSockets.WebSocketMessageType", "WebSocketMessageType");
            feature.AddKnownType("System.Net.WebSockets.WebSocketReceiveResult", "WebSocketReceiveResult");
            feature.AddKnownType("System.Net.WebSockets.WebSocketState", "WebSocketState");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Numerics.Vectors", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Numerics.Matrix3x2", "Matrix3x2");
            feature.AddKnownType("System.Numerics.Matrix4x4", "Matrix4x4");
            feature.AddKnownType("System.Numerics.Plane", "Plane");
            feature.AddKnownType("System.Numerics.Quaternion", "Quaternion");
            feature.AddKnownType("System.Numerics.Vector`1", "Vector`1'1");
            feature.AddKnownType("System.Numerics.Vector2", "Vector2");
            feature.AddKnownType("System.Numerics.Vector3", "Vector3");
            feature.AddKnownType("System.Numerics.Vector4", "Vector4");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.ObjectModel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Collections.ObjectModel.KeyedCollection`2", "KeyedCollection`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.ObservableCollection`1", "ObservableCollection`1'1");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2", "ReadOnlyDictionary`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection", "ReadOnlyDictionary`2'2.KeyCollection'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection", "ReadOnlyDictionary`2'2.ValueCollection'2");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyObservableCollection`1", "ReadOnlyObservableCollection`1'1");
            feature.AddKnownType("System.Collections.Specialized.INotifyCollectionChanged", "INotifyCollectionChanged");
            feature.AddKnownType("System.Collections.Specialized.NotifyCollectionChangedAction", "NotifyCollectionChangedAction");
            feature.AddKnownType("System.Collections.Specialized.NotifyCollectionChangedEventArgs", "NotifyCollectionChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.DataErrorsChangedEventArgs", "DataErrorsChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.INotifyDataErrorInfo", "INotifyDataErrorInfo");
            feature.AddKnownType("System.ComponentModel.INotifyPropertyChanged", "INotifyPropertyChanged");
            feature.AddKnownType("System.ComponentModel.INotifyPropertyChanging", "INotifyPropertyChanging");
            feature.AddKnownType("System.ComponentModel.PropertyChangedEventArgs", "PropertyChangedEventArgs");
            feature.AddKnownType("System.ComponentModel.PropertyChangingEventArgs", "PropertyChangingEventArgs");
            feature.AddKnownType("System.ComponentModel.TypeConverterAttribute", "TypeConverterAttribute");
            feature.AddKnownType("System.ComponentModel.TypeDescriptionProviderAttribute", "TypeDescriptionProviderAttribute");
            feature.AddKnownType("System.Reflection.ICustomTypeProvider", "ICustomTypeProvider");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Windows.Input.ICommand", "ICommand");
            feature.AddKnownType("System.Windows.Markup.ValueSerializerAttribute", "ValueSerializerAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.DispatchProxy", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.DispatchProxy", "DispatchProxy");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.AssemblyBuilder", "AssemblyBuilder");
            feature.AddKnownType("System.Reflection.Emit.AssemblyBuilderAccess", "AssemblyBuilderAccess");
            feature.AddKnownType("System.Reflection.Emit.ConstructorBuilder", "ConstructorBuilder");
            feature.AddKnownType("System.Reflection.Emit.EnumBuilder", "EnumBuilder");
            feature.AddKnownType("System.Reflection.Emit.EventBuilder", "EventBuilder");
            feature.AddKnownType("System.Reflection.Emit.FieldBuilder", "FieldBuilder");
            feature.AddKnownType("System.Reflection.Emit.GenericTypeParameterBuilder", "GenericTypeParameterBuilder");
            feature.AddKnownType("System.Reflection.Emit.MethodBuilder", "MethodBuilder");
            feature.AddKnownType("System.Reflection.Emit.ModuleBuilder", "ModuleBuilder");
            feature.AddKnownType("System.Reflection.Emit.PropertyBuilder", "PropertyBuilder");
            feature.AddKnownType("System.Reflection.Emit.TypeBuilder", "TypeBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit.ILGeneration", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.CustomAttributeBuilder", "CustomAttributeBuilder");
            feature.AddKnownType("System.Reflection.Emit.ILGenerator", "ILGenerator");
            feature.AddKnownType("System.Reflection.Emit.Label", "Label");
            feature.AddKnownType("System.Reflection.Emit.LocalBuilder", "LocalBuilder");
            feature.AddKnownType("System.Reflection.Emit.ParameterBuilder", "ParameterBuilder");
            feature.AddKnownType("System.Reflection.Emit.SignatureHelper", "SignatureHelper");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Emit.Lightweight", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.DynamicILInfo", "DynamicILInfo");
            feature.AddKnownType("System.Reflection.Emit.DynamicMethod", "DynamicMethod");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Metadata", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFlags", "AssemblyFlags");
            feature.AddKnownType("System.Reflection.AssemblyHashAlgorithm", "AssemblyHashAlgorithm");
            feature.AddKnownType("System.Reflection.DeclarativeSecurityAction", "DeclarativeSecurityAction");
            feature.AddKnownType("System.Reflection.ManifestResourceAttributes", "ManifestResourceAttributes");
            feature.AddKnownType("System.Reflection.MethodImportAttributes", "MethodImportAttributes");
            feature.AddKnownType("System.Reflection.MethodSemanticsAttributes", "MethodSemanticsAttributes");
            feature.AddKnownType("System.Reflection.Metadata.ArrayShape", "ArrayShape");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyDefinition", "AssemblyDefinition");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyDefinitionHandle", "AssemblyDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFile", "AssemblyFile");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandle", "AssemblyFileHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandleCollection", "AssemblyFileHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyFileHandleCollection+Enumerator", "AssemblyFileHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReference", "AssemblyReference");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandle", "AssemblyReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandleCollection", "AssemblyReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.AssemblyReferenceHandleCollection+Enumerator", "AssemblyReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.Blob", "Blob");
            feature.AddKnownType("System.Reflection.Metadata.BlobBuilder", "BlobBuilder");
            feature.AddKnownType("System.Reflection.Metadata.BlobBuilder+Blobs", "BlobBuilder.Blobs");
            feature.AddKnownType("System.Reflection.Metadata.BlobContentId", "BlobContentId");
            feature.AddKnownType("System.Reflection.Metadata.BlobHandle", "BlobHandle");
            feature.AddKnownType("System.Reflection.Metadata.BlobReader", "BlobReader");
            feature.AddKnownType("System.Reflection.Metadata.BlobWriter", "BlobWriter");
            feature.AddKnownType("System.Reflection.Metadata.Constant", "Constant");
            feature.AddKnownType("System.Reflection.Metadata.ConstantHandle", "ConstantHandle");
            feature.AddKnownType("System.Reflection.Metadata.ConstantTypeCode", "ConstantTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttribute", "CustomAttribute");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandle", "CustomAttributeHandle");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandleCollection", "CustomAttributeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeHandleCollection+Enumerator", "CustomAttributeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeNamedArgumentKind", "CustomAttributeNamedArgumentKind");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeNamedArgument`1", "CustomAttributeNamedArgument`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeTypedArgument`1", "CustomAttributeTypedArgument`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomAttributeValue`1", "CustomAttributeValue`1'1");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformation", "CustomDebugInformation");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandle", "CustomDebugInformationHandle");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandleCollection", "CustomDebugInformationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.CustomDebugInformationHandleCollection+Enumerator", "CustomDebugInformationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.DebugMetadataHeader", "DebugMetadataHeader");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttribute", "DeclarativeSecurityAttribute");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandle", "DeclarativeSecurityAttributeHandle");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection", "DeclarativeSecurityAttributeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection+Enumerator", "DeclarativeSecurityAttributeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.Document", "Document");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandle", "DocumentHandle");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandleCollection", "DocumentHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.DocumentHandleCollection+Enumerator", "DocumentHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.DocumentNameBlobHandle", "DocumentNameBlobHandle");
            feature.AddKnownType("System.Reflection.Metadata.EntityHandle", "EntityHandle");
            feature.AddKnownType("System.Reflection.Metadata.EventAccessors", "EventAccessors");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinition", "EventDefinition");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandle", "EventDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandleCollection", "EventDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.EventDefinitionHandleCollection+Enumerator", "EventDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ExceptionRegion", "ExceptionRegion");
            feature.AddKnownType("System.Reflection.Metadata.ExceptionRegionKind", "ExceptionRegionKind");
            feature.AddKnownType("System.Reflection.Metadata.ExportedType", "ExportedType");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandle", "ExportedTypeHandle");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandleCollection", "ExportedTypeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ExportedTypeHandleCollection+Enumerator", "ExportedTypeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinition", "FieldDefinition");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandle", "FieldDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandleCollection", "FieldDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.FieldDefinitionHandleCollection+Enumerator", "FieldDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameter", "GenericParameter");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraint", "GenericParameterConstraint");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandle", "GenericParameterConstraintHandle");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandleCollection", "GenericParameterConstraintHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterConstraintHandleCollection+Enumerator", "GenericParameterConstraintHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandle", "GenericParameterHandle");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandleCollection", "GenericParameterHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.GenericParameterHandleCollection+Enumerator", "GenericParameterHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.GuidHandle", "GuidHandle");
            feature.AddKnownType("System.Reflection.Metadata.Handle", "Handle");
            feature.AddKnownType("System.Reflection.Metadata.HandleComparer", "HandleComparer");
            feature.AddKnownType("System.Reflection.Metadata.HandleKind", "HandleKind");
            feature.AddKnownType("System.Reflection.Metadata.IConstructedTypeProvider`1", "IConstructedTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ICustomAttributeTypeProvider`1", "ICustomAttributeTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ILOpCode", "ILOpCode");
            feature.AddKnownType("System.Reflection.Metadata.ImageFormatLimitationException", "ImageFormatLimitationException");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinition", "ImportDefinition");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionCollection", "ImportDefinitionCollection");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionCollection+Enumerator", "ImportDefinitionCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ImportDefinitionKind", "ImportDefinitionKind");
            feature.AddKnownType("System.Reflection.Metadata.ImportScope", "ImportScope");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeCollection", "ImportScopeCollection");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeCollection+Enumerator", "ImportScopeCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ImportScopeHandle", "ImportScopeHandle");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementation", "InterfaceImplementation");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandle", "InterfaceImplementationHandle");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandleCollection", "InterfaceImplementationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.InterfaceImplementationHandleCollection+Enumerator", "InterfaceImplementationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ISignatureTypeProvider`2", "ISignatureTypeProvider`2'2");
            feature.AddKnownType("System.Reflection.Metadata.ISimpleTypeProvider`1", "ISimpleTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.ISZArrayTypeProvider`1", "ISZArrayTypeProvider`1'1");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstant", "LocalConstant");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandle", "LocalConstantHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandleCollection", "LocalConstantHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalConstantHandleCollection+Enumerator", "LocalConstantHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalScope", "LocalScope");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandle", "LocalScopeHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection", "LocalScopeHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection+ChildrenEnumerator", "LocalScopeHandleCollection.ChildrenEnumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalScopeHandleCollection+Enumerator", "LocalScopeHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariable", "LocalVariable");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableAttributes", "LocalVariableAttributes");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandle", "LocalVariableHandle");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandleCollection", "LocalVariableHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.LocalVariableHandleCollection+Enumerator", "LocalVariableHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResource", "ManifestResource");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandle", "ManifestResourceHandle");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandleCollection", "ManifestResourceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ManifestResourceHandleCollection+Enumerator", "ManifestResourceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MemberReference", "MemberReference");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandle", "MemberReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandleCollection", "MemberReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceHandleCollection+Enumerator", "MemberReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MemberReferenceKind", "MemberReferenceKind");
            feature.AddKnownType("System.Reflection.Metadata.MetadataKind", "MetadataKind");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReader", "MetadataReader");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReaderOptions", "MetadataReaderOptions");
            feature.AddKnownType("System.Reflection.Metadata.MetadataReaderProvider", "MetadataReaderProvider");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStreamOptions", "MetadataStreamOptions");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStringComparer", "MetadataStringComparer");
            feature.AddKnownType("System.Reflection.Metadata.MetadataStringDecoder", "MetadataStringDecoder");
            feature.AddKnownType("System.Reflection.Metadata.MethodBodyBlock", "MethodBodyBlock");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformation", "MethodDebugInformation");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandle", "MethodDebugInformationHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandleCollection", "MethodDebugInformationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodDebugInformationHandleCollection+Enumerator", "MethodDebugInformationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinition", "MethodDefinition");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandle", "MethodDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandleCollection", "MethodDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodDefinitionHandleCollection+Enumerator", "MethodDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementation", "MethodImplementation");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandle", "MethodImplementationHandle");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandleCollection", "MethodImplementationHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.MethodImplementationHandleCollection+Enumerator", "MethodImplementationHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.MethodImport", "MethodImport");
            feature.AddKnownType("System.Reflection.Metadata.MethodSignature`1", "MethodSignature`1'1");
            feature.AddKnownType("System.Reflection.Metadata.MethodSpecification", "MethodSpecification");
            feature.AddKnownType("System.Reflection.Metadata.MethodSpecificationHandle", "MethodSpecificationHandle");
            feature.AddKnownType("System.Reflection.Metadata.ModuleDefinition", "ModuleDefinition");
            feature.AddKnownType("System.Reflection.Metadata.ModuleDefinitionHandle", "ModuleDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.ModuleReference", "ModuleReference");
            feature.AddKnownType("System.Reflection.Metadata.ModuleReferenceHandle", "ModuleReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.NamespaceDefinition", "NamespaceDefinition");
            feature.AddKnownType("System.Reflection.Metadata.NamespaceDefinitionHandle", "NamespaceDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.Parameter", "Parameter");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandle", "ParameterHandle");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandleCollection", "ParameterHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.ParameterHandleCollection+Enumerator", "ParameterHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.PrimitiveSerializationTypeCode", "PrimitiveSerializationTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.PrimitiveTypeCode", "PrimitiveTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.PropertyAccessors", "PropertyAccessors");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinition", "PropertyDefinition");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandle", "PropertyDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandleCollection", "PropertyDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.PropertyDefinitionHandleCollection+Enumerator", "PropertyDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.ReservedBlob`1", "ReservedBlob`1'1");
            feature.AddKnownType("System.Reflection.Metadata.SequencePoint", "SequencePoint");
            feature.AddKnownType("System.Reflection.Metadata.SequencePointCollection", "SequencePointCollection");
            feature.AddKnownType("System.Reflection.Metadata.SequencePointCollection+Enumerator", "SequencePointCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.SerializationTypeCode", "SerializationTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.SignatureAttributes", "SignatureAttributes");
            feature.AddKnownType("System.Reflection.Metadata.SignatureCallingConvention", "SignatureCallingConvention");
            feature.AddKnownType("System.Reflection.Metadata.SignatureHeader", "SignatureHeader");
            feature.AddKnownType("System.Reflection.Metadata.SignatureKind", "SignatureKind");
            feature.AddKnownType("System.Reflection.Metadata.SignatureTypeCode", "SignatureTypeCode");
            feature.AddKnownType("System.Reflection.Metadata.SignatureTypeKind", "SignatureTypeKind");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignature", "StandaloneSignature");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignatureHandle", "StandaloneSignatureHandle");
            feature.AddKnownType("System.Reflection.Metadata.StandaloneSignatureKind", "StandaloneSignatureKind");
            feature.AddKnownType("System.Reflection.Metadata.StringHandle", "StringHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinition", "TypeDefinition");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandle", "TypeDefinitionHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandleCollection", "TypeDefinitionHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.TypeDefinitionHandleCollection+Enumerator", "TypeDefinitionHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.TypeLayout", "TypeLayout");
            feature.AddKnownType("System.Reflection.Metadata.TypeReference", "TypeReference");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandle", "TypeReferenceHandle");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandleCollection", "TypeReferenceHandleCollection");
            feature.AddKnownType("System.Reflection.Metadata.TypeReferenceHandleCollection+Enumerator", "TypeReferenceHandleCollection.Enumerator");
            feature.AddKnownType("System.Reflection.Metadata.TypeSpecification", "TypeSpecification");
            feature.AddKnownType("System.Reflection.Metadata.TypeSpecificationHandle", "TypeSpecificationHandle");
            feature.AddKnownType("System.Reflection.Metadata.UserStringHandle", "UserStringHandle");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ArrayShapeEncoder", "ArrayShapeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.BlobEncoder", "BlobEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ControlFlowBuilder", "ControlFlowBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder", "CustomAttributeArrayTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder", "CustomAttributeElementTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder", "CustomAttributeNamedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.CustomModifiersEncoder", "CustomModifiersEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry", "EditAndContinueLogEntry");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.EditAndContinueOperation", "EditAndContinueOperation");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder", "ExceptionRegionEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder", "FixedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.FunctionPointerAttributes", "FunctionPointerAttributes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder", "GenericTypeArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.HeapIndex", "HeapIndex");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.InstructionEncoder", "InstructionEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LabelHandle", "LabelHandle");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LiteralEncoder", "LiteralEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LiteralsEncoder", "LiteralsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LocalVariablesEncoder", "LocalVariablesEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder", "LocalVariableTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataAggregator", "MetadataAggregator");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataBuilder", "MetadataBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataRootBuilder", "MetadataRootBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MetadataSizes", "MetadataSizes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyAttributes", "MethodBodyAttributes");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder", "MethodBodyStreamEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder+MethodBody", "MethodBodyStreamEncoder.MethodBody");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.MethodSignatureEncoder", "MethodSignatureEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder", "NamedArgumentsEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder", "NamedArgumentTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.NameEncoder", "NameEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ParametersEncoder", "ParametersEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ParameterTypeEncoder", "ParameterTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.PermissionSetEncoder", "PermissionSetEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.PortablePdbBuilder", "PortablePdbBuilder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ReturnTypeEncoder", "ReturnTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.ScalarEncoder", "ScalarEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.SignatureDecoder`2", "SignatureDecoder`2'2");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.SignatureTypeEncoder", "SignatureTypeEncoder");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.TableIndex", "TableIndex");
            feature.AddKnownType("System.Reflection.Metadata.Ecma335.VectorEncoder", "VectorEncoder");
            feature.AddKnownType("System.Reflection.PortableExecutable.Characteristics", "Characteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.CodeViewDebugDirectoryData", "CodeViewDebugDirectoryData");
            feature.AddKnownType("System.Reflection.PortableExecutable.CoffHeader", "CoffHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.CorFlags", "CorFlags");
            feature.AddKnownType("System.Reflection.PortableExecutable.CorHeader", "CorHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryBuilder", "DebugDirectoryBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryEntry", "DebugDirectoryEntry");
            feature.AddKnownType("System.Reflection.PortableExecutable.DebugDirectoryEntryType", "DebugDirectoryEntryType");
            feature.AddKnownType("System.Reflection.PortableExecutable.DirectoryEntry", "DirectoryEntry");
            feature.AddKnownType("System.Reflection.PortableExecutable.DllCharacteristics", "DllCharacteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.Machine", "Machine");
            feature.AddKnownType("System.Reflection.PortableExecutable.ManagedPEBuilder", "ManagedPEBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData", "PdbChecksumDebugDirectoryData");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEBuilder", "PEBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEBuilder+Section", "Section");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEDirectoriesBuilder", "PEDirectoriesBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeader", "PEHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeaderBuilder", "PEHeaderBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEHeaders", "PEHeaders");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEMagic", "PEMagic");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEMemoryBlock", "PEMemoryBlock");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEReader", "PEReader");
            feature.AddKnownType("System.Reflection.PortableExecutable.PEStreamOptions", "PEStreamOptions");
            feature.AddKnownType("System.Reflection.PortableExecutable.ResourceSectionBuilder", "ResourceSectionBuilder");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionCharacteristics", "SectionCharacteristics");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionHeader", "SectionHeader");
            feature.AddKnownType("System.Reflection.PortableExecutable.SectionLocation", "SectionLocation");
            feature.AddKnownType("System.Reflection.PortableExecutable.Subsystem", "Subsystem");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Reflection.Emit.FlowControl", "FlowControl");
            feature.AddKnownType("System.Reflection.Emit.OpCode", "OpCode");
            feature.AddKnownType("System.Reflection.Emit.OpCodes", "OpCodes");
            feature.AddKnownType("System.Reflection.Emit.OpCodeType", "OpCodeType");
            feature.AddKnownType("System.Reflection.Emit.OperandType", "OperandType");
            feature.AddKnownType("System.Reflection.Emit.PackingSize", "PackingSize");
            feature.AddKnownType("System.Reflection.Emit.StackBehaviour", "StackBehaviour");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Reflection.TypeExtensions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Resources.Writer", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Resources.IResourceWriter", "IResourceWriter");
            feature.AddKnownType("System.Resources.ResourceWriter", "ResourceWriter");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.CompilerServices.Unsafe", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.CompilerServices.VisualC", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CppInlineNamespaceAttribute", "CppInlineNamespaceAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.HasCopySemanticsAttribute", "HasCopySemanticsAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NativeCppClassAttribute", "NativeCppClassAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RequiredAttributeAttribute", "RequiredAttributeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ScopelessEnumAttribute", "ScopelessEnumAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHere", "AssemblyAttributesGoHere");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereS", "AssemblyAttributesGoHereS");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereM", "AssemblyAttributesGoHereM");
            feature.AddKnownType("System.Runtime.CompilerServices.AssemblyAttributesGoHereSM", "AssemblyAttributesGoHereSM");
            feature.AddKnownType("System.Runtime.CompilerServices.DecoratedNameAttribute", "DecoratedNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SuppressMergeCheckAttribute", "SuppressMergeCheckAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeFileHandle,System.Runtime", "Microsoft.Win32.SafeHandles.SafeFileHandle");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid,System.Runtime", "Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Runtime", "Microsoft.Win32.SafeHandles.SafeWaitHandle");
            feature.AddKnownType("System.AccessViolationException", "AccessViolationException");
            feature.AddKnownType("System.AggregateException", "AggregateException");
            feature.AddKnownType("System.AppDomain", "AppDomain");
            feature.AddKnownType("System.AppDomainSetup", "AppDomainSetup");
            feature.AddKnownType("System.AppDomainUnloadedException", "AppDomainUnloadedException");
            feature.AddKnownType("System.ApplicationException", "ApplicationException");
            feature.AddKnownType("System.ApplicationId", "ApplicationId");
            feature.AddKnownType("System.ArgumentException", "ArgumentException");
            feature.AddKnownType("System.ArgumentNullException", "ArgumentNullException");
            feature.AddKnownType("System.ArgumentOutOfRangeException", "ArgumentOutOfRangeException");
            feature.AddKnownType("System.ArithmeticException", "ArithmeticException");
            feature.AddKnownType("System.ArraySegment`1", "ArraySegment`1'1");
            feature.AddKnownType("System.ArraySegment`1+Enumerator", "ArraySegment`1'1.Enumerator'1");
            feature.AddKnownType("System.ArrayTypeMismatchException", "ArrayTypeMismatchException");
            feature.AddKnownType("System.AssemblyLoadEventArgs", "AssemblyLoadEventArgs");
            feature.AddKnownType("System.Attribute", "Attribute");
            feature.AddKnownType("System.AttributeTargets", "AttributeTargets");
            feature.AddKnownType("System.AttributeUsageAttribute", "AttributeUsageAttribute");
            feature.AddKnownType("System.BadImageFormatException", "BadImageFormatException");
            feature.AddKnownType("System.Base64FormattingOptions", "Base64FormattingOptions");
            feature.AddKnownType("System.CannotUnloadAppDomainException", "CannotUnloadAppDomainException");
            feature.AddKnownType("System.CharEnumerator", "CharEnumerator");
            feature.AddKnownType("System.CLSCompliantAttribute", "CLSCompliantAttribute");
            feature.AddKnownType("System.ContextBoundObject", "ContextBoundObject");
            feature.AddKnownType("System.ContextMarshalException", "ContextMarshalException");
            feature.AddKnownType("System.ContextStaticAttribute", "ContextStaticAttribute");
            feature.AddKnownType("System.DateTimeKind", "DateTimeKind");
            feature.AddKnownType("System.DateTimeOffset", "DateTimeOffset");
            feature.AddKnownType("System.DayOfWeek", "DayOfWeek");
            feature.AddKnownType("System.DBNull", "DBNull");
            feature.AddKnownType("System.DivideByZeroException", "DivideByZeroException");
            feature.AddKnownType("System.DuplicateWaitObjectException", "DuplicateWaitObjectException");
            feature.AddKnownType("System.EntryPointNotFoundException", "EntryPointNotFoundException");
            feature.AddKnownType("System.Environment+SpecialFolder", "Environment.SpecialFolder");
            feature.AddKnownType("System.Environment+SpecialFolderOption", "Environment.SpecialFolderOption");
            feature.AddKnownType("System.EnvironmentVariableTarget", "EnvironmentVariableTarget");
            feature.AddKnownType("System.EventArgs", "EventArgs");
            feature.AddKnownType("System.Exception", "Exception");
            feature.AddKnownType("System.ExecutionEngineException", "ExecutionEngineException");
            feature.AddKnownType("System.FieldAccessException", "FieldAccessException");
            feature.AddKnownType("System.FileStyleUriParser", "FileStyleUriParser");
            feature.AddKnownType("System.FlagsAttribute", "FlagsAttribute");
            feature.AddKnownType("System.FormatException", "FormatException");
            feature.AddKnownType("System.FormattableString", "FormattableString");
            feature.AddKnownType("System.FtpStyleUriParser", "FtpStyleUriParser");
            feature.AddKnownType("System.GCCollectionMode", "GCCollectionMode");
            feature.AddKnownType("System.GCGenerationInfo", "GCGenerationInfo");
            feature.AddKnownType("System.GCKind", "GCKind");
            feature.AddKnownType("System.GCMemoryInfo", "GCMemoryInfo");
            feature.AddKnownType("System.GCNotificationStatus", "GCNotificationStatus");
            feature.AddKnownType("System.GenericUriParser", "GenericUriParser");
            feature.AddKnownType("System.GenericUriParserOptions", "GenericUriParserOptions");
            feature.AddKnownType("System.GopherStyleUriParser", "GopherStyleUriParser");
            feature.AddKnownType("System.Guid", "Guid");
            feature.AddKnownType("System.Half", "Half");
            feature.AddKnownType("System.HashCode", "HashCode");
            feature.AddKnownType("System.HttpStyleUriParser", "HttpStyleUriParser");
            feature.AddKnownType("System.IAsyncDisposable", "IAsyncDisposable");
            feature.AddKnownType("System.ICloneable", "ICloneable");
            feature.AddKnownType("System.IComparable", "IComparable");
            feature.AddKnownType("System.IComparable`1", "IComparable`1'1");
            feature.AddKnownType("System.IConvertible", "IConvertible");
            feature.AddKnownType("System.ICustomFormatter", "ICustomFormatter");
            feature.AddKnownType("System.IEquatable`1", "IEquatable`1'1");
            feature.AddKnownType("System.IFormatProvider", "IFormatProvider");
            feature.AddKnownType("System.IFormattable", "IFormattable");
            feature.AddKnownType("System.Index", "Index");
            feature.AddKnownType("System.IndexOutOfRangeException", "IndexOutOfRangeException");
            feature.AddKnownType("System.InsufficientExecutionStackException", "InsufficientExecutionStackException");
            feature.AddKnownType("System.InsufficientMemoryException", "InsufficientMemoryException");
            feature.AddKnownType("System.InvalidCastException", "InvalidCastException");
            feature.AddKnownType("System.InvalidOperationException", "InvalidOperationException");
            feature.AddKnownType("System.InvalidProgramException", "InvalidProgramException");
            feature.AddKnownType("System.InvalidTimeZoneException", "InvalidTimeZoneException");
            feature.AddKnownType("System.IObservable`1", "IObservable`1'1");
            feature.AddKnownType("System.IObserver`1", "IObserver`1'1");
            feature.AddKnownType("System.IProgress`1", "IProgress`1'1");
            feature.AddKnownType("System.Lazy`1", "Lazy`1'1");
            feature.AddKnownType("System.Lazy`2", "Lazy`2'2");
            feature.AddKnownType("System.LdapStyleUriParser", "LdapStyleUriParser");
            feature.AddKnownType("System.LoaderOptimization", "LoaderOptimization");
            feature.AddKnownType("System.LoaderOptimizationAttribute", "LoaderOptimizationAttribute");
            feature.AddKnownType("System.MarshalByRefObject", "MarshalByRefObject");
            feature.AddKnownType("System.MemberAccessException", "MemberAccessException");
            feature.AddKnownType("System.Memory`1", "Memory`1'1");
            feature.AddKnownType("System.MethodAccessException", "MethodAccessException");
            feature.AddKnownType("System.MidpointRounding", "MidpointRounding");
            feature.AddKnownType("System.MissingFieldException", "MissingFieldException");
            feature.AddKnownType("System.MissingMemberException", "MissingMemberException");
            feature.AddKnownType("System.MissingMethodException", "MissingMethodException");
            feature.AddKnownType("System.ModuleHandle", "ModuleHandle");
            feature.AddKnownType("System.MTAThreadAttribute", "MTAThreadAttribute");
            feature.AddKnownType("System.MulticastNotSupportedException", "MulticastNotSupportedException");
            feature.AddKnownType("System.NetPipeStyleUriParser", "NetPipeStyleUriParser");
            feature.AddKnownType("System.NetTcpStyleUriParser", "NetTcpStyleUriParser");
            feature.AddKnownType("System.NewsStyleUriParser", "NewsStyleUriParser");
            feature.AddKnownType("System.NonSerializedAttribute", "NonSerializedAttribute");
            feature.AddKnownType("System.NotFiniteNumberException", "NotFiniteNumberException");
            feature.AddKnownType("System.NotImplementedException", "NotImplementedException");
            feature.AddKnownType("System.NotSupportedException", "NotSupportedException");
            feature.AddKnownType("System.NullReferenceException", "NullReferenceException");
            feature.AddKnownType("System.ObjectDisposedException", "ObjectDisposedException");
            feature.AddKnownType("System.ObsoleteAttribute", "ObsoleteAttribute");
            feature.AddKnownType("System.OperatingSystem", "OperatingSystem");
            feature.AddKnownType("System.OperationCanceledException", "OperationCanceledException");
            feature.AddKnownType("System.OutOfMemoryException", "OutOfMemoryException");
            feature.AddKnownType("System.OverflowException", "OverflowException");
            feature.AddKnownType("System.ParamArrayAttribute", "ParamArrayAttribute");
            feature.AddKnownType("System.PlatformID", "PlatformID");
            feature.AddKnownType("System.PlatformNotSupportedException", "PlatformNotSupportedException");
            feature.AddKnownType("System.Progress`1", "Progress`1'1");
            feature.AddKnownType("System.Random", "Random");
            feature.AddKnownType("System.Range", "Range");
            feature.AddKnownType("System.RankException", "RankException");
            feature.AddKnownType("System.ReadOnlyMemory`1", "ReadOnlyMemory`1'1");
            feature.AddKnownType("System.ReadOnlySpan`1", "ReadOnlySpan`1'1");
            feature.AddKnownType("System.ReadOnlySpan`1+Enumerator", "ReadOnlySpan`1'1.Enumerator'1");
            feature.AddKnownType("System.ResolveEventArgs", "ResolveEventArgs");
            feature.AddKnownType("System.SerializableAttribute", "SerializableAttribute");
            feature.AddKnownType("System.Span`1", "Span`1'1");
            feature.AddKnownType("System.Span`1+Enumerator", "Span`1'1.Enumerator'1");
            feature.AddKnownType("System.StackOverflowException", "StackOverflowException");
            feature.AddKnownType("System.STAThreadAttribute", "STAThreadAttribute");
            feature.AddKnownType("System.StringComparer", "StringComparer");
            feature.AddKnownType("System.StringComparison", "StringComparison");
            feature.AddKnownType("System.StringSplitOptions", "StringSplitOptions");
            feature.AddKnownType("System.SystemException", "SystemException");
            feature.AddKnownType("System.ThreadStaticAttribute", "ThreadStaticAttribute");
            feature.AddKnownType("System.TimeoutException", "TimeoutException");
            feature.AddKnownType("System.TimeSpan", "TimeSpan");
            feature.AddKnownType("System.TimeZone", "TimeZone");
            feature.AddKnownType("System.TimeZoneInfo", "TimeZoneInfo");
            feature.AddKnownType("System.TimeZoneInfo+AdjustmentRule", "TimeZoneInfo.AdjustmentRule");
            feature.AddKnownType("System.TimeZoneInfo+TransitionTime", "TimeZoneInfo.TransitionTime");
            feature.AddKnownType("System.TimeZoneNotFoundException", "TimeZoneNotFoundException");
            feature.AddKnownType("System.Tuple`1", "Tuple`1'1");
            feature.AddKnownType("System.Tuple`2", "Tuple`2'2");
            feature.AddKnownType("System.Tuple`3", "Tuple`3'3");
            feature.AddKnownType("System.Tuple`4", "Tuple`4'4");
            feature.AddKnownType("System.Tuple`5", "Tuple`5'5");
            feature.AddKnownType("System.Tuple`6", "Tuple`6'6");
            feature.AddKnownType("System.Tuple`7", "Tuple`7'7");
            feature.AddKnownType("System.Tuple`8", "Tuple`8'8");
            feature.AddKnownType("System.Type", "Type");
            feature.AddKnownType("System.TypeAccessException", "TypeAccessException");
            feature.AddKnownType("System.TypeCode", "TypeCode");
            feature.AddKnownType("System.TypeInitializationException", "TypeInitializationException");
            feature.AddKnownType("System.TypeLoadException", "TypeLoadException");
            feature.AddKnownType("System.TypeUnloadedException", "TypeUnloadedException");
            feature.AddKnownType("System.UnauthorizedAccessException", "UnauthorizedAccessException");
            feature.AddKnownType("System.UnhandledExceptionEventArgs", "UnhandledExceptionEventArgs");
            feature.AddKnownType("System.Uri", "Uri");
            feature.AddKnownType("System.UriBuilder", "UriBuilder");
            feature.AddKnownType("System.UriComponents", "UriComponents");
            feature.AddKnownType("System.UriFormat", "UriFormat");
            feature.AddKnownType("System.UriFormatException", "UriFormatException");
            feature.AddKnownType("System.UriHostNameType", "UriHostNameType");
            feature.AddKnownType("System.UriKind", "UriKind");
            feature.AddKnownType("System.UriParser", "UriParser");
            feature.AddKnownType("System.UriPartial", "UriPartial");
            feature.AddKnownType("System.ValueTuple", "ValueTuple");
            feature.AddKnownType("System.ValueTuple`1", "ValueTuple`1'1");
            feature.AddKnownType("System.ValueTuple`2", "ValueTuple`2'2");
            feature.AddKnownType("System.ValueTuple`3", "ValueTuple`3'3");
            feature.AddKnownType("System.ValueTuple`4", "ValueTuple`4'4");
            feature.AddKnownType("System.ValueTuple`5", "ValueTuple`5'5");
            feature.AddKnownType("System.ValueTuple`6", "ValueTuple`6'6");
            feature.AddKnownType("System.ValueTuple`7", "ValueTuple`7'7");
            feature.AddKnownType("System.ValueTuple`8", "ValueTuple`8'8");
            feature.AddKnownType("System.Version", "Version");
            feature.AddKnownType("System.WeakReference", "WeakReference");
            feature.AddKnownType("System.WeakReference`1", "WeakReference`1'1");
            feature.AddKnownType("System.Buffers.ArrayPool`1", "ArrayPool`1'1");
            feature.AddKnownType("System.Buffers.IMemoryOwner`1", "IMemoryOwner`1'1");
            feature.AddKnownType("System.Buffers.IPinnable", "IPinnable");
            feature.AddKnownType("System.Buffers.MemoryHandle", "MemoryHandle");
            feature.AddKnownType("System.Buffers.MemoryManager`1", "MemoryManager`1'1");
            feature.AddKnownType("System.Buffers.OperationStatus", "OperationStatus");
            feature.AddKnownType("System.CodeDom.Compiler.GeneratedCodeAttribute", "GeneratedCodeAttribute");
            feature.AddKnownType("System.CodeDom.Compiler.IndentedTextWriter", "IndentedTextWriter");
            feature.AddKnownType("System.Collections.ArrayList", "ArrayList");
            feature.AddKnownType("System.Collections.Comparer", "Comparer");
            feature.AddKnownType("System.Collections.DictionaryEntry", "DictionaryEntry");
            feature.AddKnownType("System.Collections.Hashtable", "Hashtable");
            feature.AddKnownType("System.Collections.ICollection", "ICollection");
            feature.AddKnownType("System.Collections.IComparer", "IComparer");
            feature.AddKnownType("System.Collections.IDictionary", "IDictionary");
            feature.AddKnownType("System.Collections.IDictionaryEnumerator", "IDictionaryEnumerator");
            feature.AddKnownType("System.Collections.IEqualityComparer", "IEqualityComparer");
            feature.AddKnownType("System.Collections.IHashCodeProvider", "IHashCodeProvider");
            feature.AddKnownType("System.Collections.IList", "IList");
            feature.AddKnownType("System.Collections.IStructuralComparable", "IStructuralComparable");
            feature.AddKnownType("System.Collections.IStructuralEquatable", "IStructuralEquatable");
            feature.AddKnownType("System.Collections.Generic.IAsyncEnumerable`1", "IAsyncEnumerable`1'1");
            feature.AddKnownType("System.Collections.Generic.IAsyncEnumerator`1", "IAsyncEnumerator`1'1");
            feature.AddKnownType("System.Collections.Generic.IComparer`1", "IComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.IDictionary`2", "IDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.IEqualityComparer`1", "IEqualityComparer`1'1");
            feature.AddKnownType("System.Collections.Generic.IReadOnlyDictionary`2", "IReadOnlyDictionary`2'2");
            feature.AddKnownType("System.Collections.Generic.IReadOnlySet`1", "IReadOnlySet`1'1");
            feature.AddKnownType("System.Collections.Generic.ISet`1", "ISet`1'1");
            feature.AddKnownType("System.Collections.Generic.KeyNotFoundException", "KeyNotFoundException");
            feature.AddKnownType("System.Collections.Generic.KeyValuePair`2", "KeyValuePair`2'2");
            feature.AddKnownType("System.Collections.ObjectModel.Collection`1", "Collection`1'1");
            feature.AddKnownType("System.Collections.ObjectModel.ReadOnlyCollection`1", "ReadOnlyCollection`1'1");
            feature.AddKnownType("System.ComponentModel.DefaultValueAttribute", "DefaultValueAttribute");
            feature.AddKnownType("System.ComponentModel.EditorBrowsableAttribute", "EditorBrowsableAttribute");
            feature.AddKnownType("System.ComponentModel.EditorBrowsableState", "EditorBrowsableState");
            feature.AddKnownType("System.Configuration.Assemblies.AssemblyHashAlgorithm", "AssemblyHashAlgorithm");
            feature.AddKnownType("System.Configuration.Assemblies.AssemblyVersionCompatibility", "AssemblyVersionCompatibility");
            feature.AddKnownType("System.Diagnostics.ConditionalAttribute", "ConditionalAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggableAttribute", "DebuggableAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggableAttribute+DebuggingModes", "DebuggableAttribute.DebuggingModes");
            feature.AddKnownType("System.Diagnostics.DebuggerBrowsableAttribute", "DebuggerBrowsableAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerBrowsableState", "DebuggerBrowsableState");
            feature.AddKnownType("System.Diagnostics.DebuggerDisplayAttribute", "DebuggerDisplayAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerHiddenAttribute", "DebuggerHiddenAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerNonUserCodeAttribute", "DebuggerNonUserCodeAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerStepperBoundaryAttribute", "DebuggerStepperBoundaryAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerStepThroughAttribute", "DebuggerStepThroughAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerTypeProxyAttribute", "DebuggerTypeProxyAttribute");
            feature.AddKnownType("System.Diagnostics.DebuggerVisualizerAttribute", "DebuggerVisualizerAttribute");
            feature.AddKnownType("System.Diagnostics.Stopwatch", "Stopwatch");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute", "DynamicallyAccessedMembersAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes", "DynamicallyAccessedMemberTypes");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute", "DynamicDependencyAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute", "ExcludeFromCodeCoverageAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute", "RequiresUnreferencedCodeAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute", "SuppressMessageAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute", "UnconditionalSuppressMessageAttribute");
            feature.AddKnownType("System.Globalization.Calendar", "Calendar");
            feature.AddKnownType("System.Globalization.CalendarAlgorithmType", "CalendarAlgorithmType");
            feature.AddKnownType("System.Globalization.CalendarWeekRule", "CalendarWeekRule");
            feature.AddKnownType("System.Globalization.ChineseLunisolarCalendar", "ChineseLunisolarCalendar");
            feature.AddKnownType("System.Globalization.CompareInfo", "CompareInfo");
            feature.AddKnownType("System.Globalization.CompareOptions", "CompareOptions");
            feature.AddKnownType("System.Globalization.CultureInfo", "CultureInfo");
            feature.AddKnownType("System.Globalization.CultureNotFoundException", "CultureNotFoundException");
            feature.AddKnownType("System.Globalization.CultureTypes", "CultureTypes");
            feature.AddKnownType("System.Globalization.DateTimeFormatInfo", "DateTimeFormatInfo");
            feature.AddKnownType("System.Globalization.DateTimeStyles", "DateTimeStyles");
            feature.AddKnownType("System.Globalization.DaylightTime", "DaylightTime");
            feature.AddKnownType("System.Globalization.DigitShapes", "DigitShapes");
            feature.AddKnownType("System.Globalization.EastAsianLunisolarCalendar", "EastAsianLunisolarCalendar");
            feature.AddKnownType("System.Globalization.GregorianCalendar", "GregorianCalendar");
            feature.AddKnownType("System.Globalization.GregorianCalendarTypes", "GregorianCalendarTypes");
            feature.AddKnownType("System.Globalization.HebrewCalendar", "HebrewCalendar");
            feature.AddKnownType("System.Globalization.HijriCalendar", "HijriCalendar");
            feature.AddKnownType("System.Globalization.IdnMapping", "IdnMapping");
            feature.AddKnownType("System.Globalization.JapaneseCalendar", "JapaneseCalendar");
            feature.AddKnownType("System.Globalization.JapaneseLunisolarCalendar", "JapaneseLunisolarCalendar");
            feature.AddKnownType("System.Globalization.JulianCalendar", "JulianCalendar");
            feature.AddKnownType("System.Globalization.KoreanCalendar", "KoreanCalendar");
            feature.AddKnownType("System.Globalization.KoreanLunisolarCalendar", "KoreanLunisolarCalendar");
            feature.AddKnownType("System.Globalization.NumberFormatInfo", "NumberFormatInfo");
            feature.AddKnownType("System.Globalization.NumberStyles", "NumberStyles");
            feature.AddKnownType("System.Globalization.PersianCalendar", "PersianCalendar");
            feature.AddKnownType("System.Globalization.RegionInfo", "RegionInfo");
            feature.AddKnownType("System.Globalization.SortKey", "SortKey");
            feature.AddKnownType("System.Globalization.SortVersion", "SortVersion");
            feature.AddKnownType("System.Globalization.StringInfo", "StringInfo");
            feature.AddKnownType("System.Globalization.TaiwanCalendar", "TaiwanCalendar");
            feature.AddKnownType("System.Globalization.TaiwanLunisolarCalendar", "TaiwanLunisolarCalendar");
            feature.AddKnownType("System.Globalization.TextElementEnumerator", "TextElementEnumerator");
            feature.AddKnownType("System.Globalization.TextInfo", "TextInfo");
            feature.AddKnownType("System.Globalization.ThaiBuddhistCalendar", "ThaiBuddhistCalendar");
            feature.AddKnownType("System.Globalization.TimeSpanStyles", "TimeSpanStyles");
            feature.AddKnownType("System.Globalization.UmAlQuraCalendar", "UmAlQuraCalendar");
            feature.AddKnownType("System.Globalization.UnicodeCategory", "UnicodeCategory");
            feature.AddKnownType("System.IO.BinaryReader", "BinaryReader");
            feature.AddKnownType("System.IO.BinaryWriter", "BinaryWriter");
            feature.AddKnownType("System.IO.BufferedStream", "BufferedStream");
            feature.AddKnownType("System.IO.DirectoryNotFoundException", "DirectoryNotFoundException");
            feature.AddKnownType("System.IO.EndOfStreamException", "EndOfStreamException");
            feature.AddKnownType("System.IO.FileAccess", "FileAccess");
            feature.AddKnownType("System.IO.FileAttributes", "FileAttributes");
            feature.AddKnownType("System.IO.FileLoadException", "FileLoadException");
            feature.AddKnownType("System.IO.FileMode", "FileMode");
            feature.AddKnownType("System.IO.FileNotFoundException", "FileNotFoundException");
            feature.AddKnownType("System.IO.FileOptions", "FileOptions");
            feature.AddKnownType("System.IO.FileShare", "FileShare");
            feature.AddKnownType("System.IO.FileStream", "FileStream");
            feature.AddKnownType("System.IO.HandleInheritability", "HandleInheritability");
            feature.AddKnownType("System.IO.InvalidDataException", "InvalidDataException");
            feature.AddKnownType("System.IO.IOException", "IOException");
            feature.AddKnownType("System.IO.MemoryStream", "MemoryStream");
            feature.AddKnownType("System.IO.PathTooLongException", "PathTooLongException");
            feature.AddKnownType("System.IO.SeekOrigin", "SeekOrigin");
            feature.AddKnownType("System.IO.Stream", "Stream");
            feature.AddKnownType("System.IO.StreamReader", "StreamReader");
            feature.AddKnownType("System.IO.StreamWriter", "StreamWriter");
            feature.AddKnownType("System.IO.StringReader", "StringReader");
            feature.AddKnownType("System.IO.StringWriter", "StringWriter");
            feature.AddKnownType("System.IO.TextReader", "TextReader");
            feature.AddKnownType("System.IO.TextWriter", "TextWriter");
            feature.AddKnownType("System.IO.UnmanagedMemoryStream", "UnmanagedMemoryStream");
            feature.AddKnownType("System.Reflection.AmbiguousMatchException", "AmbiguousMatchException");
            feature.AddKnownType("System.Reflection.Assembly", "Assembly");
            feature.AddKnownType("System.Reflection.AssemblyAlgorithmIdAttribute", "AssemblyAlgorithmIdAttribute");
            feature.AddKnownType("System.Reflection.AssemblyCompanyAttribute", "AssemblyCompanyAttribute");
            feature.AddKnownType("System.Reflection.AssemblyConfigurationAttribute", "AssemblyConfigurationAttribute");
            feature.AddKnownType("System.Reflection.AssemblyContentType", "AssemblyContentType");
            feature.AddKnownType("System.Reflection.AssemblyCopyrightAttribute", "AssemblyCopyrightAttribute");
            feature.AddKnownType("System.Reflection.AssemblyCultureAttribute", "AssemblyCultureAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDefaultAliasAttribute", "AssemblyDefaultAliasAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDelaySignAttribute", "AssemblyDelaySignAttribute");
            feature.AddKnownType("System.Reflection.AssemblyDescriptionAttribute", "AssemblyDescriptionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFileVersionAttribute", "AssemblyFileVersionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyFlagsAttribute", "AssemblyFlagsAttribute");
            feature.AddKnownType("System.Reflection.AssemblyInformationalVersionAttribute", "AssemblyInformationalVersionAttribute");
            feature.AddKnownType("System.Reflection.AssemblyKeyFileAttribute", "AssemblyKeyFileAttribute");
            feature.AddKnownType("System.Reflection.AssemblyKeyNameAttribute", "AssemblyKeyNameAttribute");
            feature.AddKnownType("System.Reflection.AssemblyMetadataAttribute", "AssemblyMetadataAttribute");
            feature.AddKnownType("System.Reflection.AssemblyName", "AssemblyName");
            feature.AddKnownType("System.Reflection.AssemblyNameFlags", "AssemblyNameFlags");
            feature.AddKnownType("System.Reflection.AssemblyNameProxy", "AssemblyNameProxy");
            feature.AddKnownType("System.Reflection.AssemblyProductAttribute", "AssemblyProductAttribute");
            feature.AddKnownType("System.Reflection.AssemblySignatureKeyAttribute", "AssemblySignatureKeyAttribute");
            feature.AddKnownType("System.Reflection.AssemblyTitleAttribute", "AssemblyTitleAttribute");
            feature.AddKnownType("System.Reflection.AssemblyTrademarkAttribute", "AssemblyTrademarkAttribute");
            feature.AddKnownType("System.Reflection.AssemblyVersionAttribute", "AssemblyVersionAttribute");
            feature.AddKnownType("System.Reflection.Binder", "Binder");
            feature.AddKnownType("System.Reflection.BindingFlags", "BindingFlags");
            feature.AddKnownType("System.Reflection.CallingConventions", "CallingConventions");
            feature.AddKnownType("System.Reflection.ConstructorInfo", "ConstructorInfo");
            feature.AddKnownType("System.Reflection.CustomAttributeData", "CustomAttributeData");
            feature.AddKnownType("System.Reflection.CustomAttributeFormatException", "CustomAttributeFormatException");
            feature.AddKnownType("System.Reflection.CustomAttributeNamedArgument", "CustomAttributeNamedArgument");
            feature.AddKnownType("System.Reflection.CustomAttributeTypedArgument", "CustomAttributeTypedArgument");
            feature.AddKnownType("System.Reflection.DefaultMemberAttribute", "DefaultMemberAttribute");
            feature.AddKnownType("System.Reflection.EventAttributes", "EventAttributes");
            feature.AddKnownType("System.Reflection.EventInfo", "EventInfo");
            feature.AddKnownType("System.Reflection.ExceptionHandlingClause", "ExceptionHandlingClause");
            feature.AddKnownType("System.Reflection.ExceptionHandlingClauseOptions", "ExceptionHandlingClauseOptions");
            feature.AddKnownType("System.Reflection.FieldAttributes", "FieldAttributes");
            feature.AddKnownType("System.Reflection.FieldInfo", "FieldInfo");
            feature.AddKnownType("System.Reflection.GenericParameterAttributes", "GenericParameterAttributes");
            feature.AddKnownType("System.Reflection.ICustomAttributeProvider", "ICustomAttributeProvider");
            feature.AddKnownType("System.Reflection.ImageFileMachine", "ImageFileMachine");
            feature.AddKnownType("System.Reflection.InterfaceMapping", "InterfaceMapping");
            feature.AddKnownType("System.Reflection.InvalidFilterCriteriaException", "InvalidFilterCriteriaException");
            feature.AddKnownType("System.Reflection.IReflect", "IReflect");
            feature.AddKnownType("System.Reflection.IReflectableType", "IReflectableType");
            feature.AddKnownType("System.Reflection.LocalVariableInfo", "LocalVariableInfo");
            feature.AddKnownType("System.Reflection.ManifestResourceInfo", "ManifestResourceInfo");
            feature.AddKnownType("System.Reflection.MemberInfo", "MemberInfo");
            feature.AddKnownType("System.Reflection.MemberTypes", "MemberTypes");
            feature.AddKnownType("System.Reflection.MethodAttributes", "MethodAttributes");
            feature.AddKnownType("System.Reflection.MethodBase", "MethodBase");
            feature.AddKnownType("System.Reflection.MethodBody", "MethodBody");
            feature.AddKnownType("System.Reflection.MethodImplAttributes", "MethodImplAttributes");
            feature.AddKnownType("System.Reflection.MethodInfo", "MethodInfo");
            feature.AddKnownType("System.Reflection.Missing", "Missing");
            feature.AddKnownType("System.Reflection.Module", "Module");
            feature.AddKnownType("System.Reflection.ObfuscateAssemblyAttribute", "ObfuscateAssemblyAttribute");
            feature.AddKnownType("System.Reflection.ObfuscationAttribute", "ObfuscationAttribute");
            feature.AddKnownType("System.Reflection.ParameterAttributes", "ParameterAttributes");
            feature.AddKnownType("System.Reflection.ParameterInfo", "ParameterInfo");
            feature.AddKnownType("System.Reflection.ParameterModifier", "ParameterModifier");
            feature.AddKnownType("System.Reflection.Pointer", "Pointer");
            feature.AddKnownType("System.Reflection.PortableExecutableKinds", "PortableExecutableKinds");
            feature.AddKnownType("System.Reflection.ProcessorArchitecture", "ProcessorArchitecture");
            feature.AddKnownType("System.Reflection.PropertyAttributes", "PropertyAttributes");
            feature.AddKnownType("System.Reflection.PropertyInfo", "PropertyInfo");
            feature.AddKnownType("System.Reflection.ReflectionContext", "ReflectionContext");
            feature.AddKnownType("System.Reflection.ReflectionTypeLoadException", "ReflectionTypeLoadException");
            feature.AddKnownType("System.Reflection.ResourceAttributes", "ResourceAttributes");
            feature.AddKnownType("System.Reflection.ResourceLocation", "ResourceLocation");
            feature.AddKnownType("System.Reflection.StrongNameKeyPair", "StrongNameKeyPair");
            feature.AddKnownType("System.Reflection.TargetException", "TargetException");
            feature.AddKnownType("System.Reflection.TargetInvocationException", "TargetInvocationException");
            feature.AddKnownType("System.Reflection.TargetParameterCountException", "TargetParameterCountException");
            feature.AddKnownType("System.Reflection.TypeAttributes", "TypeAttributes");
            feature.AddKnownType("System.Reflection.TypeDelegator", "TypeDelegator");
            feature.AddKnownType("System.Reflection.TypeInfo", "TypeInfo");
            feature.AddKnownType("System.Resources.IResourceReader", "IResourceReader");
            feature.AddKnownType("System.Resources.MissingManifestResourceException", "MissingManifestResourceException");
            feature.AddKnownType("System.Resources.MissingSatelliteAssemblyException", "MissingSatelliteAssemblyException");
            feature.AddKnownType("System.Resources.NeutralResourcesLanguageAttribute", "NeutralResourcesLanguageAttribute");
            feature.AddKnownType("System.Resources.ResourceManager", "ResourceManager");
            feature.AddKnownType("System.Resources.ResourceReader", "ResourceReader");
            feature.AddKnownType("System.Resources.ResourceSet", "ResourceSet");
            feature.AddKnownType("System.Resources.SatelliteContractVersionAttribute", "SatelliteContractVersionAttribute");
            feature.AddKnownType("System.Resources.UltimateResourceFallbackLocation", "UltimateResourceFallbackLocation");
            feature.AddKnownType("System.Runtime.AmbiguousImplementationException", "AmbiguousImplementationException");
            feature.AddKnownType("System.Runtime.AssemblyTargetedPatchBandAttribute", "AssemblyTargetedPatchBandAttribute");
            feature.AddKnownType("System.Runtime.GCLargeObjectHeapCompactionMode", "GCLargeObjectHeapCompactionMode");
            feature.AddKnownType("System.Runtime.GCLatencyMode", "GCLatencyMode");
            feature.AddKnownType("System.Runtime.MemoryFailPoint", "MemoryFailPoint");
            feature.AddKnownType("System.Runtime.TargetedPatchingOptOutAttribute", "TargetedPatchingOptOutAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute", "AccessedThroughPropertyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncIteratorMethodBuilder", "AsyncIteratorMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute", "AsyncIteratorStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncMethodBuilderAttribute", "AsyncMethodBuilderAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncStateMachineAttribute", "AsyncStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncTaskMethodBuilder", "AsyncTaskMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", "AsyncTaskMethodBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder", "AsyncValueTaskMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1", "AsyncValueTaskMethodBuilder`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.AsyncVoidMethodBuilder", "AsyncVoidMethodBuilder");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvCdecl", "CallConvCdecl");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvFastcall", "CallConvFastcall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvStdcall", "CallConvStdcall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallConvThiscall", "CallConvThiscall");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerArgumentExpressionAttribute", "CallerArgumentExpressionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerFilePathAttribute", "CallerFilePathAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerLineNumberAttribute", "CallerLineNumberAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CallerMemberNameAttribute", "CallerMemberNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilationRelaxations", "CompilationRelaxations");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilationRelaxationsAttribute", "CompilationRelaxationsAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilerGeneratedAttribute", "CompilerGeneratedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.CompilerGlobalScopeAttribute", "CompilerGlobalScopeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ConditionalWeakTable`2", "ConditionalWeakTable`2'2");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredAsyncDisposable", "ConfiguredAsyncDisposable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1", "ConfiguredCancelableAsyncEnumerable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1+Enumerator", "ConfiguredCancelableAsyncEnumerable`1'1.Enumerator'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable", "ConfiguredTaskAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter", "ConfiguredTaskAwaitable.ConfiguredTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1", "ConfiguredTaskAwaitable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", "ConfiguredTaskAwaitable`1'1.ConfiguredTaskAwaiter'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable", "ConfiguredValueTaskAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter", "ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1", "ConfiguredValueTaskAwaitable`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter", "ConfiguredValueTaskAwaitable`1'1.ConfiguredValueTaskAwaiter'1");
            feature.AddKnownType("System.Runtime.CompilerServices.CustomConstantAttribute", "CustomConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DateTimeConstantAttribute", "DateTimeConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DecimalConstantAttribute", "DecimalConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DefaultDependencyAttribute", "DefaultDependencyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DependencyAttribute", "DependencyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DisablePrivateReflectionAttribute", "DisablePrivateReflectionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.DiscardableAttribute", "DiscardableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.EnumeratorCancellationAttribute", "EnumeratorCancellationAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ExtensionAttribute", "ExtensionAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.FixedAddressValueTypeAttribute", "FixedAddressValueTypeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.FixedBufferAttribute", "FixedBufferAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IAsyncStateMachine", "IAsyncStateMachine");
            feature.AddKnownType("System.Runtime.CompilerServices.ICriticalNotifyCompletion", "ICriticalNotifyCompletion");
            feature.AddKnownType("System.Runtime.CompilerServices.IndexerNameAttribute", "IndexerNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.INotifyCompletion", "INotifyCompletion");
            feature.AddKnownType("System.Runtime.CompilerServices.InternalsVisibleToAttribute", "InternalsVisibleToAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsByRefLikeAttribute", "IsByRefLikeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IStrongBox", "IStrongBox");
            feature.AddKnownType("System.Runtime.CompilerServices.IteratorStateMachineAttribute", "IteratorStateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ITuple", "ITuple");
            feature.AddKnownType("System.Runtime.CompilerServices.LoadHint", "LoadHint");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodCodeType", "MethodCodeType");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodImplAttribute", "MethodImplAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.MethodImplOptions", "MethodImplOptions");
            feature.AddKnownType("System.Runtime.CompilerServices.ModuleInitializerAttribute", "ModuleInitializerAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ReferenceAssemblyAttribute", "ReferenceAssemblyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RuntimeCompatibilityAttribute", "RuntimeCompatibilityAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.RuntimeWrappedException", "RuntimeWrappedException");
            feature.AddKnownType("System.Runtime.CompilerServices.SkipLocalsInitAttribute", "SkipLocalsInitAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SpecialNameAttribute", "SpecialNameAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StateMachineAttribute", "StateMachineAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StringFreezingAttribute", "StringFreezingAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.StrongBox`1", "StrongBox`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.SuppressIldasmAttribute", "SuppressIldasmAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.SwitchExpressionException", "SwitchExpressionException");
            feature.AddKnownType("System.Runtime.CompilerServices.TaskAwaiter", "TaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.TaskAwaiter`1", "TaskAwaiter`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.TupleElementNamesAttribute", "TupleElementNamesAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.TypeForwardedFromAttribute", "TypeForwardedFromAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.TypeForwardedToAttribute", "TypeForwardedToAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.UnsafeValueTypeAttribute", "UnsafeValueTypeAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.ValueTaskAwaiter", "ValueTaskAwaiter");
            feature.AddKnownType("System.Runtime.CompilerServices.ValueTaskAwaiter`1", "ValueTaskAwaiter`1'1");
            feature.AddKnownType("System.Runtime.CompilerServices.YieldAwaitable", "YieldAwaitable");
            feature.AddKnownType("System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter", "YieldAwaitable.YieldAwaiter");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.Cer", "Cer");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.Consistency", "Consistency");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.CriticalFinalizerObject", "CriticalFinalizerObject");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute", "PrePrepareMethodAttribute");
            feature.AddKnownType("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute", "ReliabilityContractAttribute");
            feature.AddKnownType("System.Runtime.ExceptionServices.ExceptionDispatchInfo", "ExceptionDispatchInfo");
            feature.AddKnownType("System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs", "FirstChanceExceptionEventArgs");
            feature.AddKnownType("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute", "HandleProcessCorruptedStateExceptionsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CharSet", "CharSet");
            feature.AddKnownType("System.Runtime.InteropServices.ComVisibleAttribute", "ComVisibleAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CriticalHandle", "CriticalHandle");
            feature.AddKnownType("System.Runtime.InteropServices.ExternalException", "ExternalException");
            feature.AddKnownType("System.Runtime.InteropServices.FieldOffsetAttribute", "FieldOffsetAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.GCHandle", "GCHandle");
            feature.AddKnownType("System.Runtime.InteropServices.GCHandleType", "GCHandleType");
            feature.AddKnownType("System.Runtime.InteropServices.InAttribute", "InAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.LayoutKind", "LayoutKind");
            feature.AddKnownType("System.Runtime.InteropServices.OutAttribute", "OutAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SafeBuffer", "SafeBuffer");
            feature.AddKnownType("System.Runtime.InteropServices.SafeHandle", "SafeHandle");
            feature.AddKnownType("System.Runtime.InteropServices.StructLayoutAttribute", "StructLayoutAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SuppressGCTransitionAttribute", "SuppressGCTransitionAttribute");
            feature.AddKnownType("System.Runtime.Remoting.ObjectHandle", "ObjectHandle");
            feature.AddKnownType("System.Runtime.Serialization.IDeserializationCallback", "IDeserializationCallback");
            feature.AddKnownType("System.Runtime.Serialization.IFormatterConverter", "IFormatterConverter");
            feature.AddKnownType("System.Runtime.Serialization.IObjectReference", "IObjectReference");
            feature.AddKnownType("System.Runtime.Serialization.ISafeSerializationData", "ISafeSerializationData");
            feature.AddKnownType("System.Runtime.Serialization.ISerializable", "ISerializable");
            feature.AddKnownType("System.Runtime.Serialization.OnDeserializedAttribute", "OnDeserializedAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnDeserializingAttribute", "OnDeserializingAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnSerializedAttribute", "OnSerializedAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OnSerializingAttribute", "OnSerializingAttribute");
            feature.AddKnownType("System.Runtime.Serialization.OptionalFieldAttribute", "OptionalFieldAttribute");
            feature.AddKnownType("System.Runtime.Serialization.SafeSerializationEventArgs", "SafeSerializationEventArgs");
            feature.AddKnownType("System.Runtime.Serialization.SerializationEntry", "SerializationEntry");
            feature.AddKnownType("System.Runtime.Serialization.SerializationException", "SerializationException");
            feature.AddKnownType("System.Runtime.Serialization.SerializationInfo", "SerializationInfo");
            feature.AddKnownType("System.Runtime.Serialization.SerializationInfoEnumerator", "SerializationInfoEnumerator");
            feature.AddKnownType("System.Runtime.Serialization.StreamingContext", "StreamingContext");
            feature.AddKnownType("System.Runtime.Serialization.StreamingContextStates", "StreamingContextStates");
            feature.AddKnownType("System.Runtime.Versioning.ComponentGuaranteesAttribute", "ComponentGuaranteesAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ComponentGuaranteesOptions", "ComponentGuaranteesOptions");
            feature.AddKnownType("System.Runtime.Versioning.FrameworkName", "FrameworkName");
            feature.AddKnownType("System.Runtime.Versioning.SupportedOSPlatformAttribute", "SupportedOSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.OSPlatformAttribute", "OSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.UnsupportedOSPlatformAttribute", "UnsupportedOSPlatformAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceConsumptionAttribute", "ResourceConsumptionAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceExposureAttribute", "ResourceExposureAttribute");
            feature.AddKnownType("System.Runtime.Versioning.ResourceScope", "ResourceScope");
            feature.AddKnownType("System.Runtime.Versioning.TargetFrameworkAttribute", "TargetFrameworkAttribute");
            feature.AddKnownType("System.Runtime.Versioning.TargetPlatformAttribute", "TargetPlatformAttribute");
            feature.AddKnownType("System.Security.AllowPartiallyTrustedCallersAttribute", "AllowPartiallyTrustedCallersAttribute");
            feature.AddKnownType("System.Security.IPermission", "IPermission");
            feature.AddKnownType("System.Security.ISecurityEncodable", "ISecurityEncodable");
            feature.AddKnownType("System.Security.IStackWalk", "IStackWalk");
            feature.AddKnownType("System.Security.PartialTrustVisibilityLevel", "PartialTrustVisibilityLevel");
            feature.AddKnownType("System.Security.PermissionSet", "PermissionSet");
            feature.AddKnownType("System.Security.SecurityCriticalAttribute", "SecurityCriticalAttribute");
            feature.AddKnownType("System.Security.SecurityCriticalScope", "SecurityCriticalScope");
            feature.AddKnownType("System.Security.SecurityElement", "SecurityElement");
            feature.AddKnownType("System.Security.SecurityException", "SecurityException");
            feature.AddKnownType("System.Security.SecurityRulesAttribute", "SecurityRulesAttribute");
            feature.AddKnownType("System.Security.SecurityRuleSet", "SecurityRuleSet");
            feature.AddKnownType("System.Security.SecuritySafeCriticalAttribute", "SecuritySafeCriticalAttribute");
            feature.AddKnownType("System.Security.SecurityTransparentAttribute", "SecurityTransparentAttribute");
            feature.AddKnownType("System.Security.SecurityTreatAsSafeAttribute", "SecurityTreatAsSafeAttribute");
            feature.AddKnownType("System.Security.SuppressUnmanagedCodeSecurityAttribute", "SuppressUnmanagedCodeSecurityAttribute");
            feature.AddKnownType("System.Security.UnverifiableCodeAttribute", "UnverifiableCodeAttribute");
            feature.AddKnownType("System.Security.VerificationException", "VerificationException");
            feature.AddKnownType("System.Security.Cryptography.CryptographicException", "CryptographicException");
            feature.AddKnownType("System.Security.Permissions.CodeAccessSecurityAttribute", "CodeAccessSecurityAttribute");
            feature.AddKnownType("System.Security.Permissions.PermissionState", "PermissionState");
            feature.AddKnownType("System.Security.Permissions.SecurityAction", "SecurityAction");
            feature.AddKnownType("System.Security.Permissions.SecurityAttribute", "SecurityAttribute");
            feature.AddKnownType("System.Security.Permissions.SecurityPermissionAttribute", "SecurityPermissionAttribute");
            feature.AddKnownType("System.Security.Permissions.SecurityPermissionFlag", "SecurityPermissionFlag");
            feature.AddKnownType("System.Security.Principal.IIdentity", "IIdentity");
            feature.AddKnownType("System.Security.Principal.IPrincipal", "IPrincipal");
            feature.AddKnownType("System.Security.Principal.PrincipalPolicy", "PrincipalPolicy");
            feature.AddKnownType("System.Security.Principal.TokenImpersonationLevel", "TokenImpersonationLevel");
            feature.AddKnownType("System.Text.Decoder", "Decoder");
            feature.AddKnownType("System.Text.DecoderExceptionFallback", "DecoderExceptionFallback");
            feature.AddKnownType("System.Text.DecoderExceptionFallbackBuffer", "DecoderExceptionFallbackBuffer");
            feature.AddKnownType("System.Text.DecoderFallback", "DecoderFallback");
            feature.AddKnownType("System.Text.DecoderFallbackBuffer", "DecoderFallbackBuffer");
            feature.AddKnownType("System.Text.DecoderFallbackException", "DecoderFallbackException");
            feature.AddKnownType("System.Text.DecoderReplacementFallback", "DecoderReplacementFallback");
            feature.AddKnownType("System.Text.DecoderReplacementFallbackBuffer", "DecoderReplacementFallbackBuffer");
            feature.AddKnownType("System.Text.Encoder", "Encoder");
            feature.AddKnownType("System.Text.EncoderExceptionFallback", "EncoderExceptionFallback");
            feature.AddKnownType("System.Text.EncoderExceptionFallbackBuffer", "EncoderExceptionFallbackBuffer");
            feature.AddKnownType("System.Text.EncoderFallback", "EncoderFallback");
            feature.AddKnownType("System.Text.EncoderFallbackBuffer", "EncoderFallbackBuffer");
            feature.AddKnownType("System.Text.EncoderFallbackException", "EncoderFallbackException");
            feature.AddKnownType("System.Text.EncoderReplacementFallback", "EncoderReplacementFallback");
            feature.AddKnownType("System.Text.EncoderReplacementFallbackBuffer", "EncoderReplacementFallbackBuffer");
            feature.AddKnownType("System.Text.Encoding", "Encoding");
            feature.AddKnownType("System.Text.EncodingInfo", "EncodingInfo");
            feature.AddKnownType("System.Text.EncodingProvider", "EncodingProvider");
            feature.AddKnownType("System.Text.NormalizationForm", "NormalizationForm");
            feature.AddKnownType("System.Text.Rune", "Rune");
            feature.AddKnownType("System.Text.StringBuilder", "StringBuilder");
            feature.AddKnownType("System.Text.StringBuilder+ChunkEnumerator", "StringBuilder.ChunkEnumerator");
            feature.AddKnownType("System.Text.StringRuneEnumerator", "StringRuneEnumerator");
            feature.AddKnownType("System.Threading.CancellationToken", "CancellationToken");
            feature.AddKnownType("System.Threading.CancellationTokenRegistration", "CancellationTokenRegistration");
            feature.AddKnownType("System.Threading.CancellationTokenSource", "CancellationTokenSource");
            feature.AddKnownType("System.Threading.LazyThreadSafetyMode", "LazyThreadSafetyMode");
            feature.AddKnownType("System.Threading.Timer", "Timer");
            feature.AddKnownType("System.Threading.WaitHandle", "WaitHandle");
            feature.AddKnownType("System.Threading.Tasks.ConcurrentExclusiveSchedulerPair", "ConcurrentExclusiveSchedulerPair");
            feature.AddKnownType("System.Threading.Tasks.TaskCanceledException", "TaskCanceledException");
            feature.AddKnownType("System.Threading.Tasks.TaskCompletionSource", "TaskCompletionSource");
            feature.AddKnownType("System.Threading.Tasks.TaskCompletionSource`1", "TaskCompletionSource`1'1");
            feature.AddKnownType("System.Threading.Tasks.TaskContinuationOptions", "TaskContinuationOptions");
            feature.AddKnownType("System.Threading.Tasks.TaskCreationOptions", "TaskCreationOptions");
            feature.AddKnownType("System.Threading.Tasks.TaskFactory", "TaskFactory");
            feature.AddKnownType("System.Threading.Tasks.TaskFactory`1", "TaskFactory`1'1");
            feature.AddKnownType("System.Threading.Tasks.TaskScheduler", "TaskScheduler");
            feature.AddKnownType("System.Threading.Tasks.TaskSchedulerException", "TaskSchedulerException");
            feature.AddKnownType("System.Threading.Tasks.TaskStatus", "TaskStatus");
            feature.AddKnownType("System.Threading.Tasks.UnobservedTaskExceptionEventArgs", "UnobservedTaskExceptionEventArgs");
            feature.AddKnownType("System.Threading.Tasks.ValueTask", "ValueTask");
            feature.AddKnownType("System.Threading.Tasks.ValueTask`1", "ValueTask`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.IValueTaskSource", "IValueTaskSource");
            feature.AddKnownType("System.Threading.Tasks.Sources.IValueTaskSource`1", "IValueTaskSource`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1", "ManualResetValueTaskSourceCore`1'1");
            feature.AddKnownType("System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags", "ValueTaskSourceOnCompletedFlags");
            feature.AddKnownType("System.Threading.Tasks.Sources.ValueTaskSourceStatus", "ValueTaskSourceStatus");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.InteropServices", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.DataMisalignedException", "DataMisalignedException");
            feature.AddKnownType("System.DllNotFoundException", "DllNotFoundException");
            feature.AddKnownType("System.IO.UnmanagedMemoryAccessor", "UnmanagedMemoryAccessor");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IDispatchConstantAttribute", "IDispatchConstantAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IUnknownConstantAttribute", "IUnknownConstantAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute", "AllowReversePInvokeCallsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ArrayWithOffset", "ArrayWithOffset");
            feature.AddKnownType("System.Runtime.InteropServices.AutomationProxyAttribute", "AutomationProxyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.BestFitMappingAttribute", "BestFitMappingAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.BStrWrapper", "BStrWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CallingConvention", "CallingConvention");
            feature.AddKnownType("System.Runtime.InteropServices.ClassInterfaceAttribute", "ClassInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ClassInterfaceType", "ClassInterfaceType");
            feature.AddKnownType("System.Runtime.InteropServices.CoClassAttribute", "CoClassAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComAliasNameAttribute", "ComAliasNameAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComAwareEventInfo", "ComAwareEventInfo");
            feature.AddKnownType("System.Runtime.InteropServices.ComCompatibleVersionAttribute", "ComCompatibleVersionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComConversionLossAttribute", "ComConversionLossAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComDefaultInterfaceAttribute", "ComDefaultInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComEventInterfaceAttribute", "ComEventInterfaceAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.COMException", "COMException");
            feature.AddKnownType("System.Runtime.InteropServices.ComImportAttribute", "ComImportAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComInterfaceType", "ComInterfaceType");
            feature.AddKnownType("System.Runtime.InteropServices.ComMemberType", "ComMemberType");
            feature.AddKnownType("System.Runtime.InteropServices.ComRegisterFunctionAttribute", "ComRegisterFunctionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComSourceInterfacesAttribute", "ComSourceInterfacesAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComUnregisterFunctionAttribute", "ComUnregisterFunctionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.CurrencyWrapper", "CurrencyWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CustomQueryInterfaceMode", "CustomQueryInterfaceMode");
            feature.AddKnownType("System.Runtime.InteropServices.CustomQueryInterfaceResult", "CustomQueryInterfaceResult");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultCharSetAttribute", "DefaultCharSetAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute", "DefaultDllImportSearchPathsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DefaultParameterValueAttribute", "DefaultParameterValueAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DispatchWrapper", "DispatchWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.DispIdAttribute", "DispIdAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DllImportAttribute", "DllImportAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.DllImportSearchPath", "DllImportSearchPath");
            feature.AddKnownType("System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute", "DynamicInterfaceCastableImplementationAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ErrorWrapper", "ErrorWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.GuidAttribute", "GuidAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.HandleCollector", "HandleCollector");
            feature.AddKnownType("System.Runtime.InteropServices.HandleRef", "HandleRef");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomAdapter", "ICustomAdapter");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomFactory", "ICustomFactory");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomMarshaler", "ICustomMarshaler");
            feature.AddKnownType("System.Runtime.InteropServices.ICustomQueryInterface", "ICustomQueryInterface");
            feature.AddKnownType("System.Runtime.InteropServices.IDynamicInterfaceCastable", "IDynamicInterfaceCastable");
            feature.AddKnownType("System.Runtime.InteropServices.ImportedFromTypeLibAttribute", "ImportedFromTypeLibAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.InterfaceTypeAttribute", "InterfaceTypeAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.InvalidComObjectException", "InvalidComObjectException");
            feature.AddKnownType("System.Runtime.InteropServices.InvalidOleVariantTypeException", "InvalidOleVariantTypeException");
            feature.AddKnownType("System.Runtime.InteropServices.LCIDConversionAttribute", "LCIDConversionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute", "ManagedToNativeComInteropStubAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.MarshalAsAttribute", "MarshalAsAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.MarshalDirectiveException", "MarshalDirectiveException");
            feature.AddKnownType("System.Runtime.InteropServices.OptionalAttribute", "OptionalAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.PreserveSigAttribute", "PreserveSigAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute", "PrimaryInteropAssemblyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ProgIdAttribute", "ProgIdAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.SafeArrayRankMismatchException", "SafeArrayRankMismatchException");
            feature.AddKnownType("System.Runtime.InteropServices.SafeArrayTypeMismatchException", "SafeArrayTypeMismatchException");
            feature.AddKnownType("System.Runtime.InteropServices.SEHException", "SEHException");
            feature.AddKnownType("System.Runtime.InteropServices.StandardOleMarshalObject", "StandardOleMarshalObject");
            feature.AddKnownType("System.Runtime.InteropServices.TypeIdentifierAttribute", "TypeIdentifierAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibFuncAttribute", "TypeLibFuncAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibFuncFlags", "TypeLibFuncFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibImportClassAttribute", "TypeLibImportClassAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibTypeAttribute", "TypeLibTypeAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibTypeFlags", "TypeLibTypeFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVarAttribute", "TypeLibVarAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVarFlags", "TypeLibVarFlags");
            feature.AddKnownType("System.Runtime.InteropServices.TypeLibVersionAttribute", "TypeLibVersionAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.UnknownWrapper", "UnknownWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute", "UnmanagedFunctionPointerAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedType", "UnmanagedType");
            feature.AddKnownType("System.Runtime.InteropServices.VarEnum", "VarEnum");
            feature.AddKnownType("System.Runtime.InteropServices.VariantWrapper", "VariantWrapper");
            feature.AddKnownType("System.Runtime.InteropServices.CreateComInterfaceFlags", "CreateComInterfaceFlags");
            feature.AddKnownType("System.Runtime.InteropServices.CreateObjectFlags", "CreateObjectFlags");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers", "ComWrappers");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry", "ComWrappers.ComInterfaceEntry");
            feature.AddKnownType("System.Runtime.InteropServices.ComWrappers+ComInterfaceDispatch", "ComWrappers.ComInterfaceDispatch");
            feature.AddKnownType("System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute", "UnmanagedCallersOnlyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ADVF", "ADVF");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.BINDPTR", "BINDPTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.BIND_OPTS", "BIND_OPTS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.CALLCONV", "CALLCONV");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.CONNECTDATA", "CONNECTDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DATADIR", "DATADIR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DESCKIND", "DESCKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DISPPARAMS", "DISPPARAMS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.DVASPECT", "DVASPECT");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ELEMDESC", "ELEMDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION", "ELEMDESC.DESCUNION");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.EXCEPINFO", "EXCEPINFO");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FILETIME", "FILETIME");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FORMATETC", "FORMATETC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCDESC", "FUNCDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCFLAGS", "FUNCFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.FUNCKIND", "FUNCKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IAdviseSink", "IAdviseSink");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IBindCtx", "IBindCtx");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IConnectionPoint", "IConnectionPoint");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IConnectionPointContainer", "IConnectionPointContainer");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDataObject", "IDataObject");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDLDESC", "IDLDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IDLFLAG", "IDLFLAG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints", "IEnumConnectionPoints");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumConnections", "IEnumConnections");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumFORMATETC", "IEnumFORMATETC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumMoniker", "IEnumMoniker");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumSTATDATA", "IEnumSTATDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumString", "IEnumString");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IEnumVARIANT", "IEnumVARIANT");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IMoniker", "IMoniker");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS", "IMPLTYPEFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.INVOKEKIND", "INVOKEKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IPersistFile", "IPersistFile");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IRunningObjectTable", "IRunningObjectTable");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.IStream", "IStream");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeComp", "ITypeComp");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeInfo", "ITypeInfo");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeInfo2", "ITypeInfo2");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeLib", "ITypeLib");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.ITypeLib2", "ITypeLib2");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.LIBFLAGS", "LIBFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.PARAMDESC", "PARAMDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.PARAMFLAG", "PARAMFLAG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STATDATA", "STATDATA");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STATSTG", "STATSTG");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.STGMEDIUM", "STGMEDIUM");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.SYSKIND", "SYSKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYMED", "TYMED");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEATTR", "TYPEATTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEDESC", "TYPEDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEFLAGS", "TYPEFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPEKIND", "TYPEKIND");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.TYPELIBATTR", "TYPELIBATTR");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARDESC", "VARDESC");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION", "VARDESC.DESCUNION");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARFLAGS", "VARFLAGS");
            feature.AddKnownType("System.Runtime.InteropServices.ComTypes.VARKIND", "VARKIND");
            feature.AddKnownType("System.Security.SecureString", "SecureString");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.InteropServices.RuntimeInformation", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.InteropServices.Architecture", "Architecture");
            feature.AddKnownType("System.Runtime.InteropServices.OSPlatform", "OSPlatform");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Intrinsics", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector128`1", "Vector128`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector256`1", "Vector256`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Vector64`1", "Vector64`1'1");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.AdvSimd", "AdvSimd");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.AdvSimd+Arm64", "AdvSimd.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Aes", "Aes");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Aes+Arm64", "Aes.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.ArmBase", "ArmBase");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.ArmBase+Arm64", "ArmBase.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Crc32", "Crc32");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Crc32+Arm64", "Crc32.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Dp", "Dp");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Dp+Arm64", "Dp.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Rdm", "Rdm");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Rdm+Arm64", "Rdm.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha1", "Sha1");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha1+Arm64", "Sha1.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha256", "Sha256");
            feature.AddKnownType("System.Runtime.Intrinsics.Arm.Sha256+Arm64", "Sha256.Arm64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Aes", "Aes");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Aes+X64", "Aes.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx", "Avx");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx+X64", "Avx.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx2", "Avx2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Avx2+X64", "Avx2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi1", "Bmi1");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi1+X64", "Bmi1.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi2", "Bmi2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Bmi2+X64", "Bmi2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.FloatComparisonMode", "FloatComparisonMode");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Fma", "Fma");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Fma+X64", "Fma.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Lzcnt", "Lzcnt");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Lzcnt+X64", "Lzcnt.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Pclmulqdq", "Pclmulqdq");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Pclmulqdq+X64", "Pclmulqdq.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Popcnt", "Popcnt");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Popcnt+X64", "Popcnt.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse", "Sse");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse+X64", "Sse.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse2", "Sse2");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse2+X64", "Sse2.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse3", "Sse3");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse3+X64", "Sse3.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse41", "Sse41");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse41+X64", "Sse41.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse42", "Sse42");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Sse42+X64", "Sse42.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Ssse3", "Ssse3");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.Ssse3+X64", "Ssse3.X64");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.X86Base", "X86Base");
            feature.AddKnownType("System.Runtime.Intrinsics.X86.X86Base+X64", "X86Base.X64");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Loader", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Loader.AssemblyDependencyResolver", "AssemblyDependencyResolver");
            feature.AddKnownType("System.Runtime.Loader.AssemblyLoadContext", "AssemblyLoadContext");
            feature.AddKnownType("System.Runtime.Loader.AssemblyLoadContext+ContextualReflectionScope", "AssemblyLoadContext.ContextualReflectionScope");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Numerics", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Numerics.BigInteger", "BigInteger");
            feature.AddKnownType("System.Numerics.Complex", "Complex");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Formatters", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.Formatter", "Formatter");
            feature.AddKnownType("System.Runtime.Serialization.FormatterConverter", "FormatterConverter");
            feature.AddKnownType("System.Runtime.Serialization.IFormatter", "IFormatter");
            feature.AddKnownType("System.Runtime.Serialization.ISerializationSurrogate", "ISerializationSurrogate");
            feature.AddKnownType("System.Runtime.Serialization.ISurrogateSelector", "ISurrogateSelector");
            feature.AddKnownType("System.Runtime.Serialization.ObjectIDGenerator", "ObjectIDGenerator");
            feature.AddKnownType("System.Runtime.Serialization.ObjectManager", "ObjectManager");
            feature.AddKnownType("System.Runtime.Serialization.SerializationBinder", "SerializationBinder");
            feature.AddKnownType("System.Runtime.Serialization.SerializationObjectManager", "SerializationObjectManager");
            feature.AddKnownType("System.Runtime.Serialization.SurrogateSelector", "SurrogateSelector");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle", "FormatterAssemblyStyle");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.FormatterTypeStyle", "FormatterTypeStyle");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.IFieldInfo", "IFieldInfo");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.TypeFilterLevel", "TypeFilterLevel");
            feature.AddKnownType("System.Runtime.Serialization.Formatters.Binary.BinaryFormatter", "BinaryFormatter");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DateTimeFormat", "DateTimeFormat");
            feature.AddKnownType("System.Runtime.Serialization.EmitTypeInformation", "EmitTypeInformation");
            feature.AddKnownType("System.Runtime.Serialization.Json.DataContractJsonSerializer", "DataContractJsonSerializer");
            feature.AddKnownType("System.Runtime.Serialization.Json.DataContractJsonSerializerSettings", "DataContractJsonSerializerSettings");
            feature.AddKnownType("System.Runtime.Serialization.Json.IXmlJsonReaderInitializer", "IXmlJsonReaderInitializer");
            feature.AddKnownType("System.Runtime.Serialization.Json.IXmlJsonWriterInitializer", "IXmlJsonWriterInitializer");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.CollectionDataContractAttribute", "CollectionDataContractAttribute");
            feature.AddKnownType("System.Runtime.Serialization.ContractNamespaceAttribute", "ContractNamespaceAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataContractAttribute", "DataContractAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataMemberAttribute", "DataMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.EnumMemberAttribute", "EnumMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.IgnoreDataMemberAttribute", "IgnoreDataMemberAttribute");
            feature.AddKnownType("System.Runtime.Serialization.InvalidDataContractException", "InvalidDataContractException");
            feature.AddKnownType("System.Runtime.Serialization.ISerializationSurrogateProvider", "ISerializationSurrogateProvider");
            feature.AddKnownType("System.Runtime.Serialization.KnownTypeAttribute", "KnownTypeAttribute");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Runtime.Serialization.Xml", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Runtime.Serialization.DataContractResolver", "DataContractResolver");
            feature.AddKnownType("System.Runtime.Serialization.DataContractSerializer", "DataContractSerializer");
            feature.AddKnownType("System.Runtime.Serialization.DataContractSerializerSettings", "DataContractSerializerSettings");
            feature.AddKnownType("System.Runtime.Serialization.ExportOptions", "ExportOptions");
            feature.AddKnownType("System.Runtime.Serialization.ExtensionDataObject", "ExtensionDataObject");
            feature.AddKnownType("System.Runtime.Serialization.IExtensibleDataObject", "IExtensibleDataObject");
            feature.AddKnownType("System.Runtime.Serialization.XmlObjectSerializer", "XmlObjectSerializer");
            feature.AddKnownType("System.Runtime.Serialization.XsdDataContractExporter", "XsdDataContractExporter");
            feature.AddKnownType("System.Xml.IFragmentCapableXmlDictionaryWriter", "IFragmentCapableXmlDictionaryWriter");
            feature.AddKnownType("System.Xml.IStreamProvider", "IStreamProvider");
            feature.AddKnownType("System.Xml.IXmlBinaryReaderInitializer", "IXmlBinaryReaderInitializer");
            feature.AddKnownType("System.Xml.IXmlBinaryWriterInitializer", "IXmlBinaryWriterInitializer");
            feature.AddKnownType("System.Xml.IXmlDictionary", "IXmlDictionary");
            feature.AddKnownType("System.Xml.IXmlTextReaderInitializer", "IXmlTextReaderInitializer");
            feature.AddKnownType("System.Xml.IXmlTextWriterInitializer", "IXmlTextWriterInitializer");
            feature.AddKnownType("System.Xml.UniqueId", "UniqueId");
            feature.AddKnownType("System.Xml.XmlBinaryReaderSession", "XmlBinaryReaderSession");
            feature.AddKnownType("System.Xml.XmlBinaryWriterSession", "XmlBinaryWriterSession");
            feature.AddKnownType("System.Xml.XmlDictionary", "XmlDictionary");
            feature.AddKnownType("System.Xml.XmlDictionaryReader", "XmlDictionaryReader");
            feature.AddKnownType("System.Xml.XmlDictionaryReaderQuotas", "XmlDictionaryReaderQuotas");
            feature.AddKnownType("System.Xml.XmlDictionaryReaderQuotaTypes", "XmlDictionaryReaderQuotaTypes");
            feature.AddKnownType("System.Xml.XmlDictionaryString", "XmlDictionaryString");
            feature.AddKnownType("System.Xml.XmlDictionaryWriter", "XmlDictionaryWriter");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Claims", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Claims.Claim", "Claim");
            feature.AddKnownType("System.Security.Claims.ClaimsIdentity", "ClaimsIdentity");
            feature.AddKnownType("System.Security.Claims.ClaimsPrincipal", "ClaimsPrincipal");
            feature.AddKnownType("System.Security.Principal.GenericIdentity", "GenericIdentity");
            feature.AddKnownType("System.Security.Principal.GenericPrincipal", "GenericPrincipal");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Algorithms", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.Aes", "Aes");
            feature.AddKnownType("System.Security.Cryptography.AesCcm", "AesCcm");
            feature.AddKnownType("System.Security.Cryptography.AesGcm", "AesGcm");
            feature.AddKnownType("System.Security.Cryptography.AesManaged", "AesManaged");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricKeyExchangeDeformatter", "AsymmetricKeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricKeyExchangeFormatter", "AsymmetricKeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricSignatureDeformatter", "AsymmetricSignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricSignatureFormatter", "AsymmetricSignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.CryptoConfig", "CryptoConfig");
            feature.AddKnownType("System.Security.Cryptography.DeriveBytes", "DeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.DES", "DES");
            feature.AddKnownType("System.Security.Cryptography.DSA", "DSA");
            feature.AddKnownType("System.Security.Cryptography.DSAParameters", "DSAParameters");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureDeformatter", "DSASignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureFormat", "DSASignatureFormat");
            feature.AddKnownType("System.Security.Cryptography.DSASignatureFormatter", "DSASignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.ECCurve", "ECCurve");
            feature.AddKnownType("System.Security.Cryptography.ECCurve+ECCurveType", "ECCurve.ECCurveType");
            feature.AddKnownType("System.Security.Cryptography.ECDiffieHellman", "ECDiffieHellman");
            feature.AddKnownType("System.Security.Cryptography.ECDiffieHellmanPublicKey", "ECDiffieHellmanPublicKey");
            feature.AddKnownType("System.Security.Cryptography.ECDsa", "ECDsa");
            feature.AddKnownType("System.Security.Cryptography.ECParameters", "ECParameters");
            feature.AddKnownType("System.Security.Cryptography.ECPoint", "ECPoint");
            feature.AddKnownType("System.Security.Cryptography.HMACMD5", "HMACMD5");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA1", "HMACSHA1");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA256", "HMACSHA256");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA384", "HMACSHA384");
            feature.AddKnownType("System.Security.Cryptography.HMACSHA512", "HMACSHA512");
            feature.AddKnownType("System.Security.Cryptography.IncrementalHash", "IncrementalHash");
            feature.AddKnownType("System.Security.Cryptography.MaskGenerationMethod", "MaskGenerationMethod");
            feature.AddKnownType("System.Security.Cryptography.MD5", "MD5");
            feature.AddKnownType("System.Security.Cryptography.PKCS1MaskGenerationMethod", "PKCS1MaskGenerationMethod");
            feature.AddKnownType("System.Security.Cryptography.RandomNumberGenerator", "RandomNumberGenerator");
            feature.AddKnownType("System.Security.Cryptography.RC2", "RC2");
            feature.AddKnownType("System.Security.Cryptography.Rfc2898DeriveBytes", "Rfc2898DeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.Rijndael", "Rijndael");
            feature.AddKnownType("System.Security.Cryptography.RijndaelManaged", "RijndaelManaged");
            feature.AddKnownType("System.Security.Cryptography.RSA", "RSA");
            feature.AddKnownType("System.Security.Cryptography.RSAEncryptionPadding", "RSAEncryptionPadding");
            feature.AddKnownType("System.Security.Cryptography.RSAEncryptionPaddingMode", "RSAEncryptionPaddingMode");
            feature.AddKnownType("System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter", "RSAOAEPKeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAOAEPKeyExchangeFormatter", "RSAOAEPKeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSAParameters", "RSAParameters");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter", "RSAPKCS1KeyExchangeDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter", "RSAPKCS1KeyExchangeFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1SignatureDeformatter", "RSAPKCS1SignatureDeformatter");
            feature.AddKnownType("System.Security.Cryptography.RSAPKCS1SignatureFormatter", "RSAPKCS1SignatureFormatter");
            feature.AddKnownType("System.Security.Cryptography.RSASignaturePadding", "RSASignaturePadding");
            feature.AddKnownType("System.Security.Cryptography.RSASignaturePaddingMode", "RSASignaturePaddingMode");
            feature.AddKnownType("System.Security.Cryptography.SHA1", "SHA1");
            feature.AddKnownType("System.Security.Cryptography.SHA1Managed", "SHA1Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA256", "SHA256");
            feature.AddKnownType("System.Security.Cryptography.SHA256Managed", "SHA256Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA384", "SHA384");
            feature.AddKnownType("System.Security.Cryptography.SHA384Managed", "SHA384Managed");
            feature.AddKnownType("System.Security.Cryptography.SHA512", "SHA512");
            feature.AddKnownType("System.Security.Cryptography.SHA512Managed", "SHA512Managed");
            feature.AddKnownType("System.Security.Cryptography.SignatureDescription", "SignatureDescription");
            feature.AddKnownType("System.Security.Cryptography.TripleDES", "TripleDES");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Csp", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AesCryptoServiceProvider", "AesCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.CspKeyContainerInfo", "CspKeyContainerInfo");
            feature.AddKnownType("System.Security.Cryptography.CspParameters", "CspParameters");
            feature.AddKnownType("System.Security.Cryptography.CspProviderFlags", "CspProviderFlags");
            feature.AddKnownType("System.Security.Cryptography.DESCryptoServiceProvider", "DESCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.DSACryptoServiceProvider", "DSACryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.ICspAsymmetricAlgorithm", "ICspAsymmetricAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.KeyNumber", "KeyNumber");
            feature.AddKnownType("System.Security.Cryptography.MD5CryptoServiceProvider", "MD5CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.PasswordDeriveBytes", "PasswordDeriveBytes");
            feature.AddKnownType("System.Security.Cryptography.RC2CryptoServiceProvider", "RC2CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.RNGCryptoServiceProvider", "RNGCryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.RSACryptoServiceProvider", "RSACryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA1CryptoServiceProvider", "SHA1CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA256CryptoServiceProvider", "SHA256CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA384CryptoServiceProvider", "SHA384CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.SHA512CryptoServiceProvider", "SHA512CryptoServiceProvider");
            feature.AddKnownType("System.Security.Cryptography.TripleDESCryptoServiceProvider", "TripleDESCryptoServiceProvider");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Encoding", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedData", "AsnEncodedData");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedDataCollection", "AsnEncodedDataCollection");
            feature.AddKnownType("System.Security.Cryptography.AsnEncodedDataEnumerator", "AsnEncodedDataEnumerator");
            feature.AddKnownType("System.Security.Cryptography.FromBase64Transform", "FromBase64Transform");
            feature.AddKnownType("System.Security.Cryptography.FromBase64TransformMode", "FromBase64TransformMode");
            feature.AddKnownType("System.Security.Cryptography.Oid", "Oid");
            feature.AddKnownType("System.Security.Cryptography.OidCollection", "OidCollection");
            feature.AddKnownType("System.Security.Cryptography.OidEnumerator", "OidEnumerator");
            feature.AddKnownType("System.Security.Cryptography.OidGroup", "OidGroup");
            feature.AddKnownType("System.Security.Cryptography.PemFields", "PemFields");
            feature.AddKnownType("System.Security.Cryptography.ToBase64Transform", "ToBase64Transform");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.Primitives", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.AsymmetricAlgorithm", "AsymmetricAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.CipherMode", "CipherMode");
            feature.AddKnownType("System.Security.Cryptography.CryptographicUnexpectedOperationException", "CryptographicUnexpectedOperationException");
            feature.AddKnownType("System.Security.Cryptography.CryptoStream", "CryptoStream");
            feature.AddKnownType("System.Security.Cryptography.CryptoStreamMode", "CryptoStreamMode");
            feature.AddKnownType("System.Security.Cryptography.HashAlgorithm", "HashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.HashAlgorithmName", "HashAlgorithmName");
            feature.AddKnownType("System.Security.Cryptography.HMAC", "HMAC");
            feature.AddKnownType("System.Security.Cryptography.ICryptoTransform", "ICryptoTransform");
            feature.AddKnownType("System.Security.Cryptography.KeyedHashAlgorithm", "KeyedHashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.KeySizes", "KeySizes");
            feature.AddKnownType("System.Security.Cryptography.PaddingMode", "PaddingMode");
            feature.AddKnownType("System.Security.Cryptography.PbeEncryptionAlgorithm", "PbeEncryptionAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.PbeParameters", "PbeParameters");
            feature.AddKnownType("System.Security.Cryptography.SymmetricAlgorithm", "SymmetricAlgorithm");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Security.Cryptography.X509Certificates", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("Microsoft.Win32.SafeHandles.SafeX509ChainHandle,System.Security.Cryptography.X509Certificates", "Microsoft.Win32.SafeHandles.SafeX509ChainHandle");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.CertificateRequest", "CertificateRequest");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.OpenFlags", "OpenFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.PublicKey", "PublicKey");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.StoreLocation", "StoreLocation");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.StoreName", "StoreName");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder", "SubjectAlternativeNameBuilder");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X500DistinguishedName", "X500DistinguishedName");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags", "X500DistinguishedNameFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension", "X509BasicConstraintsExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate", "X509Certificate");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2", "X509Certificate2");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2Collection", "X509Certificate2Collection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator", "X509Certificate2Enumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509CertificateCollection", "X509CertificateCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator", "X509CertificateCollection.X509CertificateEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Chain", "X509Chain");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElement", "X509ChainElement");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElementCollection", "X509ChainElementCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator", "X509ChainElementEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainPolicy", "X509ChainPolicy");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainStatus", "X509ChainStatus");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainStatusFlags", "X509ChainStatusFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ChainTrustMode", "X509ChainTrustMode");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ContentType", "X509ContentType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension", "X509EnhancedKeyUsageExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Extension", "X509Extension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ExtensionCollection", "X509ExtensionCollection");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator", "X509ExtensionEnumerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509FindType", "X509FindType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509IncludeOption", "X509IncludeOption");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyStorageFlags", "X509KeyStorageFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyUsageExtension", "X509KeyUsageExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509KeyUsageFlags", "X509KeyUsageFlags");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509NameType", "X509NameType");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509RevocationFlag", "X509RevocationFlag");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509RevocationMode", "X509RevocationMode");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SignatureGenerator", "X509SignatureGenerator");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509Store", "X509Store");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension", "X509SubjectKeyIdentifierExtension");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm", "X509SubjectKeyIdentifierHashAlgorithm");
            feature.AddKnownType("System.Security.Cryptography.X509Certificates.X509VerificationFlags", "X509VerificationFlags");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encoding.CodePages", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.CodePagesEncodingProvider", "CodePagesEncodingProvider");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encoding.Extensions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.ASCIIEncoding", "ASCIIEncoding");
            feature.AddKnownType("System.Text.UnicodeEncoding", "UnicodeEncoding");
            feature.AddKnownType("System.Text.UTF32Encoding", "UTF32Encoding");
            feature.AddKnownType("System.Text.UTF7Encoding", "UTF7Encoding");
            feature.AddKnownType("System.Text.UTF8Encoding", "UTF8Encoding");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Encodings.Web", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.Encodings.Web.HtmlEncoder", "HtmlEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.JavaScriptEncoder", "JavaScriptEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.TextEncoder", "TextEncoder");
            feature.AddKnownType("System.Text.Encodings.Web.TextEncoderSettings", "TextEncoderSettings");
            feature.AddKnownType("System.Text.Encodings.Web.UrlEncoder", "UrlEncoder");
            feature.AddKnownType("System.Text.Unicode.UnicodeRange", "UnicodeRange");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.Json", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.Json.JsonCommentHandling", "JsonCommentHandling");
            feature.AddKnownType("System.Text.Json.JsonDocument", "JsonDocument");
            feature.AddKnownType("System.Text.Json.JsonDocumentOptions", "JsonDocumentOptions");
            feature.AddKnownType("System.Text.Json.JsonElement", "JsonElement");
            feature.AddKnownType("System.Text.Json.JsonElement+ArrayEnumerator", "JsonElement.ArrayEnumerator");
            feature.AddKnownType("System.Text.Json.JsonElement+ObjectEnumerator", "JsonElement.ObjectEnumerator");
            feature.AddKnownType("System.Text.Json.JsonEncodedText", "JsonEncodedText");
            feature.AddKnownType("System.Text.Json.JsonException", "JsonException");
            feature.AddKnownType("System.Text.Json.JsonNamingPolicy", "JsonNamingPolicy");
            feature.AddKnownType("System.Text.Json.JsonProperty", "JsonProperty");
            feature.AddKnownType("System.Text.Json.JsonReaderOptions", "JsonReaderOptions");
            feature.AddKnownType("System.Text.Json.JsonReaderState", "JsonReaderState");
            feature.AddKnownType("System.Text.Json.JsonSerializerDefaults", "JsonSerializerDefaults");
            feature.AddKnownType("System.Text.Json.JsonSerializerOptions", "JsonSerializerOptions");
            feature.AddKnownType("System.Text.Json.JsonTokenType", "JsonTokenType");
            feature.AddKnownType("System.Text.Json.JsonValueKind", "JsonValueKind");
            feature.AddKnownType("System.Text.Json.JsonWriterOptions", "JsonWriterOptions");
            feature.AddKnownType("System.Text.Json.Utf8JsonReader", "Utf8JsonReader");
            feature.AddKnownType("System.Text.Json.Utf8JsonWriter", "Utf8JsonWriter");
            feature.AddKnownType("System.Text.Json.Serialization.JsonAttribute", "JsonAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConstructorAttribute", "JsonConstructorAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverter", "JsonConverter");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverter`1", "JsonConverter`1'1");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverterAttribute", "JsonConverterAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonConverterFactory", "JsonConverterFactory");
            feature.AddKnownType("System.Text.Json.Serialization.JsonExtensionDataAttribute", "JsonExtensionDataAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIgnoreAttribute", "JsonIgnoreAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIgnoreCondition", "JsonIgnoreCondition");
            feature.AddKnownType("System.Text.Json.Serialization.JsonIncludeAttribute", "JsonIncludeAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonNumberHandling", "JsonNumberHandling");
            feature.AddKnownType("System.Text.Json.Serialization.JsonNumberHandlingAttribute", "JsonNumberHandlingAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonPropertyNameAttribute", "JsonPropertyNameAttribute");
            feature.AddKnownType("System.Text.Json.Serialization.JsonStringEnumConverter", "JsonStringEnumConverter");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceHandler", "ReferenceHandler");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceHandler`1", "ReferenceHandler`1'1");
            feature.AddKnownType("System.Text.Json.Serialization.ReferenceResolver", "ReferenceResolver");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Text.RegularExpressions", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Text.RegularExpressions.Capture", "Capture");
            feature.AddKnownType("System.Text.RegularExpressions.CaptureCollection", "CaptureCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Group", "Group");
            feature.AddKnownType("System.Text.RegularExpressions.GroupCollection", "GroupCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Match", "Match");
            feature.AddKnownType("System.Text.RegularExpressions.MatchCollection", "MatchCollection");
            feature.AddKnownType("System.Text.RegularExpressions.Regex", "Regex");
            feature.AddKnownType("System.Text.RegularExpressions.RegexCompilationInfo", "RegexCompilationInfo");
            feature.AddKnownType("System.Text.RegularExpressions.RegexMatchTimeoutException", "RegexMatchTimeoutException");
            feature.AddKnownType("System.Text.RegularExpressions.RegexOptions", "RegexOptions");
            feature.AddKnownType("System.Text.RegularExpressions.RegexParseError", "RegexParseError");
            feature.AddKnownType("System.Text.RegularExpressions.RegexParseException", "RegexParseException");
            feature.AddKnownType("System.Text.RegularExpressions.RegexRunner", "RegexRunner");
            feature.AddKnownType("System.Text.RegularExpressions.RegexRunnerFactory", "RegexRunnerFactory");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Channels", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Channels.BoundedChannelFullMode", "BoundedChannelFullMode");
            feature.AddKnownType("System.Threading.Channels.BoundedChannelOptions", "BoundedChannelOptions");
            feature.AddKnownType("System.Threading.Channels.Channel`1", "Channel`1'1");
            feature.AddKnownType("System.Threading.Channels.Channel`2", "Channel`2'2");
            feature.AddKnownType("System.Threading.Channels.ChannelClosedException", "ChannelClosedException");
            feature.AddKnownType("System.Threading.Channels.ChannelOptions", "ChannelOptions");
            feature.AddKnownType("System.Threading.Channels.ChannelReader`1", "ChannelReader`1'1");
            feature.AddKnownType("System.Threading.Channels.ChannelWriter`1", "ChannelWriter`1'1");
            feature.AddKnownType("System.Threading.Channels.UnboundedChannelOptions", "UnboundedChannelOptions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.AbandonedMutexException", "AbandonedMutexException");
            feature.AddKnownType("System.Threading.AsyncFlowControl", "AsyncFlowControl");
            feature.AddKnownType("System.Threading.AsyncLocalValueChangedArgs`1", "AsyncLocalValueChangedArgs`1'1");
            feature.AddKnownType("System.Threading.AsyncLocal`1", "AsyncLocal`1'1");
            feature.AddKnownType("System.Threading.AutoResetEvent", "AutoResetEvent");
            feature.AddKnownType("System.Threading.Barrier", "Barrier");
            feature.AddKnownType("System.Threading.BarrierPostPhaseException", "BarrierPostPhaseException");
            feature.AddKnownType("System.Threading.CountdownEvent", "CountdownEvent");
            feature.AddKnownType("System.Threading.EventResetMode", "EventResetMode");
            feature.AddKnownType("System.Threading.EventWaitHandle", "EventWaitHandle");
            feature.AddKnownType("System.Threading.ExecutionContext", "ExecutionContext");
            feature.AddKnownType("System.Threading.HostExecutionContext", "HostExecutionContext");
            feature.AddKnownType("System.Threading.HostExecutionContextManager", "HostExecutionContextManager");
            feature.AddKnownType("System.Threading.LockCookie", "LockCookie");
            feature.AddKnownType("System.Threading.LockRecursionException", "LockRecursionException");
            feature.AddKnownType("System.Threading.LockRecursionPolicy", "LockRecursionPolicy");
            feature.AddKnownType("System.Threading.ManualResetEvent", "ManualResetEvent");
            feature.AddKnownType("System.Threading.ManualResetEventSlim", "ManualResetEventSlim");
            feature.AddKnownType("System.Threading.Mutex", "Mutex");
            feature.AddKnownType("System.Threading.ReaderWriterLock", "ReaderWriterLock");
            feature.AddKnownType("System.Threading.ReaderWriterLockSlim", "ReaderWriterLockSlim");
            feature.AddKnownType("System.Threading.Semaphore", "Semaphore");
            feature.AddKnownType("System.Threading.SemaphoreFullException", "SemaphoreFullException");
            feature.AddKnownType("System.Threading.SemaphoreSlim", "SemaphoreSlim");
            feature.AddKnownType("System.Threading.SpinLock", "SpinLock");
            feature.AddKnownType("System.Threading.SpinWait", "SpinWait");
            feature.AddKnownType("System.Threading.SynchronizationContext", "SynchronizationContext");
            feature.AddKnownType("System.Threading.SynchronizationLockException", "SynchronizationLockException");
            feature.AddKnownType("System.Threading.ThreadLocal`1", "ThreadLocal`1'1");
            feature.AddKnownType("System.Threading.WaitHandleCannotBeOpenedException", "WaitHandleCannotBeOpenedException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Overlapped", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.NativeOverlapped", "NativeOverlapped");
            feature.AddKnownType("System.Threading.Overlapped", "Overlapped");
            feature.AddKnownType("System.Threading.PreAllocatedOverlapped", "PreAllocatedOverlapped");
            feature.AddKnownType("System.Threading.ThreadPoolBoundHandle", "ThreadPoolBoundHandle");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Tasks.Dataflow", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.AllowNullAttribute", "AllowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DisallowNullAttribute", "DisallowNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullAttribute", "MaybeNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullAttribute", "NotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute", "MaybeNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullWhenAttribute", "NotNullWhenAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute", "NotNullIfNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute", "DoesNotReturnAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute", "DoesNotReturnIfAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullAttribute", "MemberNotNullAttribute");
            feature.AddKnownType("System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute", "MemberNotNullWhenAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.IsReadOnlyAttribute", "IsReadOnlyAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ActionBlock`1", "ActionBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchBlock`1", "BatchBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchedJoinBlock`2", "BatchedJoinBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BatchedJoinBlock`3", "BatchedJoinBlock`3'3");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BroadcastBlock`1", "BroadcastBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.BufferBlock`1", "BufferBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowBlockOptions", "DataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowLinkOptions", "DataflowLinkOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowMessageHeader", "DataflowMessageHeader");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.DataflowMessageStatus", "DataflowMessageStatus");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions", "ExecutionDataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions", "GroupingDataflowBlockOptions");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IDataflowBlock", "IDataflowBlock");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IPropagatorBlock`2", "IPropagatorBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1", "IReceivableSourceBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ISourceBlock`1", "ISourceBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.ITargetBlock`1", "ITargetBlock`1'1");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.JoinBlock`2", "JoinBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.JoinBlock`3", "JoinBlock`3'3");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.TransformBlock`2", "TransformBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.TransformManyBlock`2", "TransformManyBlock`2'2");
            feature.AddKnownType("System.Threading.Tasks.Dataflow.WriteOnceBlock`1", "WriteOnceBlock`1'1");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Tasks.Parallel", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.Tasks.ParallelLoopResult", "ParallelLoopResult");
            feature.AddKnownType("System.Threading.Tasks.ParallelLoopState", "ParallelLoopState");
            feature.AddKnownType("System.Threading.Tasks.ParallelOptions", "ParallelOptions");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.Thread", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.LocalDataStoreSlot", "LocalDataStoreSlot");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.ApartmentState", "ApartmentState");
            feature.AddKnownType("System.Threading.CompressedStack", "CompressedStack");
            feature.AddKnownType("System.Threading.Thread", "Thread");
            feature.AddKnownType("System.Threading.ThreadAbortException", "ThreadAbortException");
            feature.AddKnownType("System.Threading.ThreadExceptionEventArgs", "ThreadExceptionEventArgs");
            feature.AddKnownType("System.Threading.ThreadInterruptedException", "ThreadInterruptedException");
            feature.AddKnownType("System.Threading.ThreadPriority", "ThreadPriority");
            feature.AddKnownType("System.Threading.ThreadStartException", "ThreadStartException");
            feature.AddKnownType("System.Threading.ThreadState", "ThreadState");
            feature.AddKnownType("System.Threading.ThreadStateException", "ThreadStateException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Threading.ThreadPool", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Threading.IThreadPoolWorkItem", "IThreadPoolWorkItem");
            feature.AddKnownType("System.Threading.RegisteredWaitHandle", "RegisteredWaitHandle");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Transactions.Local", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Transactions.CommittableTransaction", "CommittableTransaction");
            feature.AddKnownType("System.Transactions.DependentCloneOption", "DependentCloneOption");
            feature.AddKnownType("System.Transactions.DependentTransaction", "DependentTransaction");
            feature.AddKnownType("System.Transactions.Enlistment", "Enlistment");
            feature.AddKnownType("System.Transactions.EnlistmentOptions", "EnlistmentOptions");
            feature.AddKnownType("System.Transactions.EnterpriseServicesInteropOption", "EnterpriseServicesInteropOption");
            feature.AddKnownType("System.Transactions.IDtcTransaction", "IDtcTransaction");
            feature.AddKnownType("System.Transactions.IEnlistmentNotification", "IEnlistmentNotification");
            feature.AddKnownType("System.Transactions.IPromotableSinglePhaseNotification", "IPromotableSinglePhaseNotification");
            feature.AddKnownType("System.Transactions.ISimpleTransactionSuperior", "ISimpleTransactionSuperior");
            feature.AddKnownType("System.Transactions.ISinglePhaseNotification", "ISinglePhaseNotification");
            feature.AddKnownType("System.Transactions.IsolationLevel", "IsolationLevel");
            feature.AddKnownType("System.Transactions.ITransactionPromoter", "ITransactionPromoter");
            feature.AddKnownType("System.Transactions.PreparingEnlistment", "PreparingEnlistment");
            feature.AddKnownType("System.Transactions.SinglePhaseEnlistment", "SinglePhaseEnlistment");
            feature.AddKnownType("System.Transactions.SubordinateTransaction", "SubordinateTransaction");
            feature.AddKnownType("System.Transactions.Transaction", "Transaction");
            feature.AddKnownType("System.Transactions.TransactionAbortedException", "TransactionAbortedException");
            feature.AddKnownType("System.Transactions.TransactionEventArgs", "TransactionEventArgs");
            feature.AddKnownType("System.Transactions.TransactionException", "TransactionException");
            feature.AddKnownType("System.Transactions.TransactionInDoubtException", "TransactionInDoubtException");
            feature.AddKnownType("System.Transactions.TransactionInformation", "TransactionInformation");
            feature.AddKnownType("System.Transactions.TransactionManagerCommunicationException", "TransactionManagerCommunicationException");
            feature.AddKnownType("System.Transactions.TransactionOptions", "TransactionOptions");
            feature.AddKnownType("System.Transactions.TransactionPromotionException", "TransactionPromotionException");
            feature.AddKnownType("System.Transactions.TransactionScope", "TransactionScope");
            feature.AddKnownType("System.Transactions.TransactionScopeAsyncFlowOption", "TransactionScopeAsyncFlowOption");
            feature.AddKnownType("System.Transactions.TransactionScopeOption", "TransactionScopeOption");
            feature.AddKnownType("System.Transactions.TransactionStatus", "TransactionStatus");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Web.HttpUtility", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Web.HttpUtility", "HttpUtility");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.ReaderWriter", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.ConformanceLevel", "ConformanceLevel");
            feature.AddKnownType("System.Xml.DtdProcessing", "DtdProcessing");
            feature.AddKnownType("System.Xml.EntityHandling", "EntityHandling");
            feature.AddKnownType("System.Xml.Formatting", "Formatting");
            feature.AddKnownType("System.Xml.IApplicationResourceStreamResolver", "IApplicationResourceStreamResolver");
            feature.AddKnownType("System.Xml.IHasXmlNode", "IHasXmlNode");
            feature.AddKnownType("System.Xml.IXmlLineInfo", "IXmlLineInfo");
            feature.AddKnownType("System.Xml.IXmlNamespaceResolver", "IXmlNamespaceResolver");
            feature.AddKnownType("System.Xml.NamespaceHandling", "NamespaceHandling");
            feature.AddKnownType("System.Xml.NameTable", "NameTable");
            feature.AddKnownType("System.Xml.NewLineHandling", "NewLineHandling");
            feature.AddKnownType("System.Xml.ReadState", "ReadState");
            feature.AddKnownType("System.Xml.ValidationType", "ValidationType");
            feature.AddKnownType("System.Xml.WhitespaceHandling", "WhitespaceHandling");
            feature.AddKnownType("System.Xml.WriteState", "WriteState");
            feature.AddKnownType("System.Xml.XmlAttribute", "XmlAttribute");
            feature.AddKnownType("System.Xml.XmlAttributeCollection", "XmlAttributeCollection");
            feature.AddKnownType("System.Xml.XmlCDataSection", "XmlCDataSection");
            feature.AddKnownType("System.Xml.XmlCharacterData", "XmlCharacterData");
            feature.AddKnownType("System.Xml.XmlComment", "XmlComment");
            feature.AddKnownType("System.Xml.XmlConvert", "XmlConvert");
            feature.AddKnownType("System.Xml.XmlDateTimeSerializationMode", "XmlDateTimeSerializationMode");
            feature.AddKnownType("System.Xml.XmlDeclaration", "XmlDeclaration");
            feature.AddKnownType("System.Xml.XmlDocument", "XmlDocument");
            feature.AddKnownType("System.Xml.XmlDocumentFragment", "XmlDocumentFragment");
            feature.AddKnownType("System.Xml.XmlDocumentType", "XmlDocumentType");
            feature.AddKnownType("System.Xml.XmlElement", "XmlElement");
            feature.AddKnownType("System.Xml.XmlEntity", "XmlEntity");
            feature.AddKnownType("System.Xml.XmlEntityReference", "XmlEntityReference");
            feature.AddKnownType("System.Xml.XmlException", "XmlException");
            feature.AddKnownType("System.Xml.XmlImplementation", "XmlImplementation");
            feature.AddKnownType("System.Xml.XmlLinkedNode", "XmlLinkedNode");
            feature.AddKnownType("System.Xml.XmlNamedNodeMap", "XmlNamedNodeMap");
            feature.AddKnownType("System.Xml.XmlNamespaceManager", "XmlNamespaceManager");
            feature.AddKnownType("System.Xml.XmlNamespaceScope", "XmlNamespaceScope");
            feature.AddKnownType("System.Xml.XmlNameTable", "XmlNameTable");
            feature.AddKnownType("System.Xml.XmlNode", "XmlNode");
            feature.AddKnownType("System.Xml.XmlNodeChangedAction", "XmlNodeChangedAction");
            feature.AddKnownType("System.Xml.XmlNodeChangedEventArgs", "XmlNodeChangedEventArgs");
            feature.AddKnownType("System.Xml.XmlNodeList", "XmlNodeList");
            feature.AddKnownType("System.Xml.XmlNodeOrder", "XmlNodeOrder");
            feature.AddKnownType("System.Xml.XmlNodeReader", "XmlNodeReader");
            feature.AddKnownType("System.Xml.XmlNodeType", "XmlNodeType");
            feature.AddKnownType("System.Xml.XmlNotation", "XmlNotation");
            feature.AddKnownType("System.Xml.XmlOutputMethod", "XmlOutputMethod");
            feature.AddKnownType("System.Xml.XmlParserContext", "XmlParserContext");
            feature.AddKnownType("System.Xml.XmlProcessingInstruction", "XmlProcessingInstruction");
            feature.AddKnownType("System.Xml.XmlQualifiedName", "XmlQualifiedName");
            feature.AddKnownType("System.Xml.XmlReader", "XmlReader");
            feature.AddKnownType("System.Xml.XmlReaderSettings", "XmlReaderSettings");
            feature.AddKnownType("System.Xml.XmlResolver", "XmlResolver");
            feature.AddKnownType("System.Xml.XmlSecureResolver", "XmlSecureResolver");
            feature.AddKnownType("System.Xml.XmlSignificantWhitespace", "XmlSignificantWhitespace");
            feature.AddKnownType("System.Xml.XmlSpace", "XmlSpace");
            feature.AddKnownType("System.Xml.XmlText", "XmlText");
            feature.AddKnownType("System.Xml.XmlTextReader", "XmlTextReader");
            feature.AddKnownType("System.Xml.XmlTextWriter", "XmlTextWriter");
            feature.AddKnownType("System.Xml.XmlTokenizedType", "XmlTokenizedType");
            feature.AddKnownType("System.Xml.XmlUrlResolver", "XmlUrlResolver");
            feature.AddKnownType("System.Xml.XmlValidatingReader", "XmlValidatingReader");
            feature.AddKnownType("System.Xml.XmlWhitespace", "XmlWhitespace");
            feature.AddKnownType("System.Xml.XmlWriter", "XmlWriter");
            feature.AddKnownType("System.Xml.XmlWriterSettings", "XmlWriterSettings");
            feature.AddKnownType("System.Xml.Resolvers.XmlKnownDtds", "XmlKnownDtds");
            feature.AddKnownType("System.Xml.Resolvers.XmlPreloadedResolver", "XmlPreloadedResolver");
            feature.AddKnownType("System.Xml.Schema.IXmlSchemaInfo", "IXmlSchemaInfo");
            feature.AddKnownType("System.Xml.Schema.ValidationEventArgs", "ValidationEventArgs");
            feature.AddKnownType("System.Xml.Schema.XmlAtomicValue", "XmlAtomicValue");
            feature.AddKnownType("System.Xml.Schema.XmlSchema", "XmlSchema");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAll", "XmlSchemaAll");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnnotated", "XmlSchemaAnnotated");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnnotation", "XmlSchemaAnnotation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAny", "XmlSchemaAny");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAnyAttribute", "XmlSchemaAnyAttribute");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAppInfo", "XmlSchemaAppInfo");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttribute", "XmlSchemaAttribute");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttributeGroup", "XmlSchemaAttributeGroup");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaAttributeGroupRef", "XmlSchemaAttributeGroupRef");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaChoice", "XmlSchemaChoice");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCollection", "XmlSchemaCollection");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCollectionEnumerator", "XmlSchemaCollectionEnumerator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaCompilationSettings", "XmlSchemaCompilationSettings");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContent", "XmlSchemaComplexContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContentExtension", "XmlSchemaComplexContentExtension");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexContentRestriction", "XmlSchemaComplexContentRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaComplexType", "XmlSchemaComplexType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContent", "XmlSchemaContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentModel", "XmlSchemaContentModel");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentProcessing", "XmlSchemaContentProcessing");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaContentType", "XmlSchemaContentType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDatatype", "XmlSchemaDatatype");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDatatypeVariety", "XmlSchemaDatatypeVariety");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDerivationMethod", "XmlSchemaDerivationMethod");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaDocumentation", "XmlSchemaDocumentation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaElement", "XmlSchemaElement");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaEnumerationFacet", "XmlSchemaEnumerationFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaException", "XmlSchemaException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaExternal", "XmlSchemaExternal");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaFacet", "XmlSchemaFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaForm", "XmlSchemaForm");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaFractionDigitsFacet", "XmlSchemaFractionDigitsFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroup", "XmlSchemaGroup");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroupBase", "XmlSchemaGroupBase");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaGroupRef", "XmlSchemaGroupRef");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaIdentityConstraint", "XmlSchemaIdentityConstraint");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaImport", "XmlSchemaImport");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInclude", "XmlSchemaInclude");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInference", "XmlSchemaInference");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInference+InferenceOption", "XmlSchemaInference.InferenceOption");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInferenceException", "XmlSchemaInferenceException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaInfo", "XmlSchemaInfo");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaKey", "XmlSchemaKey");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaKeyref", "XmlSchemaKeyref");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaLengthFacet", "XmlSchemaLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxExclusiveFacet", "XmlSchemaMaxExclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxInclusiveFacet", "XmlSchemaMaxInclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMaxLengthFacet", "XmlSchemaMaxLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinExclusiveFacet", "XmlSchemaMinExclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinInclusiveFacet", "XmlSchemaMinInclusiveFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaMinLengthFacet", "XmlSchemaMinLengthFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaNotation", "XmlSchemaNotation");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaNumericFacet", "XmlSchemaNumericFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObject", "XmlSchemaObject");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectCollection", "XmlSchemaObjectCollection");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectEnumerator", "XmlSchemaObjectEnumerator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaObjectTable", "XmlSchemaObjectTable");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaParticle", "XmlSchemaParticle");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaPatternFacet", "XmlSchemaPatternFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaRedefine", "XmlSchemaRedefine");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSequence", "XmlSchemaSequence");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSet", "XmlSchemaSet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContent", "XmlSchemaSimpleContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContentExtension", "XmlSchemaSimpleContentExtension");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleContentRestriction", "XmlSchemaSimpleContentRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleType", "XmlSchemaSimpleType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeContent", "XmlSchemaSimpleTypeContent");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeList", "XmlSchemaSimpleTypeList");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeRestriction", "XmlSchemaSimpleTypeRestriction");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaSimpleTypeUnion", "XmlSchemaSimpleTypeUnion");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaTotalDigitsFacet", "XmlSchemaTotalDigitsFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaType", "XmlSchemaType");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaUnique", "XmlSchemaUnique");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaUse", "XmlSchemaUse");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidationException", "XmlSchemaValidationException");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidationFlags", "XmlSchemaValidationFlags");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidator", "XmlSchemaValidator");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaValidity", "XmlSchemaValidity");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaWhiteSpaceFacet", "XmlSchemaWhiteSpaceFacet");
            feature.AddKnownType("System.Xml.Schema.XmlSchemaXPath", "XmlSchemaXPath");
            feature.AddKnownType("System.Xml.Schema.XmlSeverityType", "XmlSeverityType");
            feature.AddKnownType("System.Xml.Schema.XmlTypeCode", "XmlTypeCode");
            feature.AddKnownType("System.Xml.Serialization.IXmlSerializable", "IXmlSerializable");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyAttributeAttribute", "XmlAnyAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyElementAttribute", "XmlAnyElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeAttribute", "XmlAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlElementAttribute", "XmlElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlEnumAttribute", "XmlEnumAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlIgnoreAttribute", "XmlIgnoreAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", "XmlNamespaceDeclarationsAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlRootAttribute", "XmlRootAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaProviderAttribute", "XmlSchemaProviderAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerNamespaces", "XmlSerializerNamespaces");
            feature.AddKnownType("System.Xml.Serialization.XmlTextAttribute", "XmlTextAttribute");
            feature.AddKnownType("System.Xml.XPath.IXPathNavigable", "IXPathNavigable");
            feature.AddKnownType("System.Xml.XPath.XmlCaseOrder", "XmlCaseOrder");
            feature.AddKnownType("System.Xml.XPath.XmlDataType", "XmlDataType");
            feature.AddKnownType("System.Xml.XPath.XmlSortOrder", "XmlSortOrder");
            feature.AddKnownType("System.Xml.XPath.XPathExpression", "XPathExpression");
            feature.AddKnownType("System.Xml.XPath.XPathItem", "XPathItem");
            feature.AddKnownType("System.Xml.XPath.XPathNamespaceScope", "XPathNamespaceScope");
            feature.AddKnownType("System.Xml.XPath.XPathNavigator", "XPathNavigator");
            feature.AddKnownType("System.Xml.XPath.XPathNodeIterator", "XPathNodeIterator");
            feature.AddKnownType("System.Xml.XPath.XPathNodeType", "XPathNodeType");
            feature.AddKnownType("System.Xml.XPath.XPathResultType", "XPathResultType");
            feature.AddKnownType("System.Xml.Xsl.IXsltContextFunction", "IXsltContextFunction");
            feature.AddKnownType("System.Xml.Xsl.IXsltContextVariable", "IXsltContextVariable");
            feature.AddKnownType("System.Xml.Xsl.XslCompiledTransform", "XslCompiledTransform");
            feature.AddKnownType("System.Xml.Xsl.XsltArgumentList", "XsltArgumentList");
            feature.AddKnownType("System.Xml.Xsl.XsltCompileException", "XsltCompileException");
            feature.AddKnownType("System.Xml.Xsl.XsltContext", "XsltContext");
            feature.AddKnownType("System.Xml.Xsl.XsltException", "XsltException");
            feature.AddKnownType("System.Xml.Xsl.XsltMessageEncounteredEventArgs", "XsltMessageEncounteredEventArgs");
            feature.AddKnownType("System.Xml.Xsl.XslTransform", "XslTransform");
            feature.AddKnownType("System.Xml.Xsl.XsltSettings", "XsltSettings");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XDocument", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.Linq.LoadOptions", "LoadOptions");
            feature.AddKnownType("System.Xml.Linq.ReaderOptions", "ReaderOptions");
            feature.AddKnownType("System.Xml.Linq.SaveOptions", "SaveOptions");
            feature.AddKnownType("System.Xml.Linq.XAttribute", "XAttribute");
            feature.AddKnownType("System.Xml.Linq.XCData", "XCData");
            feature.AddKnownType("System.Xml.Linq.XComment", "XComment");
            feature.AddKnownType("System.Xml.Linq.XContainer", "XContainer");
            feature.AddKnownType("System.Xml.Linq.XDeclaration", "XDeclaration");
            feature.AddKnownType("System.Xml.Linq.XDocument", "XDocument");
            feature.AddKnownType("System.Xml.Linq.XDocumentType", "XDocumentType");
            feature.AddKnownType("System.Xml.Linq.XElement", "XElement");
            feature.AddKnownType("System.Xml.Linq.XName", "XName");
            feature.AddKnownType("System.Xml.Linq.XNamespace", "XNamespace");
            feature.AddKnownType("System.Xml.Linq.XNode", "XNode");
            feature.AddKnownType("System.Xml.Linq.XNodeDocumentOrderComparer", "XNodeDocumentOrderComparer");
            feature.AddKnownType("System.Xml.Linq.XNodeEqualityComparer", "XNodeEqualityComparer");
            feature.AddKnownType("System.Xml.Linq.XObject", "XObject");
            feature.AddKnownType("System.Xml.Linq.XObjectChange", "XObjectChange");
            feature.AddKnownType("System.Xml.Linq.XObjectChangeEventArgs", "XObjectChangeEventArgs");
            feature.AddKnownType("System.Xml.Linq.XProcessingInstruction", "XProcessingInstruction");
            feature.AddKnownType("System.Xml.Linq.XStreamingElement", "XStreamingElement");
            feature.AddKnownType("System.Xml.Linq.XText", "XText");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XmlSerializer", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.Serialization.CodeGenerationOptions", "CodeGenerationOptions");
            feature.AddKnownType("System.Xml.Serialization.CodeIdentifier", "CodeIdentifier");
            feature.AddKnownType("System.Xml.Serialization.CodeIdentifiers", "CodeIdentifiers");
            feature.AddKnownType("System.Xml.Serialization.ImportContext", "ImportContext");
            feature.AddKnownType("System.Xml.Serialization.IXmlTextParser", "IXmlTextParser");
            feature.AddKnownType("System.Xml.Serialization.SchemaImporter", "SchemaImporter");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributeAttribute", "SoapAttributeAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributeOverrides", "SoapAttributeOverrides");
            feature.AddKnownType("System.Xml.Serialization.SoapAttributes", "SoapAttributes");
            feature.AddKnownType("System.Xml.Serialization.SoapElementAttribute", "SoapElementAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapEnumAttribute", "SoapEnumAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapIgnoreAttribute", "SoapIgnoreAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapIncludeAttribute", "SoapIncludeAttribute");
            feature.AddKnownType("System.Xml.Serialization.SoapReflectionImporter", "SoapReflectionImporter");
            feature.AddKnownType("System.Xml.Serialization.SoapSchemaMember", "SoapSchemaMember");
            feature.AddKnownType("System.Xml.Serialization.SoapTypeAttribute", "SoapTypeAttribute");
            feature.AddKnownType("System.Xml.Serialization.UnreferencedObjectEventArgs", "UnreferencedObjectEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlAnyElementAttributes", "XmlAnyElementAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayAttribute", "XmlArrayAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayItemAttribute", "XmlArrayItemAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlArrayItemAttributes", "XmlArrayItemAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeEventArgs", "XmlAttributeEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributeOverrides", "XmlAttributeOverrides");
            feature.AddKnownType("System.Xml.Serialization.XmlAttributes", "XmlAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlChoiceIdentifierAttribute", "XmlChoiceIdentifierAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlDeserializationEvents", "XmlDeserializationEvents");
            feature.AddKnownType("System.Xml.Serialization.XmlElementAttributes", "XmlElementAttributes");
            feature.AddKnownType("System.Xml.Serialization.XmlElementEventArgs", "XmlElementEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlIncludeAttribute", "XmlIncludeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlMapping", "XmlMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlMappingAccess", "XmlMappingAccess");
            feature.AddKnownType("System.Xml.Serialization.XmlMemberMapping", "XmlMemberMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlMembersMapping", "XmlMembersMapping");
            feature.AddKnownType("System.Xml.Serialization.XmlNodeEventArgs", "XmlNodeEventArgs");
            feature.AddKnownType("System.Xml.Serialization.XmlReflectionImporter", "XmlReflectionImporter");
            feature.AddKnownType("System.Xml.Serialization.XmlReflectionMember", "XmlReflectionMember");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaEnumerator", "XmlSchemaEnumerator");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaExporter", "XmlSchemaExporter");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemaImporter", "XmlSchemaImporter");
            feature.AddKnownType("System.Xml.Serialization.XmlSchemas", "XmlSchemas");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationGeneratedCode", "XmlSerializationGeneratedCode");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader", "XmlSerializationReader");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader+CollectionFixup", "CollectionFixup");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationReader+Fixup", "Fixup");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializationWriter", "XmlSerializationWriter");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializer", "XmlSerializer");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerAssemblyAttribute", "XmlSerializerAssemblyAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerFactory", "XmlSerializerFactory");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerImplementation", "XmlSerializerImplementation");
            feature.AddKnownType("System.Xml.Serialization.XmlSerializerVersionAttribute", "XmlSerializerVersionAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlTypeAttribute", "XmlTypeAttribute");
            feature.AddKnownType("System.Xml.Serialization.XmlTypeMapping", "XmlTypeMapping");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XPath", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("System.Xml.XPath.XPathDocument", "XPathDocument");
            feature.AddKnownType("System.Xml.XPath.XPathException", "XPathException");
            feature.AddKnownType("Microsoft.CodeAnalysis.EmbeddedAttribute,System.Xml.XPath.XDocument", "Microsoft.CodeAnalysis.EmbeddedAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableAttribute", "NullableAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullableContextAttribute", "NullableContextAttribute");
            feature.AddKnownType("System.Runtime.CompilerServices.NullablePublicOnlyAttribute", "NullablePublicOnlyAttribute");
            feature.AddKnownType("WWA.Configuration.ApiConfig,WWA.Configuration", "WWA.Configuration.ApiConfig");
            feature.AddKnownType("WWA.Configuration.MongoConfiguration,WWA.Configuration", "WWA.Configuration.MongoConfiguration");
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif

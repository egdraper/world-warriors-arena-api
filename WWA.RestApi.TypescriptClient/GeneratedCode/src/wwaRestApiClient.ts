/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { WwaRestApiClientContext } from "./wwaRestApiClientContext";

class WwaRestApiClient extends WwaRestApiClientContext {
  /**
   * Initializes a new instance of the WwaRestApiClient class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.WwaRestApiClientOptions) {
    super(options);
  }

  /**
   * @summary Queries a User
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  queryUsers(options?: Models.WwaRestApiClientQueryUsersOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  queryUsers(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  queryUsers(options: Models.WwaRestApiClientQueryUsersOptionalParams, callback: msRest.ServiceCallback<void>): void;
  queryUsers(options?: Models.WwaRestApiClientQueryUsersOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      queryUsersOperationSpec,
      callback);
  }

  /**
   * @summary Gets a list of Users
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUsersResponse>
   */
  getUsers(options?: Models.WwaRestApiClientGetUsersOptionalParams): Promise<Models.GetUsersResponse>;
  /**
   * @param callback The callback
   */
  getUsers(callback: msRest.ServiceCallback<Models.UserSummaryViewModel[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getUsers(options: Models.WwaRestApiClientGetUsersOptionalParams, callback: msRest.ServiceCallback<Models.UserSummaryViewModel[]>): void;
  getUsers(options?: Models.WwaRestApiClientGetUsersOptionalParams | msRest.ServiceCallback<Models.UserSummaryViewModel[]>, callback?: msRest.ServiceCallback<Models.UserSummaryViewModel[]>): Promise<Models.GetUsersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getUsersOperationSpec,
      callback) as Promise<Models.GetUsersResponse>;
  }

  /**
   * @summary Creates a User
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateUserResponse>
   */
  createUser(options?: Models.WwaRestApiClientCreateUserOptionalParams): Promise<Models.CreateUserResponse>;
  /**
   * @param callback The callback
   */
  createUser(callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  createUser(options: Models.WwaRestApiClientCreateUserOptionalParams, callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  createUser(options?: Models.WwaRestApiClientCreateUserOptionalParams | msRest.ServiceCallback<Models.UserReadViewModel>, callback?: msRest.ServiceCallback<Models.UserReadViewModel>): Promise<Models.CreateUserResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createUserOperationSpec,
      callback) as Promise<Models.CreateUserResponse>;
  }

  /**
   * @summary Gets a User
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserResponse>
   */
  getUser(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetUserResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getUser(id: string, callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getUser(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  getUser(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserReadViewModel>, callback?: msRest.ServiceCallback<Models.UserReadViewModel>): Promise<Models.GetUserResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getUserOperationSpec,
      callback) as Promise<Models.GetUserResponse>;
  }

  /**
   * @summary Replaces a User
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplaceUserResponse>
   */
  replaceUser(id: string, options?: Models.WwaRestApiClientReplaceUserOptionalParams): Promise<Models.ReplaceUserResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  replaceUser(id: string, callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceUser(id: string, options: Models.WwaRestApiClientReplaceUserOptionalParams, callback: msRest.ServiceCallback<Models.UserReadViewModel>): void;
  replaceUser(id: string, options?: Models.WwaRestApiClientReplaceUserOptionalParams | msRest.ServiceCallback<Models.UserReadViewModel>, callback?: msRest.ServiceCallback<Models.UserReadViewModel>): Promise<Models.ReplaceUserResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      replaceUserOperationSpec,
      callback) as Promise<Models.ReplaceUserResponse>;
  }

  /**
   * @summary Deletes a User
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteMethod(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const queryUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "users",
  queryParameters: [
    Parameters.email
  ],
  responses: {
    204: {},
    400: {},
    401: {},
    403: {},
    500: {},
    default: {}
  },
  serializer
};

const getUsersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users",
  queryParameters: [
    Parameters.skip,
    Parameters.take,
    Parameters.sortField,
    Parameters.sortDirection,
    Parameters.search
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserSummaryViewModel"
            }
          }
        }
      },
      headersMapper: Mappers.GetUsersHeaders
    },
    400: {
      headersMapper: Mappers.GetUsersHeaders
    },
    401: {
      headersMapper: Mappers.GetUsersHeaders
    },
    403: {
      headersMapper: Mappers.GetUsersHeaders
    },
    500: {
      headersMapper: Mappers.GetUsersHeaders
    },
    default: {}
  },
  serializer
};

const createUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "users",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UserCreateViewModel
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserReadViewModel
    },
    400: {},
    401: {},
    403: {},
    500: {},
    default: {}
  },
  serializer
};

const getUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserReadViewModel
    },
    401: {},
    403: {},
    404: {},
    500: {},
    default: {}
  },
  serializer
};

const replaceUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "users/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UserReplaceViewModel
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserReadViewModel
    },
    400: {},
    401: {},
    403: {},
    404: {},
    500: {},
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "users/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    500: {},
    default: {}
  },
  serializer
};

export {
  WwaRestApiClient,
  WwaRestApiClientContext,
  Models as WwaRestApiModels,
  Mappers as WwaRestApiMappers
};
